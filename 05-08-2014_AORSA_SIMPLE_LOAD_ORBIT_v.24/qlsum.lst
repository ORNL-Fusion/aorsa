


PGF90 (Version     14.2)          06/05/2015  08:32:31      page 1

Switches: -noasm -nodclchk -nodebug -nodlines -noline -list
          -idir /global/homes/j/jaegeref/AORSA2D/05-08-2014_AORSA_SIMPLE_LOAD_ORBIT_v.24/src/CQL3D_SETUP
          -idir /global/homes/j/jaegeref/AORSA2D/05-08-2014_AORSA_SIMPLE_LOAD_ORBIT_v.24/src/CQL3D_SETUP
          -idir /opt/cray/netcdf/4.3.2/PGI/141/include
          -idir /opt/cray/hdf5/1.8.13/PGI/141/include
          -idir /opt/cray/mpt/7.1.1/gni/mpich2-pgi/141/include
          -idir /opt/cray/mpt/7.1.1/gni/sma/include
          -idir /opt/cray/libsci/13.0.1/PGI/141/x86_64/include
          -idir /opt/cray/rca/1.0.0-2.0502.53711.3.125.gem/include
          -idir /opt/cray/alps/5.2.1-2.0502.9041.11.6.gem/include
          -idir /opt/cray/xpmem/0.1-2.0502.55507.3.2.gem/include
          -idir /opt/cray/gni-headers/3.0-1.0502.9684.5.2.gem/include
          -idir /opt/cray/dmapp/7.0.1-1.0502.9501.5.211.gem/include
          -idir /opt/cray/pmi/5.0.6-1.0000.10439.140.3.gem/include
          -idir /opt/cray/ugni/5.0-1.0502.9685.4.24.gem/include
          -idir /opt/cray/udreg/2.3.2-1.0502.9275.1.25.gem/include
          -idir /opt/cray/wlm_detect/1.0-1.0502.53341.1.1.gem/include
          -idir /opt/cray/krca/1.0.0-2.0502.53880.4.103.gem/include
          -idir /opt/cray-hss-devel/7.2.0/include
          -inform severe -opt 2 -save -object -noonetrip
          -depchk on -nostandard     
          -nosymbol -noupcase    

Filename: /global/homes/j/jaegeref/AORSA2D/05-08-2014_AORSA_SIMPLE_LOAD_ORBIT_v.24/src/qlsum.f90

(    1)   	module qlsum_myra_mod
(    2)          contains
(    3) !module METS2AORSA_MYRA
(    4) 
(    5) !  private
(    6) !  public::  GET_WMAT_MYRA, intplt1d, WINTERP1D_3
(    7) 
(    8) !contains
(    9) 
(   10) 
(   11) !
(   12) !*************************************************************************
(   13) !
(   14)     subroutine QLSUM_MAXWELLIAN(k_uper, b_sum, c_sum, e_sum, f_sum, &
(   15)        & sum_wdot, sum_fx0, sum_fy0, W, ZSPEC, ASPEC, BMAG, &
(   16)        & lmax, ENORM, UPARMIN, UPARMAX, &
(   17)        & NUPAR, NUPER, UPER, UPAR, DFDUPER, DFDUPAR,  &
(   18)        & ealphak, ebetak, ebk, nkdim1, nkdim2, mkdim1, mkdim2,   &
(   19)        & nkx1, nkx2, nky1, nky2, &
(   20)        & uxx, uxy, uxz, &
(   21)        & uyx, uyy, uyz, &
(   22)        & uzx, uzy, uzz, &
(   23)        & nxdim, nydim, xkxsav, xkysav, xkphi, xx, yy, i_global, j_global, &
(   24)        & lmaxdim, ndist, nzeta, &
(   25)        & gradprlb, bmod, omgc, alpha, xm, upshift, xk_cutoff, rt, nphi, rho)
(   26) 
(   27)     implicit none
(   28) 
(   29)     integer i_global, j_global, ier, nxdim, nydim, k, lmaxdim, ndist
(   30)     integer, intent(IN):: NUPAR, NUPER, lmax
(   31)     integer nkx1, nkx2, nky1, nky2, j_upar, k_uper, l
(   32)     integer nkdim1, nkdim2, mkdim1, mkdim2
(   33)     integer:: NHARM, IHARM, M, N, i, nzeta
(   34)     integer i_uprl, upshift






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 2

(   35)     integer ires, iresmax, nphi
(   36) 
(   37)     complex, dimension(:,:), allocatable :: zbeta
(   38)     complex, dimension(:,:), allocatable :: zbeta_iharm
(   39)     complex ttmp_11, cross_13, cross_31, landau_33, ttmp, cross2, cross3, ld
(   40)     
(   41)     real  y, y0, alpha, xm, akprl, sgn_kprl, omgc, bmod, xkprl_eff,  &
(   42)    &   descrim, xme, fgam, gradprlb, gammab, xk_cutoff, rt, akprl_min, rho
(   43) 
(   44)     real  uxx, uxy, uxz, uyx, uyy, uyz, uzx, uzy, uzz
(   45)     real  xkphi, sinth, factc, facte, factf, sinth_inv
(   46)     real  xkxsav(nkdim1 : nkdim2), xkysav(mkdim1 : mkdim2)
(   47)     real  xkperpn, xkperpni, xkrhon, xketan, xkprln, beta
(   48)     real, intent(IN):: W, ZSPEC, ASPEC, BMAG
(   49)     real, intent(IN):: ENORM, UPARMIN, UPARMAX
(   50)     real, dimension(NUPER), intent(IN):: UPER
(   51)     real, dimension(NUPAR), intent(IN):: UPAR
(   52)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER, DFDUPAR
(   53)     real:: W2, WCW, RRP, RRM, WC, WCI
(   54)     real:: MUT0, SQMUT0, PISQMUT0, SQMUT0I, KPARA1
(   55)     real:: ISQ2, SQ2, NWCW, DFACTPAR, DFACTPER, U0
(   56)     real:: UPAR0, dfdupar0, dfduper0, du, dui, p 
(   57)     real:: time, t1, tmsec, second1, dummy, WI, uperpk, uperpk2
(   58)     real:: dzeta, dzetai, zetamax, zetamin, zeta0, zetamax1, zetamax2
(   59)     real:: A1, A2, A3, u
(   60)     real:: temp1, temp2, temp3, factor
(   61)     real:: temp1w, temp2w, temp3w
(   62)     
(   63)     real, dimension(:),     allocatable :: zetai
(   64)     real, dimension(:,:),   allocatable :: Jni
(   65)     real, dimension(:,:,:), allocatable :: Jn
(   66)     real, dimension(:,:),   allocatable :: NPARA_sav
(   67)     
(   68)     integer, dimension(:),  allocatable :: nres
(   69)     integer, dimension(:),  allocatable :: mres
(   70)         
(   71)     complex, dimension(:),  allocatable :: sumb_11
(   72)     complex, dimension(:),  allocatable :: sumb_31
(   73)      
(   74)     complex, dimension(:),  allocatable :: sumc_11
(   75)     complex, dimension(:),  allocatable :: sumc_31
(   76)     
(   77)     complex, dimension(:),  allocatable :: sume_11
(   78)     complex, dimension(:),  allocatable :: sume_31
(   79)      
(   80)     complex, dimension(:),  allocatable :: sumf_11
(   81)     complex, dimension(:),  allocatable :: sumf_31
(   82)     
(   83)     complex sumf_11_nm
(   84)     complex sumf_31_nm
(   85) 
(   86)     complex sume_11_nm
(   87)     complex sume_31_nm
(   88)        
(   89)     complex sumc_11_nm
(   90)     complex sumc_31_nm
(   91)        
(   92)     complex sumb_11_nm






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 3

(   93)     complex sumb_31_nm
(   94)  
(   95)     logical, dimension(:,:), allocatable :: is_resonance_nm      
(   96) 
(   97)     complex epsx, epsy, epsz
(   98)     complex ealphak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(   99)     &        ebetak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(  100)     &           ebk(nkdim1 : nkdim2, mkdim1 : mkdim2)
(  101)     complex cexpkx, cexpky, zi, zeta
(  102) 
(  103)     complex xx(nkdim1 : nkdim2, 1 : nxdim),   &
(  104)      &      yy(mkdim1 : mkdim2, 1 : nydim)
(  105) 
(  106)     complex cexpn, cexpnp1, cexpnm1, cexp11
(  107) 
(  108)     complex cexp1, cexp2, cexp0
(  109)     complex sumwdot_11_nm, sumwdot_31_nm
(  110)     
(  111)     complex sumwdot_11, sumwdot_31
(  112)     complex sumwdotkx_11, sumwdotkx_31
(  113)     complex sumwdotky_11, sumwdotky_31
(  114) 	
(  115)     complex sum2_1, sum2_2, sum2_3
(  116)     complex sum1_1, sum1_2, sum1_3, sum1_4
(  117)     complex sumkx2_1, sumkx2_2, sumkx2_3 
(  118)     complex sumky2_1, sumky2_2, sumky2_3        
(  119)     
(  120)     complex b_sum(nupar), c_sum(nupar), e_sum(nupar), f_sum(nupar)
(  121)     complex sum_wdot, sum_fx0, sum_fy0
(  122)     complex b(100)
(  123) 
(  124)     real, parameter:: EOVERAMU=9.64853e7
(  125)     real, parameter:: EOVERMH = 9.58084e+07
(  126)     
(  127)     real, parameter:: MPC2 = 938271998.38
(  128)     real, parameter:: C = 2.99792458e8
(  129)     real, parameter:: PI = 3.141592653597932384
(  130)     real :: cosbeta_n_m, sinbeta_n_m
(  131)     common/upcom/akprl_min    
(  132)     
(  133)     allocate( zbeta(nkx1:nkx2,nky1:nky2) )
(  134)     allocate( zbeta_iharm(nkx1:nkx2,nky1:nky2) )
(  135) 
(  136)     allocate(zetai(nzeta + 1) )
(  137)     allocate(Jni(-lmaxdim : lmaxdim, nzeta + 1) )
(  138)     allocate( Jn(-lmaxdim : lmaxdim, nkdim1 : nkdim2, mkdim1 : mkdim2))    
(  139)     allocate(NPARA_sav(nkdim1 : nkdim2, mkdim1 : mkdim2) ) 
(  140)     
(  141)     allocate(nres(nxdim * nydim) )
(  142)     allocate(mres(nxdim * nydim) )
(  143)     
(  144)     allocate(sumb_11(nupar))
(  145)     allocate(sumb_31(nupar))
(  146)      
(  147)     allocate(sumc_11(nupar))
(  148)     allocate(sumc_31(nupar))
(  149)     
(  150)     allocate(sume_11(nupar))






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 4

(  151)     allocate(sume_31(nupar))
(  152)      
(  153)     allocate(sumf_11(nupar))
(  154)     allocate(sumf_31(nupar))
(  155) 
(  156)     allocate(is_resonance_nm(nkx1:nkx2,nky1:nky2))
(  157) 
(  158) !   -------------------------------------
(  159) !   initialize allocatable arrays to zero
(  160) !   -------------------------------------
(  161) 
(  162)     zbeta = 0.0
(  163)     zbeta_iharm = 0.0
(  164) 
(  165)     sumf_11_nm = 0.0
(  166)     sumf_31_nm = 0.0
(  167) 
(  168)     sume_11_nm = 0.0
(  169)     sume_31_nm = 0.0
(  170)     
(  171)     sumc_11_nm = 0.0
(  172)     sumc_31_nm = 0.0
(  173)     
(  174)     sumb_11_nm = 0.0
(  175)     sumb_31_nm = 0.0
(  176) 
(  177)     is_resonance_nm = .false.
(  178) 
(  179)     zetai = 0.0
(  180)     Jni = 0.0
(  181)     NPARA_sav = 0.0
(  182) 
(  183)     sumb_11 = 0.0
(  184)     sumb_31 = 0.0
(  185)       
(  186)     sumc_11 = 0.0
(  187)     sumc_31 = 0.0
(  188) 
(  189)     sume_11 = 0.0
(  190)     sume_31 = 0.0
(  191) 
(  192)     sumf_11 = 0.0
(  193)     sumf_31 = 0.0    
(  194)     
(  195)     xme = 9.11e-31
(  196)     zi = cmplx(0., 1.)
(  197)     
(  198)     uperpk = uper(k_uper)
(  199)     uperpk2 = uperpk**2
(  200) 
(  201)     W2 = W * W
(  202)     WI = 1.0 / W
(  203) 
(  204)     WCW = BMAG * ZSPEC * EOVERMH / ASPEC / W
(  205)     WC = WCW * W
(  206)     WCI = 1.0 /WC
(  207) 
(  208)     MUT0 = 0.5 * MPC2 * ASPEC / ENORM






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 5

(  209)     SQMUT0 = SQRT(MUT0)
(  210)     SQMUT0I = 1.0 / SQMUT0
(  211)     PISQMUT0 = SQMUT0 * pi
(  212) 
(  213)     ISQ2 = SQRT(0.5)
(  214)     SQ2 = SQRT(2.0)
(  215)     NHARM = lmax
(  216)     
(  217)     du = (upar(nupar) - upar(1)) / (nupar - 1)
(  218)     dui = 1.0 / du
(  219)     
(  220)     if(nzeta .eq. 1)then
(  221)     
(  222)     ! -------------------------------------------------------- !
(  223)     ! ---Don't interpolate: precalculate all Bessel functions- !
(  224)     ! -------------------------------------------------------- !
(  225) 
(  226)        do n = nkx1, nkx2
(  227)           do m = nky1, nky2
(  228) 
(  229)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  230)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  231)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  232) 	     xkperpn = sqrt(xkrhon**2 + xketan**2)
(  233) 	     
(  234)             ! ------------------------------------
(  235)             ! Optional: leave out upshift in xkprl
(  236)             ! --------------------------------- --          
(  237)               if (upshift .eq. 0)xkprln = uzz * xkphi
(  238) !	      if (upshift .eq. 0)xkprln = nphi /rt
(  239) 	      
(  240) 	     if (upshift .eq. -1) then      
(  241)                 if (xkperpn  .gt. xk_cutoff) xkprln = uzz * xkphi
(  242)              end if	      
(  243) 	     
(  244) 	     
(  245) 	     sgn_kprl = sign(1.0, xkprln)
(  246)              akprl = abs(xkprln)		      
(  247) 		     
(  248) !            ----------------------------------------------
(  249) !            Optional: Don't allow xkprl to be 0 (upshift = -2)
(  250) !            ----------------------------------------------        
(  251)              if (upshift .eq. -2) then
(  252)                 if (akprl .lt. akprl_min) then
(  253) 		    xkprln = akprl_min * sgn_kprl
(  254) 		end if 
(  255)              end if		     
(  256) 	     
(  257) 
(  258)              y0 = 1.5
(  259)              y = y0
(  260) 	     
(  261)       
(  262)              l = 1
(  263) 	     if(xkprln .eq. 0)xkprln = 1.0e-06
(  264)              gammab = abs(l * omgc / (2.0 * alpha * xkprln**2)  &
(  265)      &                                    * gradprlb / bmod)
(  266) 






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 6

(  267)              if(xm .eq. xme)gammab = 0.0
(  268) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
(  269)              if(abs(gammab) .lt. .01)gammab = .01
(  270) 
(  271) 
(  272)              if(sgn_kprl .ge. 0.0)then
(  273)                 fgam = 1.0
(  274) 
(  275)                 if(gammab .gt. 1.0e-05)then
(  276)                    y = y0
(  277)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
(  278)      &               / (2. * gammab * y)
(  279)                 endif
(  280) 
(  281)                 xkprl_eff = xkprln / fgam 
(  282) 
(  283)              end if
(  284) 
(  285) 
(  286)              if(sgn_kprl .lt. 0.0)then
(  287)                 fgam = 1.0
(  288) 
(  289)                 if(gammab .gt. 1.0e-05)then
(  290)                    descrim = 1. - 4. * gammab * y0
(  291)                    if (descrim .ge. 0.0) y =   y0
(  292)                    if (descrim .lt. 0.0) y = - y0
(  293)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
(  294)      &                / (2. * gammab * y)
(  295)                 endif
(  296) 
(  297)                 xkprl_eff = xkprln / fgam 
(  298) 
(  299)              end if
(  300) 
(  301)              if (upshift .ne. 0) xkprln = xkprl_eff	     
(  302) 	
(  303)              NPARA_sav(n, m) = xkprln * C / W
(  304) 
(  305)              xkperpn = sqrt(xkrhon**2 + xketan**2)
(  306)              if(xkperpn .eq. 0.0)xkperpn = 1.0e-08
(  307) 	
(  308)              cosbeta_n_m  = xkrhon / xkperpn
(  309)              sinbeta_n_m  = xketan / xkperpn
(  310)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m  )
(  311) 
(  312)              zeta = xkperpn * uper(k_uper) * c * sqmut0i / wc
(  313) 
(  314)              call besjc(zeta, nharm + 2, b, ier)
(  315)              if(ier .ne. 0) write(6, *) "ier = ", ier
(  316) 
(  317)              do IHARM = 0, NHARM + 1
(  318)                 Jn(iharm,  n, m) = b(iharm + 1)
(  319)                 Jn(-iharm, n, m) = (-1.0)**iharm * Jn(iharm, n, m)
(  320)              end do
(  321) 
(  322)           end do
(  323)        end do
(  324)     






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 7

(  325)     else
(  326)     
(  327)         
(  328)        ! -------------------------------------- !
(  329)        ! ---Interpolate; calculate zeta mesh -- !
(  330)        ! -------------------------------------- !
(  331)     
(  332)        zetamax = 0.0
(  333)        zetamin = 0.0
(  334)     
(  335)        do n = nkx1, nkx2
(  336)           do m = nky1, nky2
(  337) 
(  338)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  339)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  340)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  341) 
(  342)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
(  343) 	
(  344)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
(  345) 	  
(  346)              if (zeta0 .gt. zetamax) zetamax = zeta0
(  347)              if (zeta0 .lt. zetamin) zetamin = zeta0
(  348)           end do
(  349)        end do
(  350)     
(  351) 
(  352)         if(zetamax .eq. zetamin)then
(  353)           zetamax =  1.0e-06
(  354)           zetamin = -1.0e-06
(  355)        end if
(  356) 
(  357)        dzeta = (zetamax - zetamin) / (nzeta - 1)
(  358)        dzetai = 1.0 / dzeta
(  359)     
(  360)        ! ------------------------------------------------- !
(  361)        ! ---Pre-calculate Bessel functions on zeta mesh -- !
(  362)        ! ------------------------------------------------- !
(  363) 	  
(  364)        do i = 1, nzeta + 1
(  365)           zetai(i) = zetamin + (i - 1) * dzeta
(  366)           zeta = cmplx(zetai(i), 0.0)
(  367) 	  
(  368)           call besjc(zeta, nharm + 2, b, ier)
(  369) !          if(ier .ne. 0) write(6, *) "ier = ", ier
(  370) 	  
(  371)           do iharm = 0, NHARM + 1
(  372)              Jni(iharm,  i) = b(iharm + 1)
(  373)              Jni(-iharm, i) = (-1.0)**iharm * b(iharm + 1)
(  374)           end do
(  375)        end do
(  376)      
(  377) 
(  378)        ! --------------------------------- !
(  379)        ! ---Interpolate Bessel functions-- !
(  380)        ! --------------------------------- !
(  381) 
(  382)        do n = nkx1, nkx2






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 8

(  383)           do m = nky1, nky2
(  384) 
(  385)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  386)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  387)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  388) 	     xkperpn = sqrt(xkrhon**2 + xketan**2)
(  389) 	     
(  390) 	    ! ------------------------------------
(  391)             ! Optional: leave out upshift in xkprl
(  392)             ! --------------------------------- --          
(  393)              if (upshift .eq. 0)xkprln = uzz * xkphi
(  394) !             if (upshift .eq. 0)xkprln = nphi / rt
(  395) 	      
(  396) 	     if (upshift .eq. -1) then      
(  397)                 if (xkperpn  .gt. xk_cutoff) xkprln = uzz * xkphi
(  398)              end if
(  399) 	     
(  400) 	     
(  401) 	     sgn_kprl = sign(1.0, xkprln)
(  402)              akprl = abs(xkprln)		      
(  403) 		     
(  404) !            ----------------------------------------------
(  405) !            Optional: Don't allow xkprl to be 0 (upshift = -2)
(  406) !            ----------------------------------------------        
(  407)              if (upshift .eq. -2) then
(  408)                 if (akprl .lt. akprl_min) then
(  409) 		    xkprln = akprl_min * sgn_kprl
(  410) 		end if 
(  411)              end if		     
(  412) 	     	     
(  413) 
(  414)              y0 = 1.5
(  415)              y = y0
(  416) 	     
(  417)       
(  418)              l = 1
(  419) 	     if(xkprln .eq. 0)xkprln = 1.0e-06
(  420)              gammab = abs(l * omgc / (2.0 * alpha * xkprln**2)  &
(  421)      &                                    * gradprlb / bmod)
(  422) 
(  423)              if(xm .eq. xme)gammab = 0.0
(  424) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
(  425)              if(abs(gammab) .lt. .01)gammab = .01
(  426) 
(  427) 
(  428)              if(sgn_kprl .ge. 0.0)then
(  429)                 fgam = 1.0
(  430) 
(  431)                 if(gammab .gt. 1.0e-05)then
(  432)                    y = y0
(  433)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
(  434)      &               / (2. * gammab * y)
(  435)                 endif
(  436) 
(  437)                 xkprl_eff = xkprln / fgam 
(  438) 
(  439)              end if
(  440) 






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 9

(  441) 
(  442)              if(sgn_kprl .lt. 0.0)then
(  443)                 fgam = 1.0
(  444) 
(  445)                 if(gammab .gt. 1.0e-05)then
(  446)                    descrim = 1. - 4. * gammab * y0
(  447)                    if (descrim .ge. 0.0) y =   y0
(  448)                    if (descrim .lt. 0.0) y = - y0
(  449)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
(  450)      &                / (2. * gammab * y)
(  451)                 endif
(  452) 
(  453)                 xkprl_eff = xkprln / fgam 
(  454) 
(  455)              end if
(  456) 
(  457)              if (upshift .ne. 0) xkprln = xkprl_eff
(  458) 	     
(  459) 	
(  460)              NPARA_sav(n, m) = xkprln * C * WI
(  461) 
(  462)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
(  463)              xkperpni = 1.0 / xkperpn
(  464) 	
(  465)              cosbeta_n_m = xkrhon * xkperpni
(  466)              sinbeta_n_m  = xketan * xkperpni
(  467)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m )
(  468) 	  
(  469)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
(  470) 	  
(  471)              i = int((zeta0 - zetamin) * dzetai) + 1
(  472)              p = (zeta0 - zetai(i)) * dzetai
(  473)              A1 = 0.5 * P * (P - 1.)
(  474)              A2 = 1. - P * P
(  475)              A3 = 0.5 * P * (P + 1.)
(  476) 	  
(  477)              do iharm = -NHARM - 1, NHARM + 1
(  478) 	  
(  479)                 Jn(iharm, n, m) = Jni(iharm, i)    &
(  480)      &   	   + p * (Jni(iharm, i + 1) - Jni(iharm, i))
(  481)                 if(i .ne. 1 )then
(  482)                    Jn(iharm, n, m) = A1 * Jni(iharm, i - 1)     &
(  483)      &                             + A2 * Jni(iharm, i)         &
(  484)      &                             + A3 * Jni(iharm, i + 1)
(  485)                 end if
(  486) 	      
(  487)              end do
(  488) 	  
(  489)           end do
(  490)        end do
(  491)     
(  492) 
(  493)     end if
(  494)                     
(  495) 
(  496)     ! ------------------------ !
(  497)     ! ---Sum over harmonics--- !
(  498)     ! ------------------------ !






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 10

(  499)     
(  500)     sum_wdot = 0.0
(  501)     sum_fx0  = 0.0
(  502)     sum_fy0  = 0.0    
(  503)     
(  504)     b_sum = 0.0
(  505)     c_sum = 0.0
(  506)     e_sum = 0.0
(  507)     f_sum = 0.0
(  508)        
(  509)    do IHARM = -NHARM, NHARM   
(  510) 
(  511)        NWCW = real(IHARM) * WCW
(  512)        
(  513)        sumb_11 = 0.0
(  514)        sumb_31 = 0.0
(  515) 	  
(  516)        sumc_11 = 0.0
(  517)        sumc_31 = 0.0	
(  518) 	  
(  519)        sume_11 = 0.0
(  520)        sume_31 = 0.0
(  521) 	  
(  522)        sumf_11 = 0.0
(  523)        sumf_31 = 0.0	  
(  524) 	          
(  525)        sumwdot_11 = 0.0
(  526)        sumwdot_31 = 0.0 
(  527)        
(  528)        sum1_1 = 0.0
(  529)        sum1_2 = 0.0
(  530)        sum1_3 = 0.0
(  531)        sum1_4 = 0.0      
(  532)        
(  533)        sumwdotkx_11 = 0.0
(  534)        sumwdotkx_31 = 0.0
(  535)        
(  536)        sumwdotky_11 = 0.0
(  537)        sumwdotky_31 = 0.0       
(  538) 
(  539)        sum2_1 = 0.0
(  540)        sum2_2 = 0.0
(  541)        sum2_3 = 0.0
(  542)        
(  543)        sumkx2_1 = 0.0
(  544)        sumkx2_2 = 0.0
(  545)        sumkx2_3 = 0.0
(  546)        
(  547)        sumky2_1 = 0.0
(  548)        sumky2_2 = 0.0
(  549)        sumky2_3 = 0.0       
(  550)        
(  551)        call zpow((nkx2-nkx1+1)*(nky2-nky1+1), zbeta, iharm, zbeta_iharm) 
(  552)        
(  553)        ! ----------------------- !
(  554)        ! ---Find resonant modes--!
(  555)        ! ----------------------- !
(  556)        ires = 0






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 11

(  557)        do n = nkx1, nkx2
(  558)           do m = nky1, nky2     
(  559)              ! ------------------------ !
(  560)              ! -- Resonance relation -- !
(  561)              ! ------------------------ !
(  562)              RRP = 1.0 - NWCW - NPARA_sav(n, m) * UPARMAX * SQMUT0i
(  563)              RRM = 1.0 - NWCW - NPARA_sav(n, m) * UPARMIN * SQMUT0i
(  564) 
(  565)              is_resonance_nm(n,m) = (RRP * RRM .le. 0.0)
(  566)              if (is_resonance_nm(n,m)) then
(  567) 	         ires = ires + 1
(  568) 	         nres(ires) = n
(  569) 		 mres(ires) = m
(  570) 	     end if
(  571) 	  end do
(  572)        end do
(  573)        iresmax = ires
(  574)        
(  575)        
(  576) !       go to 1000
(  577)       ! ------------------------------- !
(  578)       ! ---Sum over all Fourier modes-- !
(  579)       ! --------------------------------!
(  580)        do n = nkx1, nkx2
(  581)           do m = nky1, nky2
(  582)              cexp0 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m)
(  583) 	     cexp1 = cexp0 * zbeta(n,m)
(  584) 	     cexp2 = cexp0 / zbeta(n,m)
(  585) 		
(  586)              epsx = isq2 * (ealphak(n, m) - zi * ebetak(n, m)) * cexp1
(  587)              epsy = isq2 * (ealphak(n, m) + zi * ebetak(n, m)) * cexp2
(  588)              epsz = ebk(n, m) * cexp0
(  589) 	     
(  590)              sum2_1 = sum2_1 + conjg(epsx) * Jn(IHARM + 1, n, m)
(  591)              sum2_2 = sum2_2 + conjg(epsy) * Jn(IHARM - 1, n, m)
(  592)              sum2_3 = sum2_3 + conjg(epsz) * Jn(IHARM, n, m)	     
(  593)           end do  !  end sum over ky
(  594)        end do    !   end sum over kx
(  595) !  1000 continue
(  596) 
(  597)       ! ---------------------------- !
(  598)       ! ---Sum over resonant modes-- !
(  599)       ! ---------------------------- !
(  600) 
(  601)        do ires = 1, iresmax
(  602)           n = nres(ires)
(  603) 	  m = mres(ires)
(  604) 	                                                 
(  605) !          cexp1 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) * zbeta(n,m)
(  606) !          cexp2 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) / zbeta(n,m)
(  607)           cexp0 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m)
(  608) 	  cexp1 = cexp0 * zbeta(n,m)
(  609) 	  cexp2 = cexp0 / zbeta(n,m)
(  610) 		
(  611)           epsx = isq2 * (ealphak(n, m) - zi * ebetak(n, m)) * cexp1
(  612)           epsy = isq2 * (ealphak(n, m) + zi * ebetak(n, m)) * cexp2
(  613)           epsz = ebk(n, m) * cexp0
(  614) 	     






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 12

(  615) !          sum2_1 = sum2_1 + conjg(epsx) * Jn(IHARM + 1, n, m)
(  616) !          sum2_2 = sum2_2 + conjg(epsy) * Jn(IHARM - 1, n, m)
(  617) !          sum2_3 = sum2_3 + conjg(epsz) * Jn(IHARM, n, m)
(  618) 	     
(  619) 	  sumkx2_1 = sumkx2_1 + xkxsav(n) * conjg(epsx) * Jn(IHARM + 1, n, m)
(  620)           sumkx2_2 = sumkx2_2 + xkxsav(n) * conjg(epsy) * Jn(IHARM - 1, n, m)
(  621)           sumkx2_3 = sumkx2_3 + xkxsav(n) * conjg(epsz) * Jn(IHARM, n, m)
(  622) 	     
(  623) 	  sumky2_1 = sumky2_1 + xkysav(m) * conjg(epsx) * Jn(IHARM + 1, n, m)
(  624)           sumky2_2 = sumky2_2 + xkysav(m) * conjg(epsy) * Jn(IHARM - 1, n, m)
(  625)           sumky2_3 = sumky2_3 + xkysav(m) * conjg(epsz) * Jn(IHARM, n, m)	     	     	    
(  626) 
(  627)           UPAR0 = SQMUT0 / NPARA_sav(n, m) * (1. - NWCW)
(  628) 	
(  629) 	  u = sqrt(upar0**2 + uperpk2) + 1.0e-08
(  630)           sinth = uperpk / u + 1.0e-08
(  631) 	  sinth_inv = 1.0 / sinth
(  632) 		
(  633) 	  facte = (nwcw - sinth**2) /  upar0
(  634) 	
(  635)           i = int((UPAR0 - UPAR(1)) * dui) + 1
(  636) 	  i_uprl = i
(  637)           p = (UPAR0 - UPAR(i)) * dui
(  638) 		
(  639) 	  dfduper0 = dfduper(k_uper, NUPAR)
(  640)           if (i .ne. NUPAR) then
(  641)              dfduper0 = dfduper(k_uper, i) + (dfduper(k_uper, i+1) - dfduper(k_uper, i)) * p
(  642)           end if
(  643) 		
(  644)           U0 = DFDUPER0
(  645) 			
(  646)           factor = PISQMUT0 / abs(NPARA_sav(n, m)) 
(  647) 	  
(  648) 	  ttmp = UPER(k_uper) **2 * (Jn(IHARM + 1, n, m) * epsx     &
(  649)      &                            +  Jn(IHARM - 1, n, m) * epsy )
(  650) 	  cross2 = SQ2 * UPER(k_uper) * UPAR0 * Jn(IHARM, n, m) * epsz
(  651) 	  
(  652) 	  cross3 = SQ2 * UPER(k_uper) * UPAR0 * (Jn(IHARM + 1, n, m) * epsx     &
(  653)      &                                         + Jn(IHARM - 1, n, m) * epsy)
(  654)       
(  655) 	  ld = 2.0 * UPAR0**2 * Jn(IHARM, n, m) * epsz
(  656) 	  
(  657) 	  sumb_11_nm = ttmp + cross2
(  658)           sumb_31_nm = cross3 + ld	  
(  659) 			
(  660) !         sumb_11_nm = UPER(k_uper) * UPER(k_uper)  * Jn(IHARM + 1, n, m) * epsx     &
(  661) !    &               + UPER(k_uper) * UPER(k_uper)  * Jn(IHARM - 1, n, m) * epsy     &
(  662) !    &               + SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM, n, m)     * epsz
(  663) 
(  664) !          sumb_31_nm = SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM + 1, n, m) * epsx     &
(  665) !     &               + SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM - 1, n, m) * epsy     &
(  666) !     &               + 2.0 * UPAR0 * UPAR0 * Jn(IHARM, n, m)     * epsz
(  667)      
(  668)           sumb_11_nm = sumb_11_nm * factor 
(  669)           sumb_31_nm = sumb_31_nm * factor 
(  670) 				
(  671)           sume_11_nm = sumb_11_nm * facte
(  672)           sume_31_nm = sumb_31_nm * facte






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 13

(  673)           
(  674)           sumc_11_nm = sume_11_nm * sinth_inv
(  675)           sumc_31_nm = sume_31_nm * sinth_inv     
(  676)      
(  677)           sumf_11_nm = sumc_11_nm * facte
(  678)           sumf_31_nm = sumc_31_nm * facte
(  679)           		
(  680) !          sumwdot_11_nm = sumb_11_nm * u0
(  681) !          sumwdot_31_nm = sumb_31_nm * u0	
(  682) 											     
(  683)           sumf_11(i_uprl) = sumf_11(i_uprl) + sumf_11_nm
(  684)           sumf_31(i_uprl) = sumf_31(i_uprl) + sumf_31_nm
(  685) 
(  686)           sume_11(i_uprl) = sume_11(i_uprl) + sume_11_nm
(  687)           sume_31(i_uprl) = sume_31(i_uprl) + sume_31_nm
(  688) 
(  689)           sumc_11(i_uprl) = sumc_11(i_uprl) + sumc_11_nm
(  690)           sumc_31(i_uprl) = sumc_31(i_uprl) + sumc_31_nm
(  691) 
(  692)           sumb_11(i_uprl) = sumb_11(i_uprl) + sumb_11_nm
(  693)           sumb_31(i_uprl) = sumb_31(i_uprl) + sumb_31_nm
(  694) 		
(  695) 
(  696) 		
(  697) 	  sumwdotkx_11 = sumwdotkx_11 + xkxsav(n) * sumwdot_11_nm
(  698) 	  sumwdotkx_31 = sumwdotkx_31 + xkxsav(n) * sumwdot_31_nm	
(  699) 		
(  700) 	  sumwdotky_11 = sumwdotky_11 + xkysav(m) * sumwdot_11_nm
(  701) 	  sumwdotky_31 = sumwdotky_31 + xkysav(m) * sumwdot_31_nm
(  702) 	  
(  703) 	  sumwdot_11 = sumwdot_11 + (ttmp + cross2) * factor * u0
(  704) 	  sumwdot_31 = sumwdot_31 + (cross3 + ld  ) * factor * u0	  
(  705) 	  
(  706) 	  sum1_1 = sum1_1 + ttmp   * factor * u0   
(  707)      
(  708) 	  sum1_2 = sum1_2 + cross2 * factor * u0
(  709)      
(  710) 	  sum1_3 = sum1_3 + cross3 * factor * u0         
(  711)                
(  712)           sum1_4 = sum1_4 + ld     * factor * u0							
(  713) 		
(  714)       enddo  !  End sum over resonant modes
(  715)               
(  716)       ttmp_11 = 0.0 
(  717)       cross_13 = 0.0
(  718)       cross_31 = 0.0
(  719)       landau_33 = 0.0              
(  720)                         
(  721)       ttmp_11 = (sum2_1 + sum2_2) * sum1_1 
(  722)       cross_13 = (sum2_1 + sum2_2) * sum1_2 
(  723)       cross_31 = sum2_3 * sum1_3
(  724)       landau_33 = sum2_3 * sum1_4
(  725)       
(  726)       sum_wdot = sum_wdot + ttmp_11 + cross_13 + cross_31 + landau_33       
(  727)               
(  728)  
(  729)      
(  730)      






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 14

(  731)        sum_fx0 = sum_fx0  + sumkx2_1 * sumwdot_11    &
(  732)      &                    + sumkx2_2 * sumwdot_11    &
(  733)      &  		  + sumkx2_3 * sumwdot_31    &
(  734)      &                    + sum2_1 * sumwdotkx_11    &
(  735)      &                    + sum2_2 * sumwdotkx_11    &
(  736)      &  		  + sum2_3 * sumwdotkx_31
(  737)      
(  738)        sum_fy0 = sum_fy0  + sumky2_1 * sumwdot_11    &
(  739)      &                    + sumky2_2 * sumwdot_11    &
(  740)      &  	          + sumky2_3 * sumwdot_31    &
(  741)      &                    + sum2_1 * sumwdotky_11    &
(  742)      &                    + sum2_2 * sumwdotky_11    &
(  743)      &  	          + sum2_3 * sumwdotky_31    
(  744)       
(  745)        
(  746) 
(  747)        do i_uprl = 1, nupar
(  748)           b_sum(i_uprl) = b_sum(i_uprl) + sum2_1 * sumb_11(i_uprl)   &
(  749)      &                                  + sum2_2 * sumb_11(i_uprl)   &
(  750)      &                                  + sum2_3 * sumb_31(i_uprl)
(  751)           c_sum(i_uprl) = c_sum(i_uprl) + sum2_1 * sumc_11(i_uprl)   &
(  752)      &                                  + sum2_2 * sumc_11(i_uprl)   &
(  753)      &                                  + sum2_3 * sumc_31(i_uprl)
(  754)           e_sum(i_uprl) = e_sum(i_uprl) + sum2_1 * sume_11(i_uprl)   &
(  755)      &                                  + sum2_2 * sume_11(i_uprl)   &
(  756)      &                                  + sum2_3 * sume_31(i_uprl)
(  757)           f_sum(i_uprl) = f_sum(i_uprl) + sum2_1 * sumf_11(i_uprl)   &
(  758)      &                                  + sum2_2 * sumf_11(i_uprl)   &
(  759)      &                                  + sum2_3 * sumf_31(i_uprl)     
(  760)        end do
(  761)        
(  762)        
(  763) 
(  764)     end do  ! end sum over harmonics
(  765)     
(  766) 
(  767) 
(  768)     deallocate( zbeta )
(  769)     deallocate( zbeta_iharm )
(  770)     
(  771)     deallocate(nres )
(  772)     deallocate(mres )
(  773) 
(  774)     deallocate(zetai)
(  775)     deallocate(Jni)
(  776)     deallocate(Jn)    
(  777)     deallocate(NPARA_sav)
(  778)     
(  779)     
(  780)     deallocate(sumb_11)
(  781)     deallocate(sumb_31)
(  782)     
(  783)     deallocate(sumc_11)
(  784)     deallocate(sumc_31) 
(  785)     
(  786)     deallocate(sume_11)
(  787)     deallocate(sume_31)
(  788)     






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 15

(  789)     deallocate(sumf_11)
(  790)     deallocate(sumf_31)      
(  791)     
(  792)     deallocate( is_resonance_nm )
(  793)     
(  794)     return
(  795) 
(  796)   end subroutine QLSUM_MAXWELLIAN
(  797) 
(  798) !
(  799) !*************************************************************************
(  800) !
(  801) 
(  802)     subroutine QLSUM_NON_MAXWELLIAN(k_uper, b_sum, c_sum, e_sum, f_sum, &
(  803)        & sum_wdot, sum_fx0, sum_fy0, W, ZSPEC, ASPEC, BMAG, &
(  804)        & lmax, ENORM, UPARMIN, UPARMAX, &
(  805)        & NUPAR, NUPER, UPER, UPAR, DFDUPER, DFDUPAR,  &
(  806)        & ealphak, ebetak, ebk, nkdim1, nkdim2, mkdim1, mkdim2,   &
(  807)        & nkx1, nkx2, nky1, nky2, &
(  808)        & uxx, uxy, uxz, &
(  809)        & uyx, uyy, uyz, &
(  810)        & uzx, uzy, uzz, &
(  811)        & nxdim, nydim, xkxsav, xkysav, xkphi, xx, yy, i_global, j_global, &
(  812)        & lmaxdim, ndist, nzeta, &
(  813)        & gradprlb, bmod, omgc, alpha, xm, upshift, xk_cutoff, rt, nphi, rho)
(  814) 
(  815)     implicit none
(  816) 
(  817)     integer i_global, j_global, ier, nxdim, nydim, k, lmaxdim, ndist
(  818)     integer, intent(IN):: NUPAR, NUPER, lmax
(  819)     integer nkx1, nkx2, nky1, nky2, j_upar, k_uper, l
(  820)     integer nkdim1, nkdim2, mkdim1, mkdim2
(  821)     integer:: NHARM, IHARM, M, N, i, nzeta
(  822)     integer i_uprl, upshift
(  823)     integer ires, iresmax, nphi
(  824) 
(  825)     complex, dimension(:,:), allocatable :: zbeta
(  826)     complex, dimension(:,:), allocatable :: zbeta_iharm
(  827)     
(  828)     real  y, y0, alpha, xm, akprl, sgn_kprl, omgc, bmod, xkprl_eff,  &
(  829)    &   descrim, xme, fgam, gradprlb, gammab, xk_cutoff, rt, akprl_min, rho
(  830) 
(  831)     real  uxx, uxy, uxz, uyx, uyy, uyz, uzx, uzy, uzz
(  832)     real  xkphi, sinth, factc, facte, factf, sinth_inv
(  833)     real  xkxsav(nkdim1 : nkdim2), xkysav(mkdim1 : mkdim2)
(  834)     real  xkperpn, xkperpni, xkrhon, xketan, xkprln, beta
(  835)     real, intent(IN):: W, ZSPEC, ASPEC, BMAG
(  836)     real, intent(IN):: ENORM, UPARMIN, UPARMAX
(  837)     real, dimension(NUPER), intent(IN):: UPER
(  838)     real, dimension(NUPAR), intent(IN):: UPAR
(  839)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER, DFDUPAR
(  840)     real:: W2, WCW, RRP, RRM, WC, WCI
(  841)     real:: MUT0, SQMUT0, PISQMUT0, SQMUT0I, KPARA1
(  842)     real:: ISQ2, SQ2, NWCW, DFACTPAR, DFACTPER, U0
(  843)     real:: UPAR0, dfdupar0, dfduper0, du, dui, p 
(  844)     real:: time, t1, tmsec, second1, dummy, WI, uperpk, uperpk2
(  845)     real:: dzeta, dzetai, zetamax, zetamin, zeta0, zetamax1, zetamax2
(  846)     real:: A1, A2, A3, u






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 16

(  847)     real:: temp1, temp2, temp3, factor
(  848)     real:: temp1w, temp2w, temp3w
(  849)     
(  850)     real, dimension(:),     allocatable :: zetai
(  851)     real, dimension(:,:),   allocatable :: Jni
(  852)     real, dimension(:,:,:), allocatable :: Jn
(  853)     real, dimension(:,:),   allocatable :: NPARA_sav
(  854)     
(  855)     integer, dimension(:),  allocatable :: nres
(  856)     integer, dimension(:),  allocatable :: mres
(  857)         
(  858)     complex, dimension(:),  allocatable :: sumb_11
(  859)     complex, dimension(:),  allocatable :: sumb_31
(  860)      
(  861)     complex, dimension(:),  allocatable :: sumc_11
(  862)     complex, dimension(:),  allocatable :: sumc_31
(  863)     
(  864)     complex, dimension(:),  allocatable :: sume_11
(  865)     complex, dimension(:),  allocatable :: sume_31
(  866)      
(  867)     complex, dimension(:),  allocatable :: sumf_11
(  868)     complex, dimension(:),  allocatable :: sumf_31
(  869)     
(  870)     complex sumf_11_nm
(  871)     complex sumf_31_nm
(  872) 
(  873)     complex sume_11_nm
(  874)     complex sume_31_nm
(  875)        
(  876)     complex sumc_11_nm
(  877)     complex sumc_31_nm
(  878)        
(  879)     complex sumb_11_nm
(  880)     complex sumb_31_nm
(  881)  
(  882)     logical, dimension(:,:), allocatable :: is_resonance_nm      
(  883) 
(  884)     complex epsx, epsy, epsz
(  885)     complex ealphak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(  886)     &        ebetak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(  887)     &           ebk(nkdim1 : nkdim2, mkdim1 : mkdim2)
(  888)     complex cexpkx, cexpky, zi, zeta
(  889) 
(  890)     complex xx(nkdim1 : nkdim2, 1 : nxdim),   &
(  891)      &      yy(mkdim1 : mkdim2, 1 : nydim)
(  892) 
(  893)     complex cexpn, cexpnp1, cexpnm1, cexp11
(  894) 
(  895)     complex cexp1, cexp2, cexp0
(  896)     complex sumwdot_11_nm, sumwdot_31_nm
(  897)     
(  898)     complex sumwdot_11, sumwdot_31
(  899)     complex sumwdotkx_11, sumwdotkx_31
(  900)     complex sumwdotky_11, sumwdotky_31
(  901) 	
(  902)     complex sum2_1, sum2_2, sum2_3
(  903)     complex sumkx2_1, sumkx2_2, sumkx2_3 
(  904)     complex sumky2_1, sumky2_2, sumky2_3        






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 17

(  905)     
(  906)     complex b_sum(nupar), c_sum(nupar), e_sum(nupar), f_sum(nupar)
(  907)     complex sum_wdot, sum_fx0, sum_fy0
(  908)     complex b(100)
(  909) 
(  910)     real, parameter:: EOVERAMU=9.64853e7
(  911)     real, parameter:: EOVERMH = 9.58084e+07
(  912)     
(  913)     real, parameter:: MPC2 = 938271998.38
(  914)     real, parameter:: C = 2.99792458e8
(  915)     real, parameter:: PI = 3.141592653597932384
(  916)     real :: cosbeta_n_m, sinbeta_n_m
(  917)     common/upcom/akprl_min    
(  918)     
(  919)     allocate( zbeta(nkx1:nkx2,nky1:nky2) )
(  920)     allocate( zbeta_iharm(nkx1:nkx2,nky1:nky2) )
(  921) 
(  922)     allocate(zetai(nzeta + 1) )
(  923)     allocate(Jni(-lmaxdim : lmaxdim, nzeta + 1) )
(  924)     allocate( Jn(-lmaxdim : lmaxdim, nkdim1 : nkdim2, mkdim1 : mkdim2))    
(  925)     allocate(NPARA_sav(nkdim1 : nkdim2, mkdim1 : mkdim2) ) 
(  926)     
(  927)     allocate(nres(nxdim * nydim) )
(  928)     allocate(mres(nxdim * nydim) )
(  929)     
(  930)     allocate(sumb_11(nupar))
(  931)     allocate(sumb_31(nupar))
(  932)      
(  933)     allocate(sumc_11(nupar))
(  934)     allocate(sumc_31(nupar))
(  935)     
(  936)     allocate(sume_11(nupar))
(  937)     allocate(sume_31(nupar))
(  938)      
(  939)     allocate(sumf_11(nupar))
(  940)     allocate(sumf_31(nupar))
(  941) 
(  942)     allocate(is_resonance_nm(nkx1:nkx2,nky1:nky2))
(  943) 
(  944) !   -------------------------------------
(  945) !   initialize allocatable arrays to zero
(  946) !   -------------------------------------
(  947) 
(  948)     zbeta = 0.0
(  949)     zbeta_iharm = 0.0
(  950) 
(  951)     sumf_11_nm = 0.0
(  952)     sumf_31_nm = 0.0
(  953) 
(  954)     sume_11_nm = 0.0
(  955)     sume_31_nm = 0.0
(  956)     
(  957)     sumc_11_nm = 0.0
(  958)     sumc_31_nm = 0.0
(  959)     
(  960)     sumb_11_nm = 0.0
(  961)     sumb_31_nm = 0.0
(  962) 






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 18

(  963)     is_resonance_nm = .false.
(  964) 
(  965)     zetai = 0.0
(  966)     Jni = 0.0
(  967)     NPARA_sav = 0.0
(  968) 
(  969)     sumb_11 = 0.0
(  970)     sumb_31 = 0.0
(  971)       
(  972)     sumc_11 = 0.0
(  973)     sumc_31 = 0.0
(  974) 
(  975)     sume_11 = 0.0
(  976)     sume_31 = 0.0
(  977) 
(  978)     sumf_11 = 0.0
(  979)     sumf_31 = 0.0    
(  980)     
(  981)     xme = 9.11e-31
(  982)     zi = cmplx(0., 1.)
(  983)     
(  984)     uperpk = uper(k_uper)
(  985)     uperpk2 = uperpk**2
(  986) 
(  987)     W2 = W * W
(  988)     WI = 1.0 / W
(  989) 
(  990)     WCW = BMAG * ZSPEC * EOVERMH / ASPEC / W
(  991)     WC = WCW * W
(  992)     WCI = 1.0 /WC
(  993) 
(  994)     MUT0 = 0.5 * MPC2 * ASPEC / ENORM
(  995)     SQMUT0 = SQRT(MUT0)
(  996)     SQMUT0I = 1.0 / SQMUT0
(  997)     PISQMUT0 = SQMUT0 * pi
(  998) 
(  999)     ISQ2 = SQRT(0.5)
( 1000)     SQ2 = SQRT(2.0)
( 1001)     NHARM = lmax
( 1002)     
( 1003)     du = (upar(nupar) - upar(1)) / (nupar - 1)
( 1004)     dui = 1.0 / du
( 1005)     
( 1006)     if(nzeta .eq. 1)then
( 1007)     
( 1008)     ! -------------------------------------------------------- !
( 1009)     ! ---Don't interpolate: precalculate all Bessel functions- !
( 1010)     ! -------------------------------------------------------- !
( 1011) 
( 1012)        do n = nkx1, nkx2
( 1013)           do m = nky1, nky2
( 1014) 
( 1015)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
( 1016)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
( 1017)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
( 1018) 	     xkperpn = sqrt(xkrhon**2 + xketan**2)
( 1019) 	     
( 1020)             ! ------------------------------------






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 19

( 1021)             ! Optional: leave out upshift in xkprl
( 1022)             ! --------------------------------- --          
( 1023)              if (upshift .eq. 0)xkprln = uzz * xkphi
( 1024) !	     if (upshift .eq. 0)xkprln = nphi / rt
( 1025) 	      
( 1026) 	     if (upshift .eq. -1) then      
( 1027)                 if (xkperpn  .gt. xk_cutoff) xkprln = uzz * xkphi
( 1028)              end if
( 1029) 	     
( 1030) 	     	     
( 1031) 	     
( 1032) 	     sgn_kprl = sign(1.0, xkprln)
( 1033)              akprl = abs(xkprln)		      
( 1034) 		     
( 1035) !            ----------------------------------------------
( 1036) !            Optional: Don't allow xkprl to be 0 (upshift = -2)
( 1037) !            ----------------------------------------------        
( 1038)              if (upshift .eq. -2) then
( 1039)                 if (akprl .lt. akprl_min) then
( 1040) 		    xkprln = akprl_min * sgn_kprl
( 1041) 		end if 
( 1042)              end if		     
( 1043) 	     	     
( 1044) 
( 1045)              y0 = 1.5
( 1046)              y = y0
( 1047) 	     
( 1048)       
( 1049)              l = 1
( 1050) 	     if(xkprln .eq. 0)xkprln = 1.0e-06
( 1051)              gammab = abs(l * omgc / (2.0 * alpha * xkprln**2)  &
( 1052)      &                                    * gradprlb / bmod)
( 1053) 
( 1054)              if(xm .eq. xme)gammab = 0.0
( 1055) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
( 1056)              if(abs(gammab) .lt. .01)gammab = .01
( 1057) 
( 1058) 
( 1059)              if(sgn_kprl .ge. 0.0)then
( 1060)                 fgam = 1.0
( 1061) 
( 1062)                 if(gammab .gt. 1.0e-05)then
( 1063)                    y = y0
( 1064)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
( 1065)      &               / (2. * gammab * y)
( 1066)                 endif
( 1067) 
( 1068)                 xkprl_eff = xkprln / fgam 
( 1069) 
( 1070)              end if
( 1071) 
( 1072) 
( 1073)              if(sgn_kprl .lt. 0.0)then
( 1074)                 fgam = 1.0
( 1075) 
( 1076)                 if(gammab .gt. 1.0e-05)then
( 1077)                    descrim = 1. - 4. * gammab * y0
( 1078)                    if (descrim .ge. 0.0) y =   y0






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 20

( 1079)                    if (descrim .lt. 0.0) y = - y0
( 1080)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
( 1081)      &                / (2. * gammab * y)
( 1082)                 endif
( 1083) 
( 1084)                 xkprl_eff = xkprln / fgam 
( 1085) 
( 1086)              end if
( 1087) 
( 1088)              if (upshift .ne. 0) xkprln = xkprl_eff	     
( 1089) 	
( 1090)              NPARA_sav(n, m) = xkprln * C / W
( 1091) 
( 1092)              xkperpn = sqrt(xkrhon**2 + xketan**2)
( 1093)              if(xkperpn .eq. 0.0)xkperpn = 1.0e-08
( 1094) 	
( 1095)              cosbeta_n_m  = xkrhon / xkperpn
( 1096)              sinbeta_n_m  = xketan / xkperpn
( 1097)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m  )
( 1098) 
( 1099)              zeta = xkperpn * uper(k_uper) * c * sqmut0i / wc
( 1100) 
( 1101)              call besjc(zeta, nharm + 2, b, ier)
( 1102)              if(ier .ne. 0) write(6, *) "ier = ", ier
( 1103) 
( 1104)              do IHARM = 0, NHARM + 1
( 1105)                 Jn(iharm,  n, m) = b(iharm + 1)
( 1106)                 Jn(-iharm, n, m) = (-1.0)**iharm * Jn(iharm, n, m)
( 1107)              end do
( 1108) 
( 1109)           end do
( 1110)        end do
( 1111)     
( 1112)     else
( 1113)     
( 1114)         
( 1115)        ! -------------------------------------- !
( 1116)        ! ---Interpolate; calculate zeta mesh -- !
( 1117)        ! -------------------------------------- !
( 1118)     
( 1119)        zetamax = 0.0
( 1120)        zetamin = 0.0
( 1121)     
( 1122)        do n = nkx1, nkx2
( 1123)           do m = nky1, nky2
( 1124) 
( 1125)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
( 1126)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
( 1127)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
( 1128) 
( 1129)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
( 1130) 	
( 1131)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
( 1132) 	  
( 1133)              if (zeta0 .gt. zetamax) zetamax = zeta0
( 1134)              if (zeta0 .lt. zetamin) zetamin = zeta0
( 1135)           end do
( 1136)        end do






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 21

( 1137)     
( 1138) 
( 1139)         if(zetamax .eq. zetamin)then
( 1140)           zetamax =  1.0e-06
( 1141)           zetamin = -1.0e-06
( 1142)        end if
( 1143) 
( 1144)        dzeta = (zetamax - zetamin) / (nzeta - 1)
( 1145)        dzetai = 1.0 / dzeta
( 1146)     
( 1147)        ! ------------------------------------------------- !
( 1148)        ! ---Pre-calculate Bessel functions on zeta mesh -- !
( 1149)        ! ------------------------------------------------- !
( 1150) 	  
( 1151)        do i = 1, nzeta + 1
( 1152)           zetai(i) = zetamin + (i - 1) * dzeta
( 1153)           zeta = cmplx(zetai(i), 0.0)
( 1154) 	  
( 1155)           call besjc(zeta, nharm + 2, b, ier)
( 1156) !          if(ier .ne. 0) write(6, *) "ier = ", ier
( 1157) 	  
( 1158)           do iharm = 0, NHARM + 1
( 1159)              Jni(iharm,  i) = b(iharm + 1)
( 1160)              Jni(-iharm, i) = (-1.0)**iharm * b(iharm + 1)
( 1161)           end do
( 1162)        end do
( 1163)      
( 1164) 
( 1165)        ! --------------------------------- !
( 1166)        ! ---Interpolate Bessel functions-- !
( 1167)        ! --------------------------------- !
( 1168) 
( 1169)        do n = nkx1, nkx2
( 1170)           do m = nky1, nky2
( 1171) 
( 1172)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
( 1173)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
( 1174)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
( 1175) 	     xkperpn = sqrt(xkrhon**2 + xketan**2)
( 1176) 	     
( 1177) 	    ! ------------------------------------
( 1178)             ! Optional: leave out upshift in xkprl
( 1179)             ! --------------------------------- --          
( 1180)              if (upshift .eq. 0)xkprln = uzz * xkphi
( 1181) !	     if (upshift .eq. 0)xkprln = nphi / rt
( 1182) 	     
( 1183) 	     if (upshift .eq. -1) then      
( 1184)                 if (xkperpn  .gt. xk_cutoff) xkprln = uzz * xkphi
( 1185)              end if
( 1186) 	     
( 1187) 	     
( 1188) 	     
( 1189) 	     sgn_kprl = sign(1.0, xkprln)
( 1190)              akprl = abs(xkprln)
( 1191) 		      
( 1192) 		     
( 1193) !            ----------------------------------------------
( 1194) !            Optional: Don't allow xkprl to be 0 (upshift = -2)






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 22

( 1195) !            ----------------------------------------------        
( 1196)              if (upshift .eq. -2) then
( 1197)                 if (akprl .lt. akprl_min) then
( 1198) 		    xkprln = akprl_min * sgn_kprl
( 1199) 		end if 
( 1200)              end if		     
( 1201) 	     	     
( 1202) 
( 1203)              y0 = 1.5
( 1204)              y = y0
( 1205) 	     
( 1206)       
( 1207)              l = 1
( 1208) 	     if(xkprln .eq. 0)xkprln = 1.0e-06
( 1209)              gammab = abs(l * omgc / (2.0 * alpha * xkprln**2)  &
( 1210)      &                                    * gradprlb / bmod)
( 1211) 
( 1212)              if(xm .eq. xme)gammab = 0.0
( 1213) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
( 1214)              if(abs(gammab) .lt. .01)gammab = .01
( 1215) 
( 1216) 
( 1217)              if(sgn_kprl .ge. 0.0)then
( 1218)                 fgam = 1.0
( 1219) 
( 1220)                 if(gammab .gt. 1.0e-05)then
( 1221)                    y = y0
( 1222)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
( 1223)      &               / (2. * gammab * y)
( 1224)                 endif
( 1225) 
( 1226)                 xkprl_eff = xkprln / fgam 
( 1227) 
( 1228)              end if
( 1229) 
( 1230) 
( 1231)              if(sgn_kprl .lt. 0.0)then
( 1232)                 fgam = 1.0
( 1233) 
( 1234)                 if(gammab .gt. 1.0e-05)then
( 1235)                    descrim = 1. - 4. * gammab * y0
( 1236)                    if (descrim .ge. 0.0) y =   y0
( 1237)                    if (descrim .lt. 0.0) y = - y0
( 1238)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
( 1239)      &                / (2. * gammab * y)
( 1240)                 endif
( 1241) 
( 1242)                 xkprl_eff = xkprln / fgam 
( 1243) 
( 1244)              end if
( 1245) 
( 1246)              if (upshift .ne. 0) xkprln = xkprl_eff
( 1247) 	     
( 1248) 	
( 1249)              NPARA_sav(n, m) = xkprln * C * WI
( 1250) 
( 1251)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
( 1252)              xkperpni = 1.0 / xkperpn






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 23

( 1253) 	
( 1254)              cosbeta_n_m = xkrhon * xkperpni
( 1255)              sinbeta_n_m  = xketan * xkperpni
( 1256)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m )
( 1257) 	  
( 1258)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
( 1259) 	  
( 1260)              i = int((zeta0 - zetamin) * dzetai) + 1
( 1261)              p = (zeta0 - zetai(i)) * dzetai
( 1262)              A1 = 0.5 * P * (P - 1.)
( 1263)              A2 = 1. - P * P
( 1264)              A3 = 0.5 * P * (P + 1.)
( 1265) 	  
( 1266)              do iharm = -NHARM - 1, NHARM + 1
( 1267) 	  
( 1268)                 Jn(iharm, n, m) = Jni(iharm, i)    &
( 1269)      &   	   + p * (Jni(iharm, i + 1) - Jni(iharm, i))
( 1270)                 if(i .ne. 1 )then
( 1271)                    Jn(iharm, n, m) = A1 * Jni(iharm, i - 1)     &
( 1272)      &                             + A2 * Jni(iharm, i)         &
( 1273)      &                             + A3 * Jni(iharm, i + 1)
( 1274)                 end if
( 1275) 	      
( 1276)              end do
( 1277) 	  
( 1278)           end do
( 1279)        end do
( 1280)     
( 1281) 
( 1282)     end if
( 1283)                     
( 1284) 
( 1285)     ! ------------------------ !
( 1286)     ! ---Sum over harmonics--- !
( 1287)     ! ------------------------ !
( 1288)     
( 1289)     sum_wdot = 0.0
( 1290)     sum_fx0  = 0.0
( 1291)     sum_fy0  = 0.0    
( 1292)     
( 1293)     b_sum = 0.0
( 1294)     c_sum = 0.0
( 1295)     e_sum = 0.0
( 1296)     f_sum = 0.0
( 1297)        
( 1298)     do IHARM = -NHARM, NHARM
( 1299) 
( 1300)        NWCW = real(IHARM) * WCW
( 1301)        
( 1302)        sumb_11 = 0.0
( 1303)        sumb_31 = 0.0
( 1304) 	  
( 1305)        sumc_11 = 0.0
( 1306)        sumc_31 = 0.0	
( 1307) 	  
( 1308)        sume_11 = 0.0
( 1309)        sume_31 = 0.0
( 1310) 	  






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 24

( 1311)        sumf_11 = 0.0
( 1312)        sumf_31 = 0.0	  
( 1313) 	          
( 1314)        sumwdot_11 = 0.0
( 1315)        sumwdot_31 = 0.0       
( 1316)        
( 1317)        sumwdotkx_11 = 0.0
( 1318)        sumwdotkx_31 = 0.0
( 1319)        
( 1320)        sumwdotky_11 = 0.0
( 1321)        sumwdotky_31 = 0.0       
( 1322) 
( 1323)        sum2_1 = 0.0
( 1324)        sum2_2 = 0.0
( 1325)        sum2_3 = 0.0
( 1326)        
( 1327)        sumkx2_1 = 0.0
( 1328)        sumkx2_2 = 0.0
( 1329)        sumkx2_3 = 0.0
( 1330)        
( 1331)        sumky2_1 = 0.0
( 1332)        sumky2_2 = 0.0
( 1333)        sumky2_3 = 0.0       
( 1334)        
( 1335)        call zpow((nkx2-nkx1+1)*(nky2-nky1+1), zbeta, iharm, zbeta_iharm) 
( 1336)        
( 1337)        ! ----------------------- !
( 1338)        ! ---Find resonant modes--!
( 1339)        ! ----------------------- !
( 1340)        ires = 0
( 1341)        do n = nkx1, nkx2
( 1342)           do m = nky1, nky2     
( 1343)              ! ------------------------ !
( 1344)              ! -- Resonance relation -- !
( 1345)              ! ------------------------ !
( 1346)              RRP = 1.0 - NWCW - NPARA_sav(n, m) * UPARMAX * SQMUT0i
( 1347)              RRM = 1.0 - NWCW - NPARA_sav(n, m) * UPARMIN * SQMUT0i
( 1348) 
( 1349)              is_resonance_nm(n,m) = (RRP * RRM .le. 0.0)
( 1350)              if (is_resonance_nm(n,m)) then
( 1351) 	         ires = ires + 1
( 1352) 	         nres(ires) = n
( 1353) 		 mres(ires) = m
( 1354) 	     end if
( 1355) 	  end do
( 1356)        end do
( 1357)        iresmax = ires 
( 1358)        
( 1359) !        go to 1000
( 1360)       ! ------------------------------- !
( 1361)       ! ---Sum over all Fourier modes-- !
( 1362)       ! --------------------------------!
( 1363)        do n = nkx1, nkx2
( 1364)           do m = nky1, nky2
( 1365) !            cexp1 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) * zbeta(n,m)
( 1366) !            cexp2 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) / zbeta(n,m)
( 1367)              cexp0 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m)
( 1368) 	     cexp1 = cexp0 * zbeta(n,m)






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 25

( 1369) 	     cexp2 = cexp0 / zbeta(n,m)
( 1370) 		
( 1371)              epsx = isq2 * (ealphak(n, m) - zi * ebetak(n, m)) * cexp1
( 1372)              epsy = isq2 * (ealphak(n, m) + zi * ebetak(n, m)) * cexp2
( 1373)              epsz = ebk(n, m) * cexp0
( 1374) 	     
( 1375)              sum2_1 = sum2_1 + conjg(epsx) * Jn(IHARM + 1, n, m)
( 1376)              sum2_2 = sum2_2 + conjg(epsy) * Jn(IHARM - 1, n, m)
( 1377)              sum2_3 = sum2_3 + conjg(epsz) * Jn(IHARM, n, m)	     
( 1378)           end do
( 1379)        end do
( 1380) ! 1000  continue
( 1381) 
( 1382)       ! ---------------------------- !
( 1383)       ! ---Sum over resonant modes-- !
( 1384)       ! ---------------------------- !
( 1385) 
( 1386)        do ires = 1, iresmax
( 1387)           n = nres(ires)
( 1388) 	  m = mres(ires)
( 1389) 	                                                 
( 1390)           cexp1 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) * zbeta(n,m)
( 1391)           cexp2 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) / zbeta(n,m)
( 1392)           cexp0 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m)
( 1393) 		
( 1394)           epsx = isq2 * (ealphak(n, m) - zi * ebetak(n, m)) * cexp1
( 1395)           epsy = isq2 * (ealphak(n, m) + zi * ebetak(n, m)) * cexp2
( 1396)           epsz = ebk(n, m) * cexp0
( 1397) 	     
( 1398) !          sum2_1 = sum2_1 + conjg(epsx) * Jn(IHARM + 1, n, m)
( 1399) !          sum2_2 = sum2_2 + conjg(epsy) * Jn(IHARM - 1, n, m)
( 1400) !          sum2_3 = sum2_3 + conjg(epsz) * Jn(IHARM, n, m)
( 1401) 	     
( 1402) 	  sumkx2_1 = sumkx2_1 + xkxsav(n) * conjg(epsx) * Jn(IHARM + 1, n, m)
( 1403)           sumkx2_2 = sumkx2_2 + xkxsav(n) * conjg(epsy) * Jn(IHARM - 1, n, m)
( 1404)           sumkx2_3 = sumkx2_3 + xkxsav(n) * conjg(epsz) * Jn(IHARM, n, m)
( 1405) 	     
( 1406) 	  sumky2_1 = sumky2_1 + xkysav(m) * conjg(epsx) * Jn(IHARM + 1, n, m)
( 1407)           sumky2_2 = sumky2_2 + xkysav(m) * conjg(epsy) * Jn(IHARM - 1, n, m)
( 1408)           sumky2_3 = sumky2_3 + xkysav(m) * conjg(epsz) * Jn(IHARM, n, m)	     	     	    
( 1409) 
( 1410)           UPAR0 = SQMUT0 / NPARA_sav(n, m) * (1. - NWCW)
( 1411) 	
( 1412) 	  u = sqrt(upar0**2 + uperpk2) + 1.0e-08
( 1413)           sinth = uperpk / u + 1.0e-08
( 1414) 	  sinth_inv = 1.0 / sinth
( 1415) 		
( 1416) 	  facte = (nwcw - sinth**2) /  upar0
( 1417) 	
( 1418)           i = int((UPAR0 - UPAR(1)) * dui) + 1
( 1419) 	  i_uprl = i
( 1420)           p = (UPAR0 - UPAR(i)) * dui
( 1421) 		
( 1422) 	  dfduper0 = dfduper(k_uper, NUPAR)
( 1423)           if (i .ne. NUPAR) then
( 1424)             dfduper0 = dfduper(k_uper, i) + (dfduper(k_uper, i+1) - dfduper(k_uper, i)) * p
( 1425)           end if
( 1426) 	  






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 26

( 1427) 		
( 1428)           DFACTPAR = NPARA_sav(n, m) * UPAR0 * SQMUT0I
( 1429)           DFACTPER = NPARA_sav(n, m) * UPER(k_uper) * SQMUT0I
( 1430) 	  
( 1431)           dfdupar0 = dfdupar(k_uper, NUPAR)
( 1432)           if(i .ne. NUPAR)then
( 1433)              dfdupar0 = dfdupar(k_uper, i) +                    &
( 1434)      &       (dfdupar(k_uper, i+1) - dfdupar(k_uper, i)) * p
( 1435)           end if	  
( 1436) 	
( 1437)           U0 = (1. - DFACTPAR) * DFDUPER0 + DFACTPER * DFDUPAR0	  
( 1438) 			
( 1439)           factor = PISQMUT0 / abs(NPARA_sav(n, m)) 
( 1440) 			
( 1441)           sumb_11_nm = UPER(k_uper) * UPER(k_uper)  * Jn(IHARM + 1, n, m) * epsx     &
( 1442)      &               + UPER(k_uper) * UPER(k_uper)  * Jn(IHARM - 1, n, m) * epsy     &
( 1443)      &               + SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM, n, m)     * epsz
( 1444) 
( 1445)           sumb_31_nm = SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM + 1, n, m) * epsx     &
( 1446)      &               + SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM - 1, n, m) * epsy     &
( 1447)      &               + 2.0 * UPAR0 * UPAR0 * Jn(IHARM, n, m)     * epsz
( 1448)      
( 1449)           sumb_11_nm = sumb_11_nm * factor 
( 1450)           sumb_31_nm = sumb_31_nm * factor 
( 1451) 				
( 1452)           sume_11_nm = sumb_11_nm * facte
( 1453)           sume_31_nm = sumb_31_nm * facte
( 1454)           
( 1455)           sumc_11_nm = sume_11_nm * sinth_inv
( 1456)           sumc_31_nm = sume_31_nm * sinth_inv     
( 1457)      
( 1458)           sumf_11_nm = sumc_11_nm * facte
( 1459)           sumf_31_nm = sumc_31_nm * facte
( 1460)           		
( 1461)           sumwdot_11_nm = sumb_11_nm * u0
( 1462)           sumwdot_31_nm = sumb_31_nm * u0	
( 1463) 											     
( 1464)           sumf_11(i_uprl) = sumf_11(i_uprl) + sumf_11_nm
( 1465)           sumf_31(i_uprl) = sumf_31(i_uprl) + sumf_31_nm
( 1466) 
( 1467)           sume_11(i_uprl) = sume_11(i_uprl) + sume_11_nm
( 1468)           sume_31(i_uprl) = sume_31(i_uprl) + sume_31_nm
( 1469) 
( 1470)           sumc_11(i_uprl) = sumc_11(i_uprl) + sumc_11_nm
( 1471)           sumc_31(i_uprl) = sumc_31(i_uprl) + sumc_31_nm
( 1472) 
( 1473)           sumb_11(i_uprl) = sumb_11(i_uprl) + sumb_11_nm
( 1474)           sumb_31(i_uprl) = sumb_31(i_uprl) + sumb_31_nm
( 1475) 		
( 1476) 	  sumwdot_11 = sumwdot_11 + sumwdot_11_nm
( 1477) 	  sumwdot_31 = sumwdot_31 + sumwdot_31_nm
( 1478) 		
( 1479) 	  sumwdotkx_11 = sumwdotkx_11 + xkxsav(n) * sumwdot_11_nm
( 1480) 	  sumwdotkx_31 = sumwdotkx_31 + xkxsav(n) * sumwdot_31_nm	
( 1481) 		
( 1482) 	  sumwdotky_11 = sumwdotky_11 + xkysav(m) * sumwdot_11_nm
( 1483) 	  sumwdotky_31 = sumwdotky_31 + xkysav(m) * sumwdot_31_nm							
( 1484) 		






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 27

( 1485)        enddo
( 1486)        
( 1487)        
( 1488)        sum_wdot = sum_wdot + sum2_1 * sumwdot_11    &
( 1489)      &                     + sum2_2 * sumwdot_11    &
( 1490)      &  		   + sum2_3 * sumwdot_31 
( 1491)      
( 1492)      
( 1493)        sum_fx0 = sum_fx0  + sumkx2_1 * sumwdot_11    &
( 1494)      &                    + sumkx2_2 * sumwdot_11    &
( 1495)      &  		  + sumkx2_3 * sumwdot_31    &
( 1496)      &                    + sum2_1 * sumwdotkx_11    &
( 1497)      &                    + sum2_2 * sumwdotkx_11    &
( 1498)      &  		  + sum2_3 * sumwdotkx_31
( 1499)      
( 1500)        sum_fy0 = sum_fy0  + sumky2_1 * sumwdot_11    &
( 1501)      &                    + sumky2_2 * sumwdot_11    &
( 1502)      &  	          + sumky2_3 * sumwdot_31    &
( 1503)      &                    + sum2_1 * sumwdotky_11    &
( 1504)      &                    + sum2_2 * sumwdotky_11    &
( 1505)      &  	          + sum2_3 * sumwdotky_31    
( 1506)       
( 1507)        
( 1508) 
( 1509)        do i_uprl = 1, nupar
( 1510)           b_sum(i_uprl) = b_sum(i_uprl) + sum2_1 * sumb_11(i_uprl)   &
( 1511)      &                                  + sum2_2 * sumb_11(i_uprl)   &
( 1512)      &                                  + sum2_3 * sumb_31(i_uprl)
( 1513)           c_sum(i_uprl) = c_sum(i_uprl) + sum2_1 * sumc_11(i_uprl)   &
( 1514)      &                                  + sum2_2 * sumc_11(i_uprl)   &
( 1515)      &                                  + sum2_3 * sumc_31(i_uprl)
( 1516)           e_sum(i_uprl) = e_sum(i_uprl) + sum2_1 * sume_11(i_uprl)   &
( 1517)      &                                  + sum2_2 * sume_11(i_uprl)   &
( 1518)      &                                  + sum2_3 * sume_31(i_uprl)
( 1519)           f_sum(i_uprl) = f_sum(i_uprl) + sum2_1 * sumf_11(i_uprl)   &
( 1520)      &                                  + sum2_2 * sumf_11(i_uprl)   &
( 1521)      &                                  + sum2_3 * sumf_31(i_uprl)     
( 1522)        end do
( 1523)        
( 1524)        
( 1525) 
( 1526)     end do
( 1527)     
( 1528) 
( 1529) 
( 1530)     deallocate( zbeta )
( 1531)     deallocate( zbeta_iharm )
( 1532)     
( 1533)     deallocate(nres )
( 1534)     deallocate(mres )
( 1535) 
( 1536)     deallocate(zetai)
( 1537)     deallocate(Jni)
( 1538)     deallocate(Jn)    
( 1539)     deallocate(NPARA_sav)
( 1540)     
( 1541)     
( 1542)     deallocate(sumb_11)






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 28

( 1543)     deallocate(sumb_31)
( 1544)     
( 1545)     deallocate(sumc_11)
( 1546)     deallocate(sumc_31) 
( 1547)     
( 1548)     deallocate(sume_11)
( 1549)     deallocate(sume_31)
( 1550)     
( 1551)     deallocate(sumf_11)
( 1552)     deallocate(sumf_31)      
( 1553)     
( 1554)     deallocate( is_resonance_nm )
( 1555)     
( 1556)     return
( 1557) 
( 1558)   end subroutine QLSUM_NON_MAXWELLIAN
( 1559) 
( 1560) 
( 1561) !
( 1562) !*************************************************************************
( 1563) !
( 1564) 
( 1565) 	subroutine zpow(n, z, iharm, zout )
( 1566) 	implicit none
( 1567) 	integer n, iharm
( 1568) 	complex z(n), zout(n)
( 1569) 
( 1570) 	integer i,ipow
( 1571) 	complex one, zero
( 1572)         complex zin
( 1573) 
( 1574)         integer nharm
( 1575)         logical isodd
( 1576)         intrinsic mod
( 1577) 
( 1578)         logical use_zdiv
( 1579)         parameter(use_zdiv=.true.)
( 1580) 
( 1581)         integer nb
( 1582)         parameter(nb=1024*4*4)
( 1583)         complex zk(nb)
( 1584)         integer istart,iend,isize
( 1585) 
( 1586)         one = 1.0d0
( 1587)         zero = 0.0d0
( 1588) 
( 1589)         if (iharm.eq.0) then
( 1590)              do i=1,n
( 1591)                 zout(i) = one
( 1592)              enddo
( 1593)              return
( 1594)         endif
( 1595) 
( 1596) 
( 1597)         do istart=1,n,nb
( 1598) 
( 1599)            iend = min(n,istart+nb-1)
( 1600)            isize = iend-istart+1






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 29

( 1601) 
( 1602) 	  do i=1,isize
( 1603) 	    zout(istart-1+i) = one
( 1604)           enddo
( 1605) 
( 1606) 
( 1607)          do i=1,isize
( 1608)            zk(i) = z(istart-1+i)
( 1609)          enddo
( 1610) 
( 1611)         nharm = abs(iharm)
( 1612)         do while (nharm .gt. 0)
( 1613)            isodd = (mod(nharm,2).eq.1)
( 1614)            if (isodd) then
( 1615)                do i=1,isize
( 1616)                  zout(istart-1+i) = zout(istart-1+i) * zk(i)
( 1617)                enddo
( 1618)            endif
( 1619)            do i=1,isize
( 1620)               zk(i) = zk(i) * zk(i)
( 1621)            enddo
( 1622)            nharm = int( nharm/2 )
( 1623)         enddo
( 1624) 
( 1625) 
( 1626) 
( 1627) 	if (iharm.lt.0) then
( 1628)            if (use_zdiv) then
( 1629) 	     do i=1,isize
( 1630)                 zin = zout(istart-1+i)
( 1631)                 call zdiv( zin, zout(istart-1+i) )
( 1632)             enddo
( 1633)            else
( 1634)              do i=1,isize
( 1635)                 zin = zout(istart-1+i)
( 1636)                 zout(istart-1+i) = one/zin
( 1637)              enddo
( 1638)            endif
( 1639)         endif
( 1640) 
( 1641)         enddo
( 1642) 
( 1643) 	return
( 1644) 	end subroutine 
( 1645) 	
( 1646) !
( 1647) !*************************************************************************
( 1648) !
( 1649) 
( 1650)         subroutine zdiv( zin, zout )
( 1651)         implicit none
( 1652)         complex zin, zout
( 1653)         real a, b
( 1654)         real d
( 1655) 
( 1656)         real one
( 1657)         parameter(one=1.0d0)
( 1658)         real rd, a_over_b, b_over_a






PGF90 (Version     14.2)          06/05/2015  08:32:31      page 30

( 1659) 
( 1660) 
( 1661)         a = real(zin)
( 1662)         b = aimag(zin)
( 1663) 
( 1664) !       z = (a + i * b)
( 1665) !       1/z =  a/(a^2 + b^2) - i * b/(a^2 + b^2)
( 1666) !
( 1667) !       or    1/(a + (b/a)*b) - i * (b/a) / (a + (b/a)*b)
( 1668) !       or    (a/b)/( (a/b)*a + b ) - i * 1/( (a/b)*a + b )
( 1669) !        
( 1670)         if (abs(a).gt.abs(b)) then
( 1671)             b_over_a = b/a
( 1672)             d = a + (b_over_a)*b
( 1673)             rd = one/d
( 1674)             zout = cmplx( rd, -(b_over_a)*rd )
( 1675)         else
( 1676)             a_over_b = a/b
( 1677)             d = (a_over_b)*a + b
( 1678)             rd = one/d
( 1679)             zout = cmplx( (a_over_b)*rd, -rd )
( 1680)         endif
( 1681) 
( 1682)         return
( 1683)         end subroutine
( 1684) 	
( 1685) 
( 1686) 
( 1687) !
( 1688) !*************************************************************************
( 1689) !
( 1690) 
( 1691)          end module qlsum_myra_mod
( 1692) 	 
( 1693) 
