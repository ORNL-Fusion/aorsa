


PGF90 (Version      7.0)          05/01/2008  16:50:05      page 1

Switches: -noasm -nodclchk -nodebug -nodlines -noline -list
          -idir /ccs/home/jaegeref/AORSA2D/02-29-2008_AORSA-CQL_EQDSK14_JAGUARCNL/src/CQL3D_SETUP
          -idir /ccs/home/jaegeref/AORSA2D/02-29-2008_AORSA-CQL_EQDSK14_JAGUARCNL/src/CQL3D_SETUP
          -idir /apps/netcdf/3.6.0/xt3_pgi605/include/
          -idir /opt/xt-libsci/10.2.0/pgi/snos64/include
          -idir /opt/xt-libsci/10.2.0/pgi/snos64/include/superlu
          -idir /opt/xt-mpt/2.0.33/sma/P/include
          -idir /opt/xt-mpt/2.0.33/mpich2-64/P/include
          -idir /opt/xt-mpt/2.0.33/mpich2-64/P/include
          -idir /opt/acml/default/pgi64/include
          -idir /notbackedup-jbod/users/rsrel/rs64.REL_2_0_33.071120.Tue/install/include
          -idir /opt/xt-catamount/2.0.33/catamount/linux/include
          -idir /opt/xt-service/2.0.33/include
          -inform severe -opt 2 -save -object -noonetrip
          -depchk on -nostandard     
          -nosymbol -noupcase    

Filename: /ccs/home/jaegeref/AORSA2D/02-29-2008_AORSA-CQL_EQDSK14_JAGUARCNL/src/cauchy_ppart.f

(    1)         subroutine cauchy_ppart2(x,nx,xres,fx,pint)
(    2) 	
(    3) !     -----------------------------------------------
(    4) !     Returns principal part of int(x,fx/(x-xres))
(    5) !     -----------------------------------------------
(    6) 
(    7)         implicit none
(    8)         integer, parameter :: idebug = 0
(    9) 
(   10)         integer   nx
(   11)         real xres 
(   12)         real x(nx), fx(nx)
(   13)         real pint
(   14) !       ---------------
(   15) !       local variables
(   16) !       ---------------
(   17)         logical, parameter :: use_linear = .true.
(   18) 
(   19)         integer :: i
(   20)         real, dimension(nx-1) :: va0,va1,va2
(   21)         real :: a0,a1,a2,  x1,x2,x3,  f1,f2,f3
(   22)         real :: tmp1,tmp2,  d1,d2,d3,  d31,d21
(   23)         real :: value0,value1,value2, xleft,xright
(   24)         real :: v0,v1,v2
(   25)         intrinsic :: log
(   26) 
(   27) 
(   28) !       ------------------------------------------------------------
(   29) !       compute piecewise quadratic over 
(   30) !       [x(i-1), x(i), x(i+1)] as    a0 + a1*(x-xres)+ a2*(x-xres)^2
(   31) !
(   32) !       assume xres is not exactly one of x(1:n)
(   33) !       ------------------------------------------------------------
(   34)         do i=2,nx-1
(   35)            x1 = x(i-1)
(   36)            x2 = x(i)
(   37)            x3 = x(i+1)
(   38)            f1 = fx(i-1)
(   39)            f2 = fx(i)
(   40)            f3 = fx(i+1)






PGF90 (Version      7.0)          05/01/2008  16:50:05      page 2

(   41) !          --------------------------------------
(   42) !          find a0,a1,a2 such that
(   43) !
(   44) !          a0 + a1*(x1-xres) + a2*(x1-xres)^2 = f1
(   45) !          a0 + a1*(x2-xres) + a2*(x2-xres)^2 = f2
(   46) !          a0 + a1*(x3-xres) + a2*(x3-xres)^2 = f3
(   47) !          --------------------------------------
(   48)            d1 = x1-xres
(   49)            d2 = x2-xres
(   50)            d3 = x3-xres
(   51)            d31 = (d3-d1)*(d3+d1)
(   52)            d21 = (d2-d1)*(d2+d1)
(   53) !          ----------------------------------
(   54) !          a1 * ( d3-d1 ) + a2*( d31 ) = f3-f1
(   55) !          a1 * ( d2-d1 ) + a2*( d21 ) = f2-f1
(   56) !          -----------------------------------
(   57)            tmp1 = ((f3-f1)*(d2-d1) - (f2-f1)*(d3-d1))
(   58)            tmp2 = ( d31*(d2-d1) - d21*(d3-d1) )
(   59) 
(   60)            a2 = tmp1/tmp2
(   61)            a1 = ((f3-f1) - a2*d31 )/(d3-d1)
(   62)            a0 = f1 - a2*d1*d1 - a1*d1
(   63) 
(   64)            va0(i) = a0
(   65)            va1(i) = a1
(   66)            va2(i) = a2
(   67)        enddo
(   68) 
(   69) !       --------------------------------------------
(   70) !       special handling for first interval
(   71) !       --------------------------------------------
(   72)        if (use_linear) then
(   73) !         ------------------------------
(   74) !         backward compatible with df_dv
(   75) !
(   76) !         a0 + a1*(x1-xres) = f1
(   77) !         a0 + a1*(x2-xres) = f2
(   78) !         ------------------------------
(   79)                x1 = x(1)
(   80)                x2 = x(2)
(   81)                f1 = fx(1)
(   82)                f2 = fx(2)
(   83) 
(   84)                a1 = (f2-f1)/(x2-x1)
(   85)                a0 = f1 - a1*(x1-xres)
(   86)                a2 = 0.0
(   87) 
(   88)                va0(1) = a0
(   89)                va1(1) = a1
(   90)                va2(1) = a2
(   91)        else
(   92) !        ------------------------------------
(   93) !        use quadratic even in first interval
(   94) !        ------------------------------------
(   95)                va0(1) = va0(2)
(   96)                va1(1) = va1(2)
(   97)                va2(1) = va2(2)
(   98) 






PGF90 (Version      7.0)          05/01/2008  16:50:05      page 3

(   99)        endif
(  100) 
(  101)        if (idebug.ge.1) then
(  102)          do i=1,nx-1
(  103)           write(*,*) 'i,a0,a1,a2 ',i,va0(i),va1(i),va2(i)
(  104)          enddo
(  105)        endif
(  106) 
(  107) 
(  108) !      ----------------------------------------------
(  109) !      sum contribtions from a0
(  110) !
(  111) !      int( 1/(x-xres), x=xleft..xright ) = log( (xright-xres)/(xleft-xres) )
(  112) !
(  113) !      sum contributions from a1
(  114) !
(  115) !      int( a1, x=xleft..xright) = (xright-xleft)*a1
(  116) !
(  117) !      sum contributions from a2
(  118) !
(  119) !      int( a2*(x-xres), x=xleft..xright) = 
(  120) !      = (a2/2) * ( (xright-xres)**2 - (xleft-xres)**2)
(  121) !      = (a2/2) * ( (xright+xleft - 2*xres) * (xright-xleft) )
(  122) !      ----------------------------------------------
(  123)        value0 = 0.0d0
(  124)        value1 = 0.0d0
(  125)        value2 = 0.0d0
(  126) 
(  127)        do i=1,nx-1
(  128)           a0 = va0(i)
(  129)           a1 = va1(i)
(  130)           a2 = va2(i)
(  131) 
(  132)           xleft = x(i)
(  133)           xright = x(i+1)
(  134) 
(  135)           v0 = a0*log( abs( (xright-xres)/(xleft-xres) ) )
(  136)           v1 = a1*(xright-xleft)
(  137)           v2 = a2*(xright+xleft-2.0d0*xres)*(xright-xleft)
(  138) 
(  139)           value0 = value0 + v0
(  140)           value1 = value1 + v1
(  141)           value2 = value2 + v2
(  142) 
(  143)           if (idebug.ge.1) then
(  144)             write(*,*) 'i,v0,v1,v2 ',i,v0,v1,v2
(  145)           endif
(  146) 
(  147)         enddo 
(  148)         value2 = value2*0.5d0
(  149) 
(  150) 
(  151)         pint = value0 + value1 + value2
(  152)           
(  153)         return
(  154)         end subroutine cauchy_ppart2
(  155) 	
(  156) 	






PGF90 (Version      7.0)          05/01/2008  16:50:05      page 4

(  157) !
(  158) !*************************************************************************
(  159) !
(  160) 
(  161) 
(  162)         subroutine cauchy_ppart6(x,nx,xres,nfx,fx,pint,is_uniform)
(  163) !     -----------------------------------------------
(  164) !     Returns principal part of int(x,fx/(x-xres))
(  165) !     -----------------------------------------------
(  166)         implicit none
(  167)         integer, parameter :: idebug = 0
(  168) 
(  169)         integer   nx,nfx
(  170)         real*8 xres 
(  171)         real*8 x(nx), fx(nx,nfx)
(  172)         real*8 pint(nfx)
(  173)         logical  :: is_uniform
(  174) !       ---------------
(  175) !       local variables
(  176) !       ---------------
(  177) 
(  178)         integer :: i,j,ih,nlog
(  179)         real*8, dimension(nx) :: vx, vlogt
(  180)         real*8 :: a0,a1,a2,  x1,x2,x3,  f1,f2,f3
(  181)         real*8 :: tmp1,tmp2,  d1,d2,d3,  d31,d21
(  182)         real*8 :: d3md1, d2md1
(  183)         real*8, dimension(nfx) :: value0,value1,value2 
(  184)         real*8 :: xleft,xright
(  185)         real*8 :: v0,v1,v2
(  186)         real*8 :: xc,a,b
(  187) 
(  188)         intrinsic :: log,abs,mod
(  189) 
(  190)         logical, parameter ::use_approx = .false.
(  191) 
(  192) 
(  193)         logical, parameter :: use_pade = .true.
(  194)         
(  195)         real*8 ::  h,t,dx,t2, logt
(  196)         real*8, parameter :: zero=0.0d0
(  197)         real*8, parameter :: one=1.0d0
(  198)         real*8, parameter :: two=2.0d0
(  199)         real*8, parameter :: three=3.0d0
(  200)         real*8, parameter :: four=4.0d0
(  201)         real*8, parameter :: five=5.0d0
(  202)         real*8, parameter :: six=6.0d0
(  203)         real*8, parameter :: seven=7.0d0
(  204)         real*8, parameter :: eight=8.0d0
(  205)         logical :: isok
(  206) 
(  207) 
(  208) !       ------------------------------------------------------------
(  209) !       compute piecewise quadratic over 
(  210) !       [x(i-1), x(i), x(i+1)] as    a0 + a1*(x-xres)+ a2*(x-xres)^2
(  211) !
(  212) !       assume xres is not exactly one of x(1:n)
(  213) !       ------------------------------------------------------------
(  214) 






PGF90 (Version      7.0)          05/01/2008  16:50:05      page 5

(  215)         value0 = zero
(  216)         value1 = zero
(  217)         value2 = zero
(  218)         pint = zero
(  219) 
(  220) !       ------------------
(  221) !       precompute the logs
(  222) !       ------------------
(  223)         nlog = (nx-1)/2
(  224)         do ih=1,nlog
(  225)            i = 2*ih
(  226)            x1 = x(i-1)
(  227)            x2 = x(i)
(  228)            x3 = x(i+1)
(  229)            vx(ih) = abs( (x3-xres)/(x1-xres) )
(  230)         enddo
(  231)         call vlog( vlogt, vx, nlog )
(  232)            
(  233) 
(  234)         if (is_uniform) then
(  235) 
(  236)         dx = (x(nx)-x(1))/dble(nx-1)
(  237)         h = dx
(  238) 
(  239) 
(  240)      
(  241)         do j=1,nfx
(  242)         do ih=1,nlog
(  243)            i = 2*ih
(  244) 
(  245)            x1 = x(i-1)
(  246)            x2 = x(i)
(  247)            x3 = x(i+1)
(  248) 
(  249)              d2 = x2-xres
(  250)              d1 = d2 - h
(  251)              d3 = d2 + h
(  252) 
(  253) 
(  254) 
(  255)            f1 = fx(i-1,j)
(  256)            f2 = fx(i,j)
(  257)            f3 = fx(i+1,j)
(  258) 
(  259)             
(  260) !          --------------------------------------
(  261) !          find a0,a1,a2 such that
(  262) !
(  263) !          a0 + a1*(x1-xres) + a2*(x1-xres)^2 = f1
(  264) !          a0 + a1*(x2-xres) + a2*(x2-xres)^2 = f2
(  265) !          a0 + a1*(x3-xres) + a2*(x3-xres)^2 = f3
(  266) !
(  267) !          a0 + a1*(x2-xres) + a2*(x2-xres)^2 = f2
(  268) !          a0 + a1*((x2-xres)-h) + a2*((x2-xres)-h)^2 = f1
(  269) !          a0 + a1*((x2-xres)+h) + a2*((x2-xres)+h)^2 = f3
(  270) !
(  271) !          f2 + a1*h + a2*(h*h + 2*h*(x2-xres)) = f3
(  272) !          f2 - a1*h + a2*(h*h - 2*h*(x2-xres)) = f1






PGF90 (Version      7.0)          05/01/2008  16:50:05      page 6

(  273) !          --------------------------------------
(  274) 
(  275) 
(  276) 
(  277) !             ---------------------
(  278) !             d31 = (d3-d1)*(d3+d1)
(  279) !             d21 = (d2-d1)*(d2+d1)
(  280) !
(  281) !          a1 * ( d3-d1 ) + a2*( d31 ) = f3-f1
(  282) !          a1 * ( d2-d1 ) + a2*( d21 ) = f2-f1
(  283) !          -----------------------------------
(  284) 
(  285)              a2 = (f3-two*f2+f1)/(two*h*h)
(  286)              a1 = (f3-f1)/(two*h) - two*a2*d2
(  287)              a0 = f2 - (a1*d2 + a2*d2*d2)
(  288) 
(  289) 
(  290)              logt = vlogt(ih)
(  291)              value0(j) = value0(j) + a0*logt
(  292)              value1(j) = value1(j) + a1 
(  293)              value2(j) = value2(j) + a2*d2
(  294) 
(  295)             enddo
(  296)             enddo
(  297) 
(  298)             value1 = value1 * (two*h)
(  299)             value2 = value2 * (four*h)
(  300) 
(  301) 
(  302)         else
(  303) 
(  304) 
(  305)         
(  306)         do j=1,nfx
(  307)         do ih=1,nlog
(  308)            i = 2*ih
(  309)            x1 = x(i-1)
(  310)            x2 = x(i)
(  311)            x3 = x(i+1)
(  312) 
(  313) 
(  314)             
(  315) !          --------------------------------------
(  316) !          find a0,a1,a2 such that
(  317) !
(  318) !          a0 + a1*(x1-xres) + a2*(x1-xres)^2 = f1
(  319) !          a0 + a1*(x2-xres) + a2*(x2-xres)^2 = f2
(  320) !          a0 + a1*(x3-xres) + a2*(x3-xres)^2 = f3
(  321) !          --------------------------------------
(  322)              d1 = x1-xres
(  323)              d2 = x2-xres
(  324)              d3 = x3-xres
(  325)              d31 = (d3-d1)*(d3+d1)
(  326)              d21 = (d2-d1)*(d2+d1)
(  327) !          ----------------------------------
(  328) !          a1 * ( d3-d1 ) + a2*( d31 ) = f3-f1
(  329) !          a1 * ( d2-d1 ) + a2*( d21 ) = f2-f1
(  330) !          -----------------------------------






PGF90 (Version      7.0)          05/01/2008  16:50:05      page 7

(  331)              logt = log( abs( (x3-xres)/(x1-xres) ))
(  332) 
(  333)              f1 = fx(i-1,j)
(  334)              f2 = fx(i,j)
(  335)              f3 = fx(i+1,j)
(  336) 
(  337)              tmp1 = ((f3-f1)*(d2-d1) - (f2-f1)*(d3-d1))
(  338)              tmp2 = ( d31*(d2-d1) - d21*(d3-d1) )
(  339) 
(  340)              a2 = tmp1/tmp2
(  341)              a1 = ((f3-f1) - a2*d31 )/(d3-d1)
(  342)              a0 = f1 - a2*d1*d1 - a1*d1
(  343) !
(  344) !         f(x) = a0 + a1*(x-xres) + a2*(x-xres)^2           
(  345) !
(  346) !         int( f(x)/(x-xres), x=x1..x3 ) = 
(  347) !         a0 * int( 1/(x-xres), x=x1..x3 ) + 
(  348) !         a1 * int( 1, x=x1..x3)
(  349) !         a2 * int( (x-xres), x=x1..x3 )
(  350) !
(  351) 
(  352)              logt = vlogt(ih)
(  353)              value0(j) = value0(j) + a0 * logt
(  354)              value1(j) = value1(j) + a1 * (x3-x1)
(  355)              value2(j) = value2(j) + a2 * (x3-x1)*((x3-xres)+(x1-xres))
(  356) 
(  357)               enddo
(  358) 
(  359)           enddo
(  360)           endif
(  361) 
(  362) 
(  363) !         ----------------------------------
(  364) !         do we have an odd number of intervals?
(  365) !         if so, need to account for last interval
(  366) !         ----------------------------------
(  367)           if (mod(nx,2).eq.0) then
(  368) 
(  369)            x1 = x(nx-2)
(  370)            x2 = x(nx-1)
(  371)            x3 = x(nx)
(  372) 
(  373)              d1 = x1-xres
(  374)              d2 = x2-xres
(  375)              d3 = x3-xres
(  376)              d31 = (d3-d1)*(d3+d1)
(  377)              d21 = (d2-d1)*(d2+d1)
(  378) 
(  379)              logt = log( abs( (x3-xres)/(x2-xres) ))
(  380) 
(  381)            do j=1,nfx
(  382) 
(  383)            f1 = fx(nx-2,j)
(  384)            f2 = fx(nx-1,j)
(  385)            f3 = fx(nx,j)
(  386) 
(  387)             
(  388) !          --------------------------------------






PGF90 (Version      7.0)          05/01/2008  16:50:05      page 8

(  389) !          find a0,a1,a2 such that
(  390) !
(  391) !          a0 + a1*(x1-xres) + a2*(x1-xres)^2 = f1
(  392) !          a0 + a1*(x2-xres) + a2*(x2-xres)^2 = f2
(  393) !          a0 + a1*(x3-xres) + a2*(x3-xres)^2 = f3
(  394) !          --------------------------------------
(  395) !          ----------------------------------
(  396) !          a1 * ( d3-d1 ) + a2*( d31 ) = f3-f1
(  397) !          a1 * ( d2-d1 ) + a2*( d21 ) = f2-f1
(  398) !          -----------------------------------
(  399)              tmp1 = ((f3-f1)*(d2-d1) - (f2-f1)*(d3-d1))
(  400)              tmp2 = ( d31*(d2-d1) - d21*(d3-d1) )
(  401) 
(  402)              a2 = tmp1/tmp2
(  403)              a1 = ((f3-f1) - a2*d31 )/(d3-d1)
(  404)              a0 = f1 - a2*d1*d1 - a1*d1
(  405) !
(  406) !         f(x) = a0 + a1*(x-xres) + a2*(x-xres)^2           
(  407) !
(  408) !         int( f(x)/(x-xres), x=x2..x3 ) = 
(  409) !         a0 * int( 1/(x-xres), x=x2..x3 ) + 
(  410) !         a1 * int( 1, x=x1..x3)
(  411) !         a2 * int( (x-xres), x=x2..x3 )
(  412) !
(  413)              value1(j) = value1(j) + a1 * (x3-x2)
(  414)              value2(j) = value2(j) + a2 * (x3-x2)*(x3+x2-two*xres)
(  415)              value0(j) = value0(j) + a0 * logt
(  416)            enddo
(  417) 
(  418)            endif
(  419)             
(  420)           value2 = value2 / two
(  421)           pint = value0 + value1 + value2
(  422) 
(  423) 
(  424)           return
(  425) 
(  426)         end subroutine cauchy_ppart6
(  427) 
(  428) 
(  429) 
   381, Invariant assignments hoisted out of loop



















