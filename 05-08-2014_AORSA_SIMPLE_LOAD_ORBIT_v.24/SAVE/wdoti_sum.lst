


PGF90 (Version     14.2)          06/02/2015  11:57:31      page 1

Switches: -noasm -nodclchk -nodebug -nodlines -noline -list
          -idir /global/homes/j/jaegeref/AORSA2D/05-08-2014_AORSA_SIMPLE_LOAD_ORBIT_v.24/src/CQL3D_SETUP
          -idir /global/homes/j/jaegeref/AORSA2D/05-08-2014_AORSA_SIMPLE_LOAD_ORBIT_v.24/src/CQL3D_SETUP
          -idir /opt/cray/netcdf/4.3.2/PGI/141/include
          -idir /opt/cray/hdf5/1.8.13/PGI/141/include
          -idir /opt/cray/mpt/7.1.1/gni/mpich2-pgi/141/include
          -idir /opt/cray/mpt/7.1.1/gni/sma/include
          -idir /opt/cray/libsci/13.0.1/PGI/141/x86_64/include
          -idir /opt/cray/rca/1.0.0-2.0502.53711.3.125.gem/include
          -idir /opt/cray/alps/5.2.1-2.0502.9041.11.6.gem/include
          -idir /opt/cray/xpmem/0.1-2.0502.55507.3.2.gem/include
          -idir /opt/cray/gni-headers/3.0-1.0502.9684.5.2.gem/include
          -idir /opt/cray/dmapp/7.0.1-1.0502.9501.5.211.gem/include
          -idir /opt/cray/pmi/5.0.6-1.0000.10439.140.3.gem/include
          -idir /opt/cray/ugni/5.0-1.0502.9685.4.24.gem/include
          -idir /opt/cray/udreg/2.3.2-1.0502.9275.1.25.gem/include
          -idir /opt/cray/wlm_detect/1.0-1.0502.53341.1.1.gem/include
          -idir /opt/cray/krca/1.0.0-2.0502.53880.4.103.gem/include
          -idir /opt/cray-hss-devel/7.2.0/include
          -inform severe -opt 2 -save -object -noonetrip
          -depchk on -nostandard     
          -nosymbol -noupcase    

Filename: /global/homes/j/jaegeref/AORSA2D/05-08-2014_AORSA_SIMPLE_LOAD_ORBIT_v.24/src/wdoti_sum.f90

(    1)   	module wdoti_sum_mod
(    2)          contains
(    3) !module METS2AORSA_MYRA
(    4) 
(    5) !  private
(    6) !  public::  GET_WMAT_MYRA, intplt1d, WINTERP1D_3
(    7) 
(    8) !contains
(    9) !
(   10) !*************************************************************************
(   11) !
(   12)     subroutine QLSUM_MAXWELLIAN_z2_ion(ip, jp, k_uper, b_sum, c_sum,  & 
(   13)        & e_sum, f_sum, &
(   14)        & sum_wdot, sum_fx0, sum_fy0, W, ZSPEC, ASPEC, BMAG, &
(   15)        & lmax, ENORM, UPARMIN, UPARMAX, &
(   16)        & NUPAR, NUPER, UPER, UPAR, DFDUPER, DFDUPAR,  &
(   17)        & ealphak, ebetak, ebk, nkdim1, nkdim2, mkdim1, mkdim2,   &
(   18)        & nkx1, nkx2, nky1, nky2, &
(   19)        & uxx, uxy, uxz, &
(   20)        & uyx, uyy, uyz, &
(   21)        & uzx, uzy, uzz, &
(   22)        & nxdim, nydim, xkxsav, xkysav, xkphi, xx, yy, i_global, j_global, &
(   23)        & lmaxdim, ndist, nzeta, &
(   24)        & gradprlb, bmod, omgc, alpha, xm, upshift, xk_cutoff, rt, nphi,  &
(   25)        & rho, z0_table, z1_table, z2_table, ntable, mtable, &
(   26)        & zetai_table, dKdL_table, nmax, mmax,   &
(   27)        & bhatgradbx, bhatgradby, bhatgradbz)
(   28) 
(   29)     implicit none
(   30) 
(   31)     integer i_global, j_global, ier, nxdim, nydim, k, lmaxdim, ndist
(   32)     integer, intent(IN):: NUPAR, NUPER, lmax, ip, jp
(   33)     integer nkx1, nkx2, nky1, nky2, j_upar, k_uper, l
(   34)     integer nkdim1, nkdim2, mkdim1, mkdim2






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 2

(   35)     integer:: NHARM, IHARM, M, N, i, nzeta
(   36)     integer i_uprl, upshift
(   37)     integer ires, iresmax, nphi
(   38) 
(   39)     complex, dimension(:,:), allocatable :: zbeta
(   40)     complex, dimension(:,:), allocatable :: zbeta_iharm
(   41)     
(   42)     real  y, y0, alpha, xm, akprl, sgn_kprl, omgc, bmod, xkprl_eff,  &
(   43)    &   descrim, xme, fgam, gradprlb, gammab, xk_cutoff, rt, akprl_min, rho
(   44)    
(   45)     real dkprldl
(   46)     real bhatgradbx, bhatgradby, bhatgradbz
(   47) 
(   48)     real  uxx, uxy, uxz, uyx, uyy, uyz, uzx, uzy, uzz, omgrf, xnuomg
(   49)     real  xkphi, sinth, factc, facte, factf, sinth_inv
(   50)     real  xkxsav(nkdim1 : nkdim2), xkysav(mkdim1 : mkdim2)
(   51)     real  xkperpn, xkperpni, xkrhon, xketan, xkprln, beta
(   52)     real, intent(IN):: W, ZSPEC, ASPEC, BMAG
(   53)     real, intent(IN):: ENORM, UPARMIN, UPARMAX
(   54)     real, dimension(NUPER), intent(IN):: UPER
(   55)     real, dimension(NUPAR), intent(IN):: UPAR
(   56)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER, DFDUPAR
(   57)     real:: W2, WCW, RRP, RRM, WC, WCI
(   58)     real:: MUT0, SQMUT0, PISQMUT0, SQMUT0I, KPARA1
(   59)     real:: ISQ2, SQ2, NWCW, DFACTPAR, DFACTPER, U0
(   60)     real:: UPAR0, dfdupar0, dfduper0, du, dui, p 
(   61)     real:: time, t1, tmsec, second1, dummy, WI, uperpk, uperpk2
(   62)     real:: dzeta, dzetai, zetamax, zetamin, zeta0, zetamax1, zetamax2
(   63)     real:: A1, A2, A3, u
(   64)     real:: temp1, temp2, temp3, factor
(   65)     real:: temp1w, temp2w, temp3w
(   66)     
(   67)     real, dimension(:),     allocatable :: zetai
(   68)     real, dimension(:,:),   allocatable :: Jni
(   69)     real, dimension(:,:,:), allocatable :: Jn
(   70)     real, dimension(:,:),   allocatable :: NPARA_sav
(   71)     
(   72)     integer, dimension(:),  allocatable :: nres
(   73)     integer, dimension(:),  allocatable :: mres
(   74)         
(   75)     complex, dimension(:),  allocatable :: sumb_11
(   76)     complex, dimension(:),  allocatable :: sumb_31
(   77)      
(   78)     complex, dimension(:),  allocatable :: sumc_11
(   79)     complex, dimension(:),  allocatable :: sumc_31
(   80)     
(   81)     complex, dimension(:),  allocatable :: sume_11
(   82)     complex, dimension(:),  allocatable :: sume_31
(   83)      
(   84)     complex, dimension(:),  allocatable :: sumf_11
(   85)     complex, dimension(:),  allocatable :: sumf_31
(   86)     
(   87)     complex z0, z1, z2
(   88)     complex z0_new, z1_new, z2_new
(   89)     
(   90)     complex sumf_11_nm
(   91)     complex sumf_31_nm
(   92) 






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 3

(   93)     complex sume_11_nm
(   94)     complex sume_31_nm
(   95)        
(   96)     complex sumc_11_nm
(   97)     complex sumc_31_nm
(   98)        
(   99)     complex sumb_11_nm
(  100)     complex sumb_31_nm
(  101)  
(  102)     logical, dimension(:,:), allocatable :: is_resonance_nm      
(  103) 
(  104)     complex epsx, epsy, epsz
(  105)     complex ealphak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(  106)     &        ebetak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(  107)     &           ebk(nkdim1 : nkdim2, mkdim1 : mkdim2)
(  108)     complex cexpkx, cexpky, zi, zeta, omgrfc
(  109) 
(  110)     complex xx(nkdim1 : nkdim2, 1 : nxdim),   &
(  111)     &       yy(mkdim1 : mkdim2, 1 : nydim)
(  112)      
(  113)     integer ntable, mtable, nmax, mmax
(  114)       
(  115)     complex z0_table(ntable, mtable)
(  116)     complex z1_table(ntable, mtable)
(  117)     complex z2_table(ntable, mtable)
(  118)     real zetai_table(ntable), dKdL_table(mtable)
(  119)     real dKdL_giv        
(  120) 
(  121)     complex cexpn, cexpnp1, cexpnm1, cexp11
(  122) 
(  123)     complex cexp1, cexp2, cexp0
(  124)     complex sumwdot_11_nm, sumwdot_13_nm, sumwdot_31_nm
(  125)     
(  126)     complex sumwdot_11, sumwdot_13, sumwdot_31
(  127)     complex sumwdotkx_11, sumwdotkx_31
(  128)     complex sumwdotky_11, sumwdotky_31
(  129) 	
(  130)     complex sum2_1, sum2_2, sum2_3
(  131)     complex sum1_1, sum1_2, sum1_3, sum1_4
(  132)     
(  133)     complex sumkx2_1, sumkx2_2, sumkx2_3 
(  134)     complex sumky2_1, sumky2_2, sumky2_3        
(  135)     
(  136)     complex b_sum(nupar), c_sum(nupar), e_sum(nupar), f_sum(nupar)
(  137)     complex sum_wdot, sum_fx0, sum_fy0
(  138)     complex term1, term2, term3, term4
(  139)     complex b(100)
(  140)     complex zetal
(  141) 
(  142)     real, parameter:: EOVERAMU=9.64853e7
(  143)     real, parameter:: EOVERMH = 9.58084e+07
(  144)     
(  145)     real, parameter:: MPC2 = 938271998.38
(  146)     real, parameter:: C = 2.99792458e8
(  147)     real, parameter:: PI = 3.141592653597932384
(  148)     real :: cosbeta_n_m, sinbeta_n_m
(  149)     common/upcom/akprl_min    
(  150)     






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 4

(  151)     allocate( zbeta(nkx1:nkx2,nky1:nky2) )
(  152)     allocate( zbeta_iharm(nkx1:nkx2,nky1:nky2) )
(  153) 
(  154)     allocate(zetai(nzeta + 1) )
(  155)     allocate(Jni(-lmaxdim : lmaxdim, nzeta + 1) )
(  156)     allocate( Jn(-lmaxdim : lmaxdim, nkdim1 : nkdim2, mkdim1 : mkdim2))    
(  157)     allocate(NPARA_sav(nkdim1 : nkdim2, mkdim1 : mkdim2) ) 
(  158)     
(  159)     allocate(nres(nxdim * nydim) )
(  160)     allocate(mres(nxdim * nydim) )
(  161)     
(  162)     allocate(sumb_11(nupar))
(  163)     allocate(sumb_31(nupar))
(  164)      
(  165)     allocate(sumc_11(nupar))
(  166)     allocate(sumc_31(nupar))
(  167)     
(  168)     allocate(sume_11(nupar))
(  169)     allocate(sume_31(nupar))
(  170)      
(  171)     allocate(sumf_11(nupar))
(  172)     allocate(sumf_31(nupar))
(  173) 
(  174)     allocate(is_resonance_nm(nkx1:nkx2,nky1:nky2))
(  175) 
(  176) !   -------------------------------------
(  177) !   initialize allocatable arrays to zero
(  178) !   -------------------------------------
(  179) 
(  180)     omgrf = W
(  181) 
(  182)     omgrfc = omgrf * (1. + zi * xnuomg) 
(  183) 
(  184)     zbeta = 0.0
(  185)     zbeta_iharm = 0.0
(  186)     
(  187)     sumf_11_nm = 0.0
(  188)     sumf_31_nm = 0.0
(  189) 
(  190)     sume_11_nm = 0.0
(  191)     sume_31_nm = 0.0
(  192)     
(  193)     sumc_11_nm = 0.0
(  194)     sumc_31_nm = 0.0
(  195)     
(  196)     sumb_11_nm = 0.0
(  197)     sumb_31_nm = 0.0    
(  198) 
(  199)     is_resonance_nm = .false.
(  200) 
(  201)     zetai = 0.0
(  202)     Jni = 0.0
(  203)     NPARA_sav = 0.0
(  204)     
(  205)     sumb_11 = 0.0
(  206)     sumb_31 = 0.0
(  207)       
(  208)     sumc_11 = 0.0






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 5

(  209)     sumc_31 = 0.0
(  210) 
(  211)     sume_11 = 0.0
(  212)     sume_31 = 0.0
(  213) 
(  214)     sumf_11 = 0.0
(  215)     sumf_31 = 0.0        
(  216)         
(  217)     xme = 9.11e-31
(  218)     zi = cmplx(0., 1.)
(  219)     
(  220)     uperpk = uper(k_uper)
(  221)     uperpk2 = uperpk**2
(  222) 
(  223)     W2 = W * W
(  224)     WI = 1.0 / W
(  225) 
(  226)     WCW = BMAG * ZSPEC * EOVERMH / ASPEC / W
(  227)     WC = WCW * W
(  228)     WCI = 1.0 /WC
(  229) 
(  230)     MUT0 = 0.5 * MPC2 * ASPEC / ENORM
(  231)     SQMUT0 = SQRT(MUT0)
(  232)     SQMUT0I = 1.0 / SQMUT0
(  233)     PISQMUT0 = SQMUT0 * pi
(  234) 
(  235)     ISQ2 = SQRT(0.5)
(  236)     SQ2 = SQRT(2.0)    
(  237)     NHARM = lmax
(  238)     
(  239)     du = (upar(nupar) - upar(1)) / (nupar - 1)
(  240)     dui = 1.0 / du
(  241)         
(  242)     if(nzeta .eq. 1)then
(  243)     
(  244)     ! -------------------------------------------------------- !
(  245)     ! ---Don't interpolate: precalculate all Bessel functions- !
(  246)     ! -------------------------------------------------------- !
(  247) 
(  248)        do n = nkx1, nkx2
(  249)           do m = nky1, nky2
(  250) 
(  251)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  252)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  253)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  254) 	     xkperpn = sqrt(xkrhon**2 + xketan**2)
(  255) 	     
(  256)             ! ------------------------------------
(  257)             ! Optional: leave out upshift in xkprl
(  258)             ! --------------------------------- --          
(  259)               if (upshift .eq. 0)xkprln = uzz * xkphi
(  260) !	      if (upshift .eq. 0)xkprln = nphi /rt
(  261) 	      
(  262) 	     if (upshift .eq. -1) then      
(  263)                 if (xkperpn  .gt. xk_cutoff) xkprln = uzz * xkphi
(  264)              end if	      
(  265) 	     
(  266) 	     






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 6

(  267) 	     sgn_kprl = sign(1.0, xkprln)
(  268)              akprl = abs(xkprln)		      
(  269) 		     
(  270) !            ----------------------------------------------
(  271) !            Optional: Don't allow xkprl to be 0 (upshift = -2)
(  272) !            ----------------------------------------------        
(  273)              if (upshift .eq. -2) then
(  274)                 if (akprl .lt. akprl_min) then
(  275) 		    xkprln = akprl_min * sgn_kprl
(  276) 		end if 
(  277)              end if		     
(  278) 	     
(  279) 
(  280)              y0 = 1.5
(  281)              y = y0
(  282) 	     
(  283)       
(  284)              l = 1
(  285) 	     if(xkprln .eq. 0)xkprln = 1.0e-06
(  286)              gammab = abs(l * omgc / (2.0 * alpha * xkprln**2)  &
(  287)      &                                    * gradprlb / bmod)
(  288) 
(  289)              if(xm .eq. xme)gammab = 0.0
(  290) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
(  291)              if(abs(gammab) .lt. .01)gammab = .01
(  292) 
(  293) 
(  294)              if(sgn_kprl .ge. 0.0)then
(  295)                 fgam = 1.0
(  296) 
(  297)                 if(gammab .gt. 1.0e-05)then
(  298)                    y = y0
(  299)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
(  300)      &               / (2. * gammab * y)
(  301)                 endif
(  302) 
(  303)                 xkprl_eff = xkprln / fgam 
(  304) 
(  305)              end if
(  306) 
(  307) 
(  308)              if(sgn_kprl .lt. 0.0)then
(  309)                 fgam = 1.0
(  310) 
(  311)                 if(gammab .gt. 1.0e-05)then
(  312)                    descrim = 1. - 4. * gammab * y0
(  313)                    if (descrim .ge. 0.0) y =   y0
(  314)                    if (descrim .lt. 0.0) y = - y0
(  315)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
(  316)      &                / (2. * gammab * y)
(  317)                 endif
(  318) 
(  319)                 xkprl_eff = xkprln / fgam 
(  320) 
(  321)              end if
(  322) 
(  323)              if (upshift .ne. 0) xkprln = xkprl_eff	     
(  324) 	






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 7

(  325)              NPARA_sav(n, m) = xkprln * C / W
(  326) 
(  327)              xkperpn = sqrt(xkrhon**2 + xketan**2)
(  328)              if(xkperpn .eq. 0.0)xkperpn = 1.0e-08
(  329) 	
(  330)              cosbeta_n_m  = xkrhon / xkperpn
(  331)              sinbeta_n_m  = xketan / xkperpn
(  332)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m  )
(  333) 
(  334)              zeta = xkperpn * uper(k_uper) * c * sqmut0i / wc
(  335) 
(  336)              call besjc(zeta, nharm + 2, b, ier)
(  337)              if(ier .ne. 0) write(6, *) "ier = ", ier
(  338) 
(  339)              do IHARM = 0, NHARM + 1
(  340)                 Jn(iharm,  n, m) = b(iharm + 1)
(  341)                 Jn(-iharm, n, m) = (-1.0)**iharm * Jn(iharm, n, m)
(  342)              end do
(  343) 
(  344)           end do
(  345)        end do
(  346)     
(  347)     else
(  348)     
(  349)         
(  350)        ! -------------------------------------- !
(  351)        ! ---Interpolate; calculate zeta mesh -- !
(  352)        ! -------------------------------------- !
(  353)     
(  354)        zetamax = 0.0
(  355)        zetamin = 0.0
(  356)     
(  357)        do n = nkx1, nkx2
(  358)           do m = nky1, nky2
(  359) 
(  360)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  361)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  362)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  363) 
(  364)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
(  365) 	
(  366)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
(  367) 	  
(  368)              if (zeta0 .gt. zetamax) zetamax = zeta0
(  369)              if (zeta0 .lt. zetamin) zetamin = zeta0
(  370)           end do
(  371)        end do
(  372)     
(  373) 
(  374)         if(zetamax .eq. zetamin)then
(  375)           zetamax =  1.0e-06
(  376)           zetamin = -1.0e-06
(  377)        end if
(  378) 
(  379)        dzeta = (zetamax - zetamin) / (nzeta - 1)
(  380)        dzetai = 1.0 / dzeta
(  381)     
(  382)        ! ------------------------------------------------- !






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 8

(  383)        ! ---Pre-calculate Bessel functions on zeta mesh -- !
(  384)        ! ------------------------------------------------- !
(  385) 	  
(  386)        do i = 1, nzeta + 1
(  387)           zetai(i) = zetamin + (i - 1) * dzeta
(  388)           zeta = cmplx(zetai(i), 0.0)
(  389) 	  
(  390)           call besjc(zeta, nharm + 2, b, ier)
(  391) !          if(ier .ne. 0) write(6, *) "ier = ", ier
(  392) 	  
(  393)           do iharm = 0, NHARM + 1
(  394)              Jni(iharm,  i) = b(iharm + 1)
(  395)              Jni(-iharm, i) = (-1.0)**iharm * b(iharm + 1)
(  396)           end do
(  397)        end do
(  398)      
(  399) 
(  400)        ! --------------------------------- !
(  401)        ! ---Interpolate Bessel functions-- !
(  402)        ! --------------------------------- !
(  403) 
(  404)        do n = nkx1, nkx2
(  405)           do m = nky1, nky2
(  406) 
(  407)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  408)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  409)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  410) 	     xkperpn = sqrt(xkrhon**2 + xketan**2)
(  411) 	     	     
(  412) 	    ! ------------------------------------
(  413)             ! Optional: leave out upshift in xkprl
(  414)             ! --------------------------------- --          
(  415)              if (upshift .eq. 0)xkprln = uzz * xkphi
(  416) !             if (upshift .eq. 0)xkprln = nphi / rt
(  417) 	      
(  418) 	     if (upshift .eq. -1) then      
(  419)                 if (xkperpn  .gt. xk_cutoff) xkprln = uzz * xkphi
(  420)              end if
(  421) 	     
(  422) 	     
(  423) 	     sgn_kprl = sign(1.0, xkprln)
(  424)              akprl = abs(xkprln)		      
(  425) 		     
(  426) !            ----------------------------------------------
(  427) !            Optional: Don't allow xkprl to be 0 (upshift = -2)
(  428) !            ----------------------------------------------        
(  429)              if (upshift .eq. -2) then
(  430)                 if (akprl .lt. akprl_min) then
(  431) 		    xkprln = akprl_min * sgn_kprl
(  432) 		end if 
(  433)              end if		     
(  434) 	     	     
(  435) 
(  436)              y0 = 1.5
(  437)              y = y0
(  438) 	     
(  439)       
(  440)              l = 1






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 9

(  441) 	     if(xkprln .eq. 0)xkprln = 1.0e-06
(  442)              gammab = abs(l * omgc / (2.0 * alpha * xkprln**2)  &
(  443)      &                                    * gradprlb / bmod)
(  444) 
(  445)              if(xm .eq. xme)gammab = 0.0
(  446) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
(  447)              if(abs(gammab) .lt. .01)gammab = .01
(  448) 
(  449) 
(  450)              if(sgn_kprl .ge. 0.0)then
(  451)                 fgam = 1.0
(  452) 
(  453)                 if(gammab .gt. 1.0e-05)then
(  454)                    y = y0
(  455)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
(  456)      &               / (2. * gammab * y)
(  457)                 endif
(  458) 
(  459)                 xkprl_eff = xkprln / fgam 
(  460) 
(  461)              end if
(  462) 
(  463) 
(  464)              if(sgn_kprl .lt. 0.0)then
(  465)                 fgam = 1.0
(  466) 
(  467)                 if(gammab .gt. 1.0e-05)then
(  468)                    descrim = 1. - 4. * gammab * y0
(  469)                    if (descrim .ge. 0.0) y =   y0
(  470)                    if (descrim .lt. 0.0) y = - y0
(  471)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
(  472)      &                / (2. * gammab * y)
(  473)                 endif
(  474) 
(  475)                 xkprl_eff = xkprln / fgam 
(  476) 
(  477)              end if
(  478) 
(  479)              if (upshift .ne. 0) xkprln = xkprl_eff
(  480) 	     
(  481) 	
(  482)              NPARA_sav(n, m) = xkprln * C * WI
(  483) 
(  484)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
(  485)              xkperpni = 1.0 / xkperpn
(  486) 	
(  487)              cosbeta_n_m = xkrhon * xkperpni
(  488)              sinbeta_n_m  = xketan * xkperpni
(  489)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m )
(  490) 	  
(  491)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
(  492) 	  
(  493)              i = int((zeta0 - zetamin) * dzetai) + 1
(  494)              p = (zeta0 - zetai(i)) * dzetai
(  495)              A1 = 0.5 * P * (P - 1.)
(  496)              A2 = 1. - P * P
(  497)              A3 = 0.5 * P * (P + 1.)
(  498) 	  






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 10

(  499)              do iharm = -NHARM - 1, NHARM + 1
(  500) 	  
(  501)                 Jn(iharm, n, m) = Jni(iharm, i)    &
(  502)      &   	   + p * (Jni(iharm, i + 1) - Jni(iharm, i))
(  503)                 if(i .ne. 1 )then
(  504)                    Jn(iharm, n, m) = A1 * Jni(iharm, i - 1)     &
(  505)      &                             + A2 * Jni(iharm, i)         &
(  506)      &                             + A3 * Jni(iharm, i + 1)
(  507)                 end if
(  508) 	      
(  509)              end do
(  510) 	  
(  511)           end do
(  512)        end do
(  513)     
(  514) 
(  515)     end if
(  516)                     
(  517) 
(  518)     ! ------------------------ !
(  519)     ! ---Sum over harmonics--- !
(  520)     ! ------------------------ !
(  521)     
(  522)     sum_wdot = 0.0   
(  523)            
(  524)     do IHARM = -NHARM, NHARM
(  525)     
(  526)        l = iharm
(  527) 
(  528)        sum2_1 = 0.0
(  529)        sum2_2 = 0.0
(  530)        sum2_3 = 0.0
(  531)        
(  532)        sum1_1 = 0.0
(  533)        sum1_2 = 0.0
(  534)        sum1_3 = 0.0
(  535)        sum1_4 = 0.0             
(  536)        
(  537)        call zpow((nkx2-nkx1+1)*(nky2-nky1+1), zbeta, iharm, zbeta_iharm) 
(  538)               
(  539)       ! ------------------------------- !
(  540)       ! ---Sum over all Fourier modes-- !
(  541)       ! --------------------------------!
(  542)        do n = nkx1, nkx2
(  543)           do m = nky1, nky2
(  544)              cexp0 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m)
(  545) 	     cexp1 = cexp0 * zbeta(n,m)
(  546) 	     cexp2 = cexp0 / zbeta(n,m)
(  547) 		
(  548)              epsx = isq2 * (ealphak(n, m) - zi * ebetak(n, m)) * cexp1
(  549)              epsy = isq2 * (ealphak(n, m) + zi * ebetak(n, m)) * cexp2
(  550)              epsz = ebk(n, m) * cexp0
(  551) 	     
(  552)              sum2_1 = sum2_1 + conjg(epsx) * Jn(IHARM + 1, n, m)
(  553)              sum2_2 = sum2_2 + conjg(epsy) * Jn(IHARM - 1, n, m)
(  554)              sum2_3 = sum2_3 + conjg(epsz) * Jn(IHARM, n, m) * SQ2
(  555) 	     
(  556) !            ---------------------------------






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 11

(  557) !            Calculate zetal and gammab
(  558) !            ---------------------------------            
(  559) 
(  560)              xkprln   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  561) 	     
(  562)              NPARA_sav(n, m) = xkprln * C * WI	     
(  563) 	     
(  564) 	     sgn_kprl = sign(1.0, xkprln)	     	     
(  565) 	     
(  566)              dkprldl = xkxsav(n) * bhatgradbx             &
(  567)      &               + xkysav(m) * bhatgradby             &
(  568)      &               + xkphi     * bhatgradbz	     
(  569) 	     
(  570) 	     dKdL_giv = (alpha / omgrf)**2 * dkprldl	    
(  571) 
(  572) 	     if (rho .gt. 1.0) then
(  573)                 zetal = (omgrfc - l * omgc) / (xkprln * alpha)
(  574)              else
(  575)                 zetal = (omgrf  - l * omgc) / (xkprln * alpha)
(  576)              end if	
(  577) 
(  578)              gammab = 0.0
(  579)       	     
(  580) !             call z_approx(sgn_kprl, zetal, gammab, z0, z1, z2)		         
(  581) 	     
(  582) 
(  583)              call z_approx_e(sgn_kprl, zetal, gammab,   &
(  584)      &           z0_new, z1_new, z2_new, zetai_table,         &
(  585)      &           dKdL_table, z0_table, z1_table, z2_table,    &
(  586)      &           dKdL_giv, nmax, mmax, ntable, mtable)
(  587)              z0 = z0_new
(  588)              z1 = z1_new
(  589)              z2 = z2_new
(  590) 	     	     
(  591) 
(  592)  
(  593) 	     sum1_1 = sum1_1 + (Jn(IHARM + 1, n, m) * epsx    &
(  594)      &                       +  Jn(IHARM - 1, n, m) * epsy)   &
(  595)      &                       * SQMUT0 / abs(NPARA_sav(n, m)) * z0
(  596)      
(  597) 	     sum1_2 = sum1_2 + SQ2 * Jn(IHARM, n, m) * epsz    &
(  598)      &                       * SQMUT0 / abs(NPARA_sav(n, m)) * z1
(  599)      
(  600) 	     sum1_3 = sum1_3 + SQ2 * (Jn(IHARM + 1, n, m) * epsx    & 
(  601)      &                             +  Jn(IHARM - 1, n, m) * epsy)   &
(  602)      &                       * SQMUT0 / abs(NPARA_sav(n, m)) * z1          
(  603)                
(  604)              sum1_4 = sum1_4 + 2.0 * Jn(IHARM, n, m) * epsz          & 
(  605)      &                       * SQMUT0 / abs(NPARA_sav(n, m)) * z2
(  606)      
(  607)      	     	     		     
(  608)           end do  !  end of sum over ky
(  609)        end do     !  end of sum over kx
(  610) 
(  611) 
(  612) 
(  613)        term1 = sum2_1 * sum1_1 + sum2_2 * sum1_1 
(  614)        term2 = sum2_1 * sum1_2 + sum2_2 * sum1_2 






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 12

(  615)        term3 = sum2_3 * sum1_3
(  616)        term4 = sum2_3 * sum1_4 
(  617)        
(  618)        sum_wdot = sum_wdot + uperpk**3 * term1          &
(  619)      &                     + uperpk**2 * term2          &
(  620)      &                     + uperpk**2 * term3          &
(  621)      &                     + uperpk    * term4   
(  622)                            
(  623)     end do  ! end of sum over harmonics
(  624)     
(  625) !    if (ip .eq. 80 .and. jp .eq. 90) then
(  626) !       write(6, *) "dKdL_giv = ", dKdL_giv 
(  627) !       write(6, *) "sum_wdot = ", sum_wdot
(  628) !    end if
(  629) 
(  630)     deallocate( zbeta )
(  631)     deallocate( zbeta_iharm )
(  632)     
(  633)     deallocate(nres )
(  634)     deallocate(mres )
(  635) 
(  636)     deallocate(zetai)
(  637)     deallocate(Jni)
(  638)     deallocate(Jn)    
(  639)     deallocate(NPARA_sav)
(  640)     
(  641)     
(  642)     deallocate(sumb_11)
(  643)     deallocate(sumb_31)
(  644)     
(  645)     deallocate(sumc_11)
(  646)     deallocate(sumc_31) 
(  647)     
(  648)     deallocate(sume_11)
(  649)     deallocate(sume_31)
(  650)     
(  651)     deallocate(sumf_11)
(  652)     deallocate(sumf_31)      
(  653)     
(  654)     deallocate( is_resonance_nm )
(  655)     
(  656)     return
(  657) 
(  658)   end subroutine QLSUM_MAXWELLIAN_z2_ion
(  659) 
(  660) 
(  661) !
(  662) !*************************************************************************
(  663) !
(  664) 
(  665) 	subroutine zpow(n, z, iharm, zout )
(  666) 	implicit none
(  667) 	integer n, iharm
(  668) 	complex z(n), zout(n)
(  669) 
(  670) 	integer i,ipow
(  671) 	complex one, zero
(  672)         complex zin






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 13

(  673) 
(  674)         integer nharm
(  675)         logical isodd
(  676)         intrinsic mod
(  677) 
(  678)         logical use_zdiv
(  679)         parameter(use_zdiv=.true.)
(  680) 
(  681)         integer nb
(  682)         parameter(nb=1024*4*4)
(  683)         complex zk(nb)
(  684)         integer istart,iend,isize
(  685) 
(  686)         one = 1.0d0
(  687)         zero = 0.0d0
(  688) 
(  689)         if (iharm.eq.0) then
(  690)              do i=1,n
(  691)                 zout(i) = one
(  692)              enddo
(  693)              return
(  694)         endif
(  695) 
(  696) 
(  697)         do istart=1,n,nb
(  698) 
(  699)            iend = min(n,istart+nb-1)
(  700)            isize = iend-istart+1
(  701) 
(  702) 	  do i=1,isize
(  703) 	    zout(istart-1+i) = one
(  704)           enddo
(  705) 
(  706) 
(  707)          do i=1,isize
(  708)            zk(i) = z(istart-1+i)
(  709)          enddo
(  710) 
(  711)         nharm = abs(iharm)
(  712)         do while (nharm .gt. 0)
(  713)            isodd = (mod(nharm,2).eq.1)
(  714)            if (isodd) then
(  715)                do i=1,isize
(  716)                  zout(istart-1+i) = zout(istart-1+i) * zk(i)
(  717)                enddo
(  718)            endif
(  719)            do i=1,isize
(  720)               zk(i) = zk(i) * zk(i)
(  721)            enddo
(  722)            nharm = int( nharm/2 )
(  723)         enddo
(  724) 
(  725) 
(  726) 
(  727) 	if (iharm.lt.0) then
(  728)            if (use_zdiv) then
(  729) 	     do i=1,isize
(  730)                 zin = zout(istart-1+i)






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 14

(  731)                 call zdiv( zin, zout(istart-1+i) )
(  732)             enddo
(  733)            else
(  734)              do i=1,isize
(  735)                 zin = zout(istart-1+i)
(  736)                 zout(istart-1+i) = one/zin
(  737)              enddo
(  738)            endif
(  739)         endif
(  740) 
(  741)         enddo
(  742) 
(  743) 	return
(  744) 	end subroutine 
(  745) 	
(  746) !
(  747) !*************************************************************************
(  748) !
(  749) 
(  750)         subroutine zdiv( zin, zout )
(  751)         implicit none
(  752)         complex zin, zout
(  753)         real a, b
(  754)         real d
(  755) 
(  756)         real one
(  757)         parameter(one=1.0d0)
(  758)         real rd, a_over_b, b_over_a
(  759) 
(  760) 
(  761)         a = real(zin)
(  762)         b = aimag(zin)
(  763) 
(  764) !       z = (a + i * b)
(  765) !       1/z =  a/(a^2 + b^2) - i * b/(a^2 + b^2)
(  766) !
(  767) !       or    1/(a + (b/a)*b) - i * (b/a) / (a + (b/a)*b)
(  768) !       or    (a/b)/( (a/b)*a + b ) - i * 1/( (a/b)*a + b )
(  769) !        
(  770)         if (abs(a).gt.abs(b)) then
(  771)             b_over_a = b/a
(  772)             d = a + (b_over_a)*b
(  773)             rd = one/d
(  774)             zout = cmplx( rd, -(b_over_a)*rd )
(  775)         else
(  776)             a_over_b = a/b
(  777)             d = (a_over_b)*a + b
(  778)             rd = one/d
(  779)             zout = cmplx( (a_over_b)*rd, -rd )
(  780)         endif
(  781) 
(  782)         return
(  783)         end subroutine
(  784) 	
(  785) 
(  786) 
(  787) !
(  788) !*************************************************************************






PGF90 (Version     14.2)          06/02/2015  11:57:31      page 15

(  789) !	
(  790) 
(  791) 
(  792)          end module wdoti_sum_mod	 
(  793) 	 
(  794) 
