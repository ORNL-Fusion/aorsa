


PGF90 (Version      9.0)          02/05/2010  11:44:18      page 1

Switches: -noasm -nodclchk -nodebug -nodlines -noline -list
          -idir /global/homes/j/jaegeref/AORSA2D/02-29-2008_AORSA-CQL_EQDSK14_FRANKLIN/src/CQL3D_SETUP
          -idir /global/homes/j/jaegeref/AORSA2D/02-29-2008_AORSA-CQL_EQDSK14_FRANKLIN/src/CQL3D_SETUP
          -idir /usr/common/usg/netcdf/3.6.1/include/
          -idir /opt/mpt/3.5.0/xt/mpich2-pgi/include
          -idir /opt/xt-libsci/10.4.0/pgi/lib
          -idir /opt/xt-libsci/10.4.0/pgi/include
          -idir /opt/mpt/3.5.0/xt/sma/include
          -idir /opt/mpt/3.5.0/xt/pmi/include
          -idir /opt/xt-pe/2.1.50HDB_PS13A/include
          -inform severe -opt 2 -save -object -noonetrip
          -depchk on -nostandard     
          -nosymbol -noupcase    

Filename: /global/homes/j/jaegeref/AORSA2D/02-29-2008_AORSA-CQL_EQDSK14_FRANKLIN/src/qlsum_test.f

(    1)   	module qlsum_myra_mod
(    2)          contains
(    3) !module METS2AORSA_MYRA
(    4) 
(    5) !  private
(    6) !  public::  GET_WMAT_MYRA, intplt1d, WINTERP1D_3
(    7) 
(    8) !contains
(    9) 
(   10) !
(   11) !*************************************************************************
(   12) !
(   13)     subroutine QLSUM_MAXWELLIAN(k_uper, b_sum, c_sum, e_sum, f_sum, &
(   14)        & sum_wdot, sum_fx0, sum_fy0, W, ZSPEC, ASPEC, BMAG, &
(   15)        & lmax, ENORM, UPARMIN, UPARMAX, &
(   16)        & NUPAR, NUPER, UPER, UPAR, DFDUPER, DFDUPAR,  &
(   17)        & ealphak, ebetak, ebk, nkdim1, nkdim2, mkdim1, mkdim2,   &
(   18)        & nkx1, nkx2, nky1, nky2, &
(   19)        & uxx, uxy, uxz, &
(   20)        & uyx, uyy, uyz, &
(   21)        & uzx, uzy, uzz, &
(   22)        & nxdim, nydim, xkxsav, xkysav, xkphi, xx, yy, i_global, j_global, &
(   23)        & lmaxdim, ndist, nzeta, &
(   24)        & gradprlb, bmod, omgc, alpha, xm, upshift)
(   25) 
(   26)     implicit none
(   27) 
(   28)     integer i_global, j_global, ier, nxdim, nydim, k, lmaxdim, ndist
(   29)     integer, intent(IN):: NUPAR, NUPER, lmax
(   30)     integer nkx1, nkx2, nky1, nky2, j_upar, k_uper, l
(   31)     integer nkdim1, nkdim2, mkdim1, mkdim2
(   32)     integer:: NHARM, IHARM, M, N, i, nzeta
(   33)     integer i_uprl, upshift
(   34)     integer ires, iresmax
(   35) 
(   36)     complex, dimension(:,:), allocatable :: zbeta
(   37)     complex, dimension(:,:), allocatable :: zbeta_iharm
(   38)     
(   39)     real  y, y0, alpha, xm, akprl, sgn_kprl, omgc, bmod, xkprl_eff,  &
(   40)    &   descrim, xme, fgam, gradprlb, gammab
(   41) 
(   42)     real  uxx, uxy, uxz, uyx, uyy, uyz, uzx, uzy, uzz
(   43)     real  xkphi, sinth, factc, facte, factf, sinth_inv






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 2

(   44)     real  xkxsav(nkdim1 : nkdim2), xkysav(mkdim1 : mkdim2)
(   45)     real  xkperpn, xkperpni, xkrhon, xketan, xkbn, beta
(   46)     real, intent(IN):: W, ZSPEC, ASPEC, BMAG
(   47)     real, intent(IN):: ENORM, UPARMIN, UPARMAX
(   48)     real, dimension(NUPER), intent(IN):: UPER
(   49)     real, dimension(NUPAR), intent(IN):: UPAR
(   50)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER, DFDUPAR
(   51)     real:: W2, WCW, RRP, RRM, WC, WCI
(   52)     real:: MUT0, SQMUT0, PISQMUT0, SQMUT0I, KPARA1, NPARA1
(   53)     real:: ISQ2, SQ2, NWCW, DFACTPAR, DFACTPER, U0
(   54)     real:: UPAR0, dfdupar0, dfduper0, du, dui, p 
(   55)     real:: time, t1, tmsec, second1, dummy, WI, uperpk, uperpk2
(   56)     real:: dzeta, dzetai, zetamax, zetamin, zeta0, zetamax1, zetamax2
(   57)     real:: A1, A2, A3, u
(   58)     real:: temp1, temp2, temp3, factor
(   59)     real:: temp1w, temp2w, temp3w
(   60)     
(   61)     real, dimension(:),     allocatable :: zetai
(   62)     real, dimension(:,:),   allocatable :: Jni
(   63)     real, dimension(:,:,:), allocatable :: Jn
(   64)     real, dimension(:,:),   allocatable :: NPARA_sav
(   65)     
(   66)     integer, dimension(:),  allocatable :: nres
(   67)     integer, dimension(:),  allocatable :: mres
(   68)         
(   69)     complex, dimension(:),  allocatable :: sumb_11
(   70)     complex, dimension(:),  allocatable :: sumb_31
(   71)      
(   72)     complex, dimension(:),  allocatable :: sumc_11
(   73)     complex, dimension(:),  allocatable :: sumc_31
(   74)     
(   75)     complex, dimension(:),  allocatable :: sume_11
(   76)     complex, dimension(:),  allocatable :: sume_31
(   77)      
(   78)     complex, dimension(:),  allocatable :: sumf_11
(   79)     complex, dimension(:),  allocatable :: sumf_31
(   80)     
(   81)     complex sumf_11_nm
(   82)     complex sumf_31_nm
(   83) 
(   84)     complex sume_11_nm
(   85)     complex sume_31_nm
(   86)        
(   87)     complex sumc_11_nm
(   88)     complex sumc_31_nm
(   89)        
(   90)     complex sumb_11_nm
(   91)     complex sumb_31_nm
(   92)  
(   93)     logical, dimension(:,:), allocatable :: is_resonance_nm      
(   94) 
(   95)     complex epsx, epsy, epsz
(   96)     complex ealphak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(   97)     &        ebetak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(   98)     &           ebk(nkdim1 : nkdim2, mkdim1 : mkdim2)
(   99)     complex cexpkx, cexpky, zi, zeta
(  100) 
(  101)     complex xx(nkdim1 : nkdim2, 1 : nxdim),   &






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 3

(  102)      &      yy(mkdim1 : mkdim2, 1 : nydim)
(  103) 
(  104)     complex cexpn, cexpnp1, cexpnm1, cexp11
(  105) 
(  106)     complex cexp1, cexp2, cexp0
(  107)     complex sumwdot_11_nm, sumwdot_31_nm
(  108)     
(  109)     complex sumwdot_11, sumwdot_31
(  110)     complex sumwdotkx_11, sumwdotkx_31
(  111)     complex sumwdotky_11, sumwdotky_31
(  112) 	
(  113)     complex sum2_1, sum2_2, sum2_3
(  114)     complex sumkx2_1, sumkx2_2, sumkx2_3 
(  115)     complex sumky2_1, sumky2_2, sumky2_3        
(  116)     
(  117)     complex b_sum(nupar), c_sum(nupar), e_sum(nupar), f_sum(nupar)
(  118)     complex sum_wdot, sum_fx0, sum_fy0
(  119)     complex b(100)
(  120) 
(  121)     real, parameter::  EOVERAMU = 9.58084e7
(  122)     real, parameter:: MPC2 = 938271998.38
(  123)     real, parameter:: C = 2.99792458e8
(  124)     real, parameter:: PI = 3.141592653597932384
(  125)     real :: cosbeta_n_m, sinbeta_n_m
(  126)     
(  127)     
(  128)     allocate( zbeta(nkx1:nkx2,nky1:nky2) )
(  129)     allocate( zbeta_iharm(nkx1:nkx2,nky1:nky2) )
(  130) 
(  131)     allocate(zetai(nzeta + 1) )
(  132)     allocate(Jni(-lmaxdim : lmaxdim, nzeta + 1) )
(  133)     allocate( Jn(-lmaxdim : lmaxdim, nkdim1 : nkdim2, mkdim1 : mkdim2))    
(  134)     allocate(NPARA_sav(nkdim1 : nkdim2, mkdim1 : mkdim2) ) 
(  135)     
(  136)     allocate(nres(nxdim * nydim) )
(  137)     allocate(mres(nxdim * nydim) )
(  138)     
(  139)     allocate(sumb_11(nupar))
(  140)     allocate(sumb_31(nupar))
(  141)      
(  142)     allocate(sumc_11(nupar))
(  143)     allocate(sumc_31(nupar))
(  144)     
(  145)     allocate(sume_11(nupar))
(  146)     allocate(sume_31(nupar))
(  147)      
(  148)     allocate(sumf_11(nupar))
(  149)     allocate(sumf_31(nupar))
(  150) 
(  151)     allocate(is_resonance_nm(nkx1:nkx2,nky1:nky2))
(  152) 
(  153) !   -------------------------------------
(  154) !   initialize allocatable arrays to zero
(  155) !   -------------------------------------
(  156) 
(  157)     zbeta = 0.0
(  158)     zbeta_iharm = 0.0
(  159) 






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 4

(  160)     sumf_11_nm = 0.0
(  161)     sumf_31_nm = 0.0
(  162) 
(  163)     sume_11_nm = 0.0
(  164)     sume_31_nm = 0.0
(  165)     
(  166)     sumc_11_nm = 0.0
(  167)     sumc_31_nm = 0.0
(  168)     
(  169)     sumb_11_nm = 0.0
(  170)     sumb_31_nm = 0.0
(  171) 
(  172)     is_resonance_nm = .false.
(  173) 
(  174)     zetai = 0.0
(  175)     Jni = 0.0
(  176)     NPARA_sav = 0.0
(  177) 
(  178)     sumb_11 = 0.0
(  179)     sumb_31 = 0.0
(  180)       
(  181)     sumc_11 = 0.0
(  182)     sumc_31 = 0.0
(  183) 
(  184)     sume_11 = 0.0
(  185)     sume_31 = 0.0
(  186) 
(  187)     sumf_11 = 0.0
(  188)     sumf_31 = 0.0    
(  189)     
(  190)     xme = 9.11e-31
(  191)     zi = cmplx(0., 1.)
(  192)     
(  193)     uperpk = uper(k_uper)
(  194)     uperpk2 = uperpk**2
(  195) 
(  196)     W2 = W * W
(  197)     WI = 1.0 / W
(  198) 
(  199)     WCW = BMAG * ZSPEC * EOVERAMU / ASPEC / W
(  200)     WC = WCW * W
(  201)     WCI = 1.0 /WC
(  202) 
(  203)     MUT0 = 0.5 * MPC2 * ASPEC / ENORM
(  204)     SQMUT0 = SQRT(MUT0)
(  205)     SQMUT0I = 1.0 / SQMUT0
(  206)     PISQMUT0 = SQMUT0 * pi
(  207) 
(  208)     ISQ2 = SQRT(0.5)
(  209)     SQ2 = SQRT(2.0)
(  210)     NHARM = lmax
(  211)     
(  212)     du = (upar(nupar) - upar(1)) / (nupar - 1)
(  213)     dui = 1.0 / du
(  214)     
(  215)     if(nzeta .eq. 1)then
(  216)     
(  217)     ! -------------------------------------------------------- !






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 5

(  218)     ! ---Don't interpolate: precalculate all Bessel functions- !
(  219)     ! -------------------------------------------------------- !
(  220) 
(  221)        do n = nkx1, nkx2
(  222)           do m = nky1, nky2
(  223) 
(  224)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  225)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  226)              xkbn   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  227) 	     
(  228)             ! ------------------------------------
(  229)             ! Optional: leave out upshift in xkprl
(  230)             ! --------------------------------- --          
(  231)               if(upshift .eq. 0)xkbn = uzz * xkphi
(  232) 	     
(  233) 	     
(  234) 	     sgn_kprl = sign(1.0, xkbn)
(  235)              akprl = abs(xkbn)
(  236) 
(  237)              y0 = 1.5
(  238)              y = y0
(  239) 	     
(  240)       
(  241)              l = 1
(  242) 	     if(xkbn .eq. 0)xkbn = 1.0e-06
(  243)              gammab = abs(l * omgc / (2.0 * alpha * xkbn**2)  &
(  244)      &                                    * gradprlb / bmod)
(  245) 
(  246)              if(xm .eq. xme)gammab = 0.0
(  247) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
(  248)              if(abs(gammab) .lt. .01)gammab = .01
(  249) 
(  250) 
(  251)              if(sgn_kprl .ge. 0.0)then
(  252)                 fgam = 1.0
(  253) 
(  254)                 if(gammab .gt. 1.0e-05)then
(  255)                    y = y0
(  256)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
(  257)      &               / (2. * gammab * y)
(  258)                 endif
(  259) 
(  260)                 xkprl_eff = xkbn / fgam 
(  261) 
(  262)              end if
(  263) 
(  264) 
(  265)              if(sgn_kprl .lt. 0.0)then
(  266)                 fgam = 1.0
(  267) 
(  268)                 if(gammab .gt. 1.0e-05)then
(  269)                    descrim = 1. - 4. * gammab * y0
(  270)                    if (descrim .ge. 0.0) y =   y0
(  271)                    if (descrim .lt. 0.0) y = - y0
(  272)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
(  273)      &                / (2. * gammab * y)
(  274)                 endif
(  275) 






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 6

(  276)                 xkprl_eff = xkbn / fgam 
(  277) 
(  278)              end if
(  279) 
(  280)              xkbn = xkprl_eff	     
(  281) 	
(  282)              NPARA_sav(n, m) = xkbn * C / W
(  283) 
(  284)              xkperpn = sqrt(xkrhon**2 + xketan**2)
(  285)              if(xkperpn .eq. 0.0)xkperpn = 1.0e-08
(  286) 	
(  287)              cosbeta_n_m  = xkrhon / xkperpn
(  288)              sinbeta_n_m  = xketan / xkperpn
(  289)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m  )
(  290) 
(  291)              zeta = xkperpn * uper(k_uper) * c * sqmut0i / wc
(  292) 
(  293)              call besjc(zeta, nharm + 2, b, ier)
(  294)              if(ier .ne. 0) write(6, *) "ier = ", ier
(  295) 
(  296)              do IHARM = 0, NHARM + 1
(  297)                 Jn(iharm,  n, m) = b(iharm + 1)
(  298)                 Jn(-iharm, n, m) = (-1.0)**iharm * Jn(iharm, n, m)
(  299)              end do
(  300) 
(  301)           end do
(  302)        end do
(  303)     
(  304)     else
(  305)     
(  306)         
(  307)        ! -------------------------------------- !
(  308)        ! ---Interpolate; calculate zeta mesh -- !
(  309)        ! -------------------------------------- !
(  310)     
(  311)        zetamax = 0.0
(  312)        zetamin = 0.0
(  313)     
(  314)        do n = nkx1, nkx2
(  315)           do m = nky1, nky2
(  316) 
(  317)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  318)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  319)              xkbn   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  320) 
(  321)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
(  322) 	
(  323)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
(  324) 	  
(  325)              if (zeta0 .gt. zetamax) zetamax = zeta0
(  326)              if (zeta0 .lt. zetamin) zetamin = zeta0
(  327)           end do
(  328)        end do
(  329)     
(  330) 
(  331)         if(zetamax .eq. zetamin)then
(  332)           zetamax =  1.0e-06
(  333)           zetamin = -1.0e-06






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 7

(  334)        end if
(  335) 
(  336)        dzeta = (zetamax - zetamin) / (nzeta - 1)
(  337)        dzetai = 1.0 / dzeta
(  338)     
(  339)        ! ------------------------------------------------- !
(  340)        ! ---Pre-calculate Bessel functions on zeta mesh -- !
(  341)        ! ------------------------------------------------- !
(  342) 	  
(  343)        do i = 1, nzeta + 1
(  344)           zetai(i) = zetamin + (i - 1) * dzeta
(  345)           zeta = cmplx(zetai(i), 0.0)
(  346) 	  
(  347)           call besjc(zeta, nharm + 2, b, ier)
(  348) !          if(ier .ne. 0) write(6, *) "ier = ", ier
(  349) 	  
(  350)           do iharm = 0, NHARM + 1
(  351)              Jni(iharm,  i) = b(iharm + 1)
(  352)              Jni(-iharm, i) = (-1.0)**iharm * b(iharm + 1)
(  353)           end do
(  354)        end do
(  355)      
(  356) 
(  357)        ! --------------------------------- !
(  358)        ! ---Interpolate Bessel functions-- !
(  359)        ! --------------------------------- !
(  360) 
(  361)        do n = nkx1, nkx2
(  362)           do m = nky1, nky2
(  363) 
(  364)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  365)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  366)              xkbn   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  367) 	     
(  368) 	    ! ------------------------------------
(  369)             ! Optional: leave out upshift in xkprl
(  370)             ! --------------------------------- --          
(  371)               if(upshift .eq. 0)xkbn = uzz * xkphi
(  372) 	     
(  373) 	     sgn_kprl = sign(1.0, xkbn)
(  374)              akprl = abs(xkbn)
(  375) 
(  376)              y0 = 1.5
(  377)              y = y0
(  378) 	     
(  379)       
(  380)              l = 1
(  381) 	     if(xkbn .eq. 0)xkbn = 1.0e-06
(  382)              gammab = abs(l * omgc / (2.0 * alpha * xkbn**2)  &
(  383)      &                                    * gradprlb / bmod)
(  384) 
(  385)              if(xm .eq. xme)gammab = 0.0
(  386) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
(  387)              if(abs(gammab) .lt. .01)gammab = .01
(  388) 
(  389) 
(  390)              if(sgn_kprl .ge. 0.0)then
(  391)                 fgam = 1.0






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 8

(  392) 
(  393)                 if(gammab .gt. 1.0e-05)then
(  394)                    y = y0
(  395)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
(  396)      &               / (2. * gammab * y)
(  397)                 endif
(  398) 
(  399)                 xkprl_eff = xkbn / fgam 
(  400) 
(  401)              end if
(  402) 
(  403) 
(  404)              if(sgn_kprl .lt. 0.0)then
(  405)                 fgam = 1.0
(  406) 
(  407)                 if(gammab .gt. 1.0e-05)then
(  408)                    descrim = 1. - 4. * gammab * y0
(  409)                    if (descrim .ge. 0.0) y =   y0
(  410)                    if (descrim .lt. 0.0) y = - y0
(  411)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
(  412)      &                / (2. * gammab * y)
(  413)                 endif
(  414) 
(  415)                 xkprl_eff = xkbn / fgam 
(  416) 
(  417)              end if
(  418) 
(  419)              xkbn = xkprl_eff
(  420) 	     
(  421) 	
(  422)              NPARA_sav(n, m) = xkbn * C * WI
(  423) 
(  424)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
(  425)              xkperpni = 1.0 / xkperpn
(  426) 	
(  427)              cosbeta_n_m = xkrhon * xkperpni
(  428)              sinbeta_n_m  = xketan * xkperpni
(  429)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m )
(  430) 	  
(  431)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
(  432) 	  
(  433)              i = int((zeta0 - zetamin) * dzetai) + 1
(  434)              p = (zeta0 - zetai(i)) * dzetai
(  435)              A1 = 0.5 * P * (P - 1.)
(  436)              A2 = 1. - P * P
(  437)              A3 = 0.5 * P * (P + 1.)
(  438) 	  
(  439)              do iharm = -NHARM - 1, NHARM + 1
(  440) 	  
(  441)                 Jn(iharm, n, m) = Jni(iharm, i)    &
(  442)      &   	   + p * (Jni(iharm, i + 1) - Jni(iharm, i))
(  443)                 if(i .ne. 1 )then
(  444)                    Jn(iharm, n, m) = A1 * Jni(iharm, i - 1)     &
(  445)      &                             + A2 * Jni(iharm, i)         &
(  446)      &                             + A3 * Jni(iharm, i + 1)
(  447)                 end if
(  448) 	      
(  449)              end do






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 9

(  450) 	  
(  451)           end do
(  452)        end do
(  453)     
(  454) 
(  455)     end if
(  456)                     
(  457) 
(  458)     ! ------------------------ !
(  459)     ! ---Sum over harmonics--- !
(  460)     ! ------------------------ !
(  461)     
(  462)     sum_wdot = 0.0
(  463)     sum_fx0  = 0.0
(  464)     sum_fy0  = 0.0    
(  465)     
(  466)     b_sum = 0.0
(  467)     c_sum = 0.0
(  468)     e_sum = 0.0
(  469)     f_sum = 0.0
(  470)        
(  471)     do IHARM = -NHARM, NHARM
(  472) 
(  473)        NWCW = real(IHARM) * WCW
(  474)        
(  475)        sumb_11 = 0.0
(  476)        sumb_31 = 0.0
(  477) 	  
(  478)        sumc_11 = 0.0
(  479)        sumc_31 = 0.0	
(  480) 	  
(  481)        sume_11 = 0.0
(  482)        sume_31 = 0.0
(  483) 	  
(  484)        sumf_11 = 0.0
(  485)        sumf_31 = 0.0	  
(  486) 	          
(  487)        sumwdot_11 = 0.0
(  488)        sumwdot_31 = 0.0       
(  489)        
(  490)        sumwdotkx_11 = 0.0
(  491)        sumwdotkx_31 = 0.0
(  492)        
(  493)        sumwdotky_11 = 0.0
(  494)        sumwdotky_31 = 0.0       
(  495) 
(  496)        sum2_1 = 0.0
(  497)        sum2_2 = 0.0
(  498)        sum2_3 = 0.0
(  499)        
(  500)        sumkx2_1 = 0.0
(  501)        sumkx2_2 = 0.0
(  502)        sumkx2_3 = 0.0
(  503)        
(  504)        sumky2_1 = 0.0
(  505)        sumky2_2 = 0.0
(  506)        sumky2_3 = 0.0       
(  507)        






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 10

(  508)        call zpow((nkx2-nkx1+1)*(nky2-nky1+1), zbeta, iharm, zbeta_iharm) 
(  509)        
(  510)        ! ----------------------- !
(  511)        ! ---Find resonant modes--!
(  512)        ! ----------------------- !
(  513)        ires = 0
(  514)        do n = nkx1, nkx2
(  515)           do m = nky1, nky2     
(  516)              ! ------------------------ !
(  517)              ! -- Resonance relation -- !
(  518)              ! ------------------------ !
(  519)              RRP = 1.0 - NWCW - NPARA_sav(n, m) * UPARMAX * SQMUT0i
(  520)              RRM = 1.0 - NWCW - NPARA_sav(n, m) * UPARMIN * SQMUT0i
(  521) 
(  522)              is_resonance_nm(n,m) = (RRP * RRM .le. 0.0)
(  523)              if (is_resonance_nm(n,m)) then
(  524) 	         ires = ires + 1
(  525) 	         nres(ires) = n
(  526) 		 mres(ires) = m
(  527) 	     end if
(  528) 	  end do
(  529)        end do
(  530)        iresmax = ires     
(  531) 
(  532)       ! ---------------------------- !
(  533)       ! ---Sum over resonant modes-- !
(  534)       ! ---------------------------- !
(  535) 
(  536)        do ires = 1, iresmax
(  537)           n = nres(ires)
(  538) 	  m = mres(ires)
(  539) 	                                                 
(  540)           cexp1 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) * zbeta(n,m)
(  541)           cexp2 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) / zbeta(n,m)
(  542)           cexp0 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m)
(  543) 		
(  544)           epsx = isq2 * (ealphak(n, m) - zi * ebetak(n, m)) * cexp1
(  545)           epsy = isq2 * (ealphak(n, m) + zi * ebetak(n, m)) * cexp2
(  546)           epsz = ebk(n, m) * cexp0
(  547) 	     
(  548)           sum2_1 = sum2_1 + conjg(epsx) * Jn(IHARM + 1, n, m)
(  549)           sum2_2 = sum2_2 + conjg(epsy) * Jn(IHARM - 1, n, m)
(  550)           sum2_3 = sum2_3 + conjg(epsz) * Jn(IHARM, n, m)
(  551) 	     
(  552) 	  sumkx2_1 = sumkx2_1 + xkxsav(n) * conjg(epsx) * Jn(IHARM + 1, n, m)
(  553)           sumkx2_2 = sumkx2_2 + xkxsav(n) * conjg(epsy) * Jn(IHARM - 1, n, m)
(  554)           sumkx2_3 = sumkx2_3 + xkxsav(n) * conjg(epsz) * Jn(IHARM, n, m)
(  555) 	     
(  556) 	  sumky2_1 = sumky2_1 + xkysav(m) * conjg(epsx) * Jn(IHARM + 1, n, m)
(  557)           sumky2_2 = sumky2_2 + xkysav(m) * conjg(epsy) * Jn(IHARM - 1, n, m)
(  558)           sumky2_3 = sumky2_3 + xkysav(m) * conjg(epsz) * Jn(IHARM, n, m)	     	     	    
(  559) 
(  560)           UPAR0 = SQMUT0 / NPARA_sav(n, m) * (1. - NWCW)
(  561) 	
(  562) 	  u = sqrt(upar0**2 + uperpk2) + 1.0e-08
(  563)           sinth = uperpk / u + 1.0e-08
(  564) 	  sinth_inv = 1.0 / sinth
(  565) 		






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 11

(  566) 	  facte = (nwcw - sinth**2) /  upar0
(  567) 	
(  568)           i = int((UPAR0 - UPAR(1)) * dui) + 1
(  569) 	  i_uprl = i
(  570)           p = (UPAR0 - UPAR(i)) * dui
(  571) 		
(  572) 	  dfduper0 = dfduper(k_uper, NUPAR)
(  573)           if (i .ne. NUPAR) then
(  574)              dfduper0 = dfduper(k_uper, i) + (dfduper(k_uper, i+1) - dfduper(k_uper, i)) * p
(  575)           end if
(  576) 		
(  577)           U0 = DFDUPER0
(  578) 			
(  579)           factor = PISQMUT0 / abs(NPARA_sav(n, m)) 
(  580) 			
(  581)           sumb_11_nm = UPER(k_uper) * UPER(k_uper)  * Jn(IHARM + 1, n, m) * epsx     &
(  582)      &               + UPER(k_uper) * UPER(k_uper)  * Jn(IHARM - 1, n, m) * epsy     &
(  583)      &               + SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM, n, m)     * epsz
(  584) 
(  585)           sumb_31_nm = SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM + 1, n, m) * epsx     &
(  586)      &               + SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM - 1, n, m) * epsy     &
(  587)      &               + 2.0 * UPAR0 * UPAR0 * Jn(IHARM, n, m)     * epsz
(  588)      
(  589)           sumb_11_nm = sumb_11_nm * factor 
(  590)           sumb_31_nm = sumb_31_nm * factor 
(  591) 				
(  592)           sume_11_nm = sumb_11_nm * facte
(  593)           sume_31_nm = sumb_31_nm * facte
(  594)           
(  595)           sumc_11_nm = sume_11_nm * sinth_inv
(  596)           sumc_31_nm = sume_31_nm * sinth_inv     
(  597)      
(  598)           sumf_11_nm = sumc_11_nm * facte
(  599)           sumf_31_nm = sumc_31_nm * facte
(  600)           		
(  601)           sumwdot_11_nm = sumb_11_nm * u0
(  602)           sumwdot_31_nm = sumb_31_nm * u0	
(  603) 											     
(  604)           sumf_11(i_uprl) = sumf_11(i_uprl) + sumf_11_nm
(  605)           sumf_31(i_uprl) = sumf_31(i_uprl) + sumf_31_nm
(  606) 
(  607)           sume_11(i_uprl) = sume_11(i_uprl) + sume_11_nm
(  608)           sume_31(i_uprl) = sume_31(i_uprl) + sume_31_nm
(  609) 
(  610)           sumc_11(i_uprl) = sumc_11(i_uprl) + sumc_11_nm
(  611)           sumc_31(i_uprl) = sumc_31(i_uprl) + sumc_31_nm
(  612) 
(  613)           sumb_11(i_uprl) = sumb_11(i_uprl) + sumb_11_nm
(  614)           sumb_31(i_uprl) = sumb_31(i_uprl) + sumb_31_nm
(  615) 		
(  616) 	  sumwdot_11 = sumwdot_11 + sumwdot_11_nm
(  617) 	  sumwdot_31 = sumwdot_31 + sumwdot_31_nm
(  618) 		
(  619) 	  sumwdotkx_11 = sumwdotkx_11 + xkxsav(n) * sumwdot_11_nm
(  620) 	  sumwdotkx_31 = sumwdotkx_31 + xkxsav(n) * sumwdot_31_nm	
(  621) 		
(  622) 	  sumwdotky_11 = sumwdotky_11 + xkysav(m) * sumwdot_11_nm
(  623) 	  sumwdotky_31 = sumwdotky_31 + xkysav(m) * sumwdot_31_nm							






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 12

(  624) 		
(  625)        enddo
(  626)        
(  627)        
(  628)        sum_wdot = sum_wdot + sum2_1 * sumwdot_11    &
(  629)      &                     + sum2_2 * sumwdot_11    &
(  630)      &  		   + sum2_3 * sumwdot_31 
(  631)      
(  632)      
(  633)        sum_fx0 = sum_fx0  + sumkx2_1 * sumwdot_11    &
(  634)      &                    + sumkx2_2 * sumwdot_11    &
(  635)      &  		  + sumkx2_3 * sumwdot_31    &
(  636)      &                    + sum2_1 * sumwdotkx_11    &
(  637)      &                    + sum2_2 * sumwdotkx_11    &
(  638)      &  		  + sum2_3 * sumwdotkx_31
(  639)      
(  640)        sum_fy0 = sum_fy0  + sumky2_1 * sumwdot_11    &
(  641)      &                    + sumky2_2 * sumwdot_11    &
(  642)      &  	          + sumky2_3 * sumwdot_31    &
(  643)      &                    + sum2_1 * sumwdotky_11    &
(  644)      &                    + sum2_2 * sumwdotky_11    &
(  645)      &  	          + sum2_3 * sumwdotky_31    
(  646)       
(  647)        
(  648) 
(  649)        do i_uprl = 1, nupar
(  650)           b_sum(i_uprl) = b_sum(i_uprl) + sum2_1 * sumb_11(i_uprl)   &
(  651)      &                                  + sum2_2 * sumb_11(i_uprl)   &
(  652)      &                                  + sum2_3 * sumb_31(i_uprl)
(  653)           c_sum(i_uprl) = c_sum(i_uprl) + sum2_1 * sumc_11(i_uprl)   &
(  654)      &                                  + sum2_2 * sumc_11(i_uprl)   &
(  655)      &                                  + sum2_3 * sumc_31(i_uprl)
(  656)           e_sum(i_uprl) = e_sum(i_uprl) + sum2_1 * sume_11(i_uprl)   &
(  657)      &                                  + sum2_2 * sume_11(i_uprl)   &
(  658)      &                                  + sum2_3 * sume_31(i_uprl)
(  659)           f_sum(i_uprl) = f_sum(i_uprl) + sum2_1 * sumf_11(i_uprl)   &
(  660)      &                                  + sum2_2 * sumf_11(i_uprl)   &
(  661)      &                                  + sum2_3 * sumf_31(i_uprl)     
(  662)        end do
(  663)        
(  664)        
(  665) 
(  666)     end do
(  667)     
(  668) 
(  669) 
(  670)     deallocate( zbeta )
(  671)     deallocate( zbeta_iharm )
(  672)     
(  673)     deallocate(nres )
(  674)     deallocate(mres )
(  675) 
(  676)     deallocate(zetai)
(  677)     deallocate(Jni)
(  678)     deallocate(Jn)    
(  679)     deallocate(NPARA_sav)
(  680)     
(  681)     






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 13

(  682)     deallocate(sumb_11)
(  683)     deallocate(sumb_31)
(  684)     
(  685)     deallocate(sumc_11)
(  686)     deallocate(sumc_31) 
(  687)     
(  688)     deallocate(sume_11)
(  689)     deallocate(sume_31)
(  690)     
(  691)     deallocate(sumf_11)
(  692)     deallocate(sumf_31)      
(  693)     
(  694)     deallocate( is_resonance_nm )
(  695)     
(  696)     return
(  697) 
(  698)   end subroutine QLSUM_MAXWELLIAN
(  699) 
(  700) !
(  701) !*************************************************************************
(  702) !
(  703) 
(  704)     subroutine QLSUM_NON_MAXWELLIAN(k_uper, b_sum, c_sum, e_sum, f_sum, &
(  705)        & sum_wdot, sum_fx0, sum_fy0, W, ZSPEC, ASPEC, BMAG, &
(  706)        & lmax, ENORM, UPARMIN, UPARMAX, &
(  707)        & NUPAR, NUPER, UPER, UPAR, DFDUPER, DFDUPAR,  &
(  708)        & ealphak, ebetak, ebk, nkdim1, nkdim2, mkdim1, mkdim2,   &
(  709)        & nkx1, nkx2, nky1, nky2, &
(  710)        & uxx, uxy, uxz, &
(  711)        & uyx, uyy, uyz, &
(  712)        & uzx, uzy, uzz, &
(  713)        & nxdim, nydim, xkxsav, xkysav, xkphi, xx, yy, i_global, j_global, &
(  714)        & lmaxdim, ndist, nzeta, &
(  715)        & gradprlb, bmod, omgc, alpha, xm, upshift)
(  716) 
(  717)     implicit none
(  718) 
(  719)     integer i_global, j_global, ier, nxdim, nydim, k, lmaxdim, ndist
(  720)     integer, intent(IN):: NUPAR, NUPER, lmax
(  721)     integer nkx1, nkx2, nky1, nky2, j_upar, k_uper, l
(  722)     integer nkdim1, nkdim2, mkdim1, mkdim2
(  723)     integer:: NHARM, IHARM, M, N, i, nzeta
(  724)     integer i_uprl, upshift
(  725)     integer ires, iresmax
(  726) 
(  727)     complex, dimension(:,:), allocatable :: zbeta
(  728)     complex, dimension(:,:), allocatable :: zbeta_iharm
(  729)     
(  730)     real  y, y0, alpha, xm, akprl, sgn_kprl, omgc, bmod, xkprl_eff,  &
(  731)    &   descrim, xme, fgam, gradprlb, gammab
(  732) 
(  733)     real  uxx, uxy, uxz, uyx, uyy, uyz, uzx, uzy, uzz
(  734)     real  xkphi, sinth, factc, facte, factf, sinth_inv
(  735)     real  xkxsav(nkdim1 : nkdim2), xkysav(mkdim1 : mkdim2)
(  736)     real  xkperpn, xkperpni, xkrhon, xketan, xkbn, beta
(  737)     real, intent(IN):: W, ZSPEC, ASPEC, BMAG
(  738)     real, intent(IN):: ENORM, UPARMIN, UPARMAX
(  739)     real, dimension(NUPER), intent(IN):: UPER






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 14

(  740)     real, dimension(NUPAR), intent(IN):: UPAR
(  741)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER, DFDUPAR
(  742)     real:: W2, WCW, RRP, RRM, WC, WCI
(  743)     real:: MUT0, SQMUT0, PISQMUT0, SQMUT0I, KPARA1, NPARA1
(  744)     real:: ISQ2, SQ2, NWCW, DFACTPAR, DFACTPER, U0
(  745)     real:: UPAR0, dfdupar0, dfduper0, du, dui, p 
(  746)     real:: time, t1, tmsec, second1, dummy, WI, uperpk, uperpk2
(  747)     real:: dzeta, dzetai, zetamax, zetamin, zeta0, zetamax1, zetamax2
(  748)     real:: A1, A2, A3, u
(  749)     real:: temp1, temp2, temp3, factor
(  750)     real:: temp1w, temp2w, temp3w
(  751)     
(  752)     real, dimension(:),     allocatable :: zetai
(  753)     real, dimension(:,:),   allocatable :: Jni
(  754)     real, dimension(:,:,:), allocatable :: Jn
(  755)     real, dimension(:,:),   allocatable :: NPARA_sav
(  756)     
(  757)     integer, dimension(:),  allocatable :: nres
(  758)     integer, dimension(:),  allocatable :: mres
(  759)         
(  760)     complex, dimension(:),  allocatable :: sumb_11
(  761)     complex, dimension(:),  allocatable :: sumb_31
(  762)      
(  763)     complex, dimension(:),  allocatable :: sumc_11
(  764)     complex, dimension(:),  allocatable :: sumc_31
(  765)     
(  766)     complex, dimension(:),  allocatable :: sume_11
(  767)     complex, dimension(:),  allocatable :: sume_31
(  768)      
(  769)     complex, dimension(:),  allocatable :: sumf_11
(  770)     complex, dimension(:),  allocatable :: sumf_31
(  771)     
(  772)     complex sumf_11_nm
(  773)     complex sumf_31_nm
(  774) 
(  775)     complex sume_11_nm
(  776)     complex sume_31_nm
(  777)        
(  778)     complex sumc_11_nm
(  779)     complex sumc_31_nm
(  780)        
(  781)     complex sumb_11_nm
(  782)     complex sumb_31_nm
(  783)  
(  784)     logical, dimension(:,:), allocatable :: is_resonance_nm      
(  785) 
(  786)     complex epsx, epsy, epsz
(  787)     complex ealphak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(  788)     &        ebetak(nkdim1 : nkdim2, mkdim1 : mkdim2), &
(  789)     &           ebk(nkdim1 : nkdim2, mkdim1 : mkdim2)
(  790)     complex cexpkx, cexpky, zi, zeta
(  791) 
(  792)     complex xx(nkdim1 : nkdim2, 1 : nxdim),   &
(  793)      &      yy(mkdim1 : mkdim2, 1 : nydim)
(  794) 
(  795)     complex cexpn, cexpnp1, cexpnm1, cexp11
(  796) 
(  797)     complex cexp1, cexp2, cexp0






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 15

(  798)     complex sumwdot_11_nm, sumwdot_31_nm
(  799)     
(  800)     complex sumwdot_11, sumwdot_31
(  801)     complex sumwdotkx_11, sumwdotkx_31
(  802)     complex sumwdotky_11, sumwdotky_31
(  803) 	
(  804)     complex sum2_1, sum2_2, sum2_3
(  805)     complex sumkx2_1, sumkx2_2, sumkx2_3 
(  806)     complex sumky2_1, sumky2_2, sumky2_3        
(  807)     
(  808)     complex b_sum(nupar), c_sum(nupar), e_sum(nupar), f_sum(nupar)
(  809)     complex sum_wdot, sum_fx0, sum_fy0
(  810)     complex b(100)
(  811) 
(  812)     real, parameter::  EOVERAMU = 9.58084e7
(  813)     real, parameter:: MPC2 = 938271998.38
(  814)     real, parameter:: C = 2.99792458e8
(  815)     real, parameter:: PI = 3.141592653597932384
(  816)     real :: cosbeta_n_m, sinbeta_n_m
(  817)     
(  818)     
(  819)     allocate( zbeta(nkx1:nkx2,nky1:nky2) )
(  820)     allocate( zbeta_iharm(nkx1:nkx2,nky1:nky2) )
(  821) 
(  822)     allocate(zetai(nzeta + 1) )
(  823)     allocate(Jni(-lmaxdim : lmaxdim, nzeta + 1) )
(  824)     allocate( Jn(-lmaxdim : lmaxdim, nkdim1 : nkdim2, mkdim1 : mkdim2))    
(  825)     allocate(NPARA_sav(nkdim1 : nkdim2, mkdim1 : mkdim2) ) 
(  826)     
(  827)     allocate(nres(nxdim * nydim) )
(  828)     allocate(mres(nxdim * nydim) )
(  829)     
(  830)     allocate(sumb_11(nupar))
(  831)     allocate(sumb_31(nupar))
(  832)      
(  833)     allocate(sumc_11(nupar))
(  834)     allocate(sumc_31(nupar))
(  835)     
(  836)     allocate(sume_11(nupar))
(  837)     allocate(sume_31(nupar))
(  838)      
(  839)     allocate(sumf_11(nupar))
(  840)     allocate(sumf_31(nupar))
(  841) 
(  842)     allocate(is_resonance_nm(nkx1:nkx2,nky1:nky2))
(  843) 
(  844) !   -------------------------------------
(  845) !   initialize allocatable arrays to zero
(  846) !   -------------------------------------
(  847) 
(  848)     zbeta = 0.0
(  849)     zbeta_iharm = 0.0
(  850) 
(  851)     sumf_11_nm = 0.0
(  852)     sumf_31_nm = 0.0
(  853) 
(  854)     sume_11_nm = 0.0
(  855)     sume_31_nm = 0.0






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 16

(  856)     
(  857)     sumc_11_nm = 0.0
(  858)     sumc_31_nm = 0.0
(  859)     
(  860)     sumb_11_nm = 0.0
(  861)     sumb_31_nm = 0.0
(  862) 
(  863)     is_resonance_nm = .false.
(  864) 
(  865)     zetai = 0.0
(  866)     Jni = 0.0
(  867)     NPARA_sav = 0.0
(  868) 
(  869)     sumb_11 = 0.0
(  870)     sumb_31 = 0.0
(  871)       
(  872)     sumc_11 = 0.0
(  873)     sumc_31 = 0.0
(  874) 
(  875)     sume_11 = 0.0
(  876)     sume_31 = 0.0
(  877) 
(  878)     sumf_11 = 0.0
(  879)     sumf_31 = 0.0    
(  880)     
(  881)     xme = 9.11e-31
(  882)     zi = cmplx(0., 1.)
(  883)     
(  884)     uperpk = uper(k_uper)
(  885)     uperpk2 = uperpk**2
(  886) 
(  887)     W2 = W * W
(  888)     WI = 1.0 / W
(  889) 
(  890)     WCW = BMAG * ZSPEC * EOVERAMU / ASPEC / W
(  891)     WC = WCW * W
(  892)     WCI = 1.0 /WC
(  893) 
(  894)     MUT0 = 0.5 * MPC2 * ASPEC / ENORM
(  895)     SQMUT0 = SQRT(MUT0)
(  896)     SQMUT0I = 1.0 / SQMUT0
(  897)     PISQMUT0 = SQMUT0 * pi
(  898) 
(  899)     ISQ2 = SQRT(0.5)
(  900)     SQ2 = SQRT(2.0)
(  901)     NHARM = lmax
(  902)     
(  903)     du = (upar(nupar) - upar(1)) / (nupar - 1)
(  904)     dui = 1.0 / du
(  905)     
(  906)     if(nzeta .eq. 1)then
(  907)     
(  908)     ! -------------------------------------------------------- !
(  909)     ! ---Don't interpolate: precalculate all Bessel functions- !
(  910)     ! -------------------------------------------------------- !
(  911) 
(  912)        do n = nkx1, nkx2
(  913)           do m = nky1, nky2






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 17

(  914) 
(  915)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
(  916)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
(  917)              xkbn   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
(  918) 	     
(  919)             ! ------------------------------------
(  920)             ! Optional: leave out upshift in xkprl
(  921)             ! --------------------------------- --          
(  922)               if(upshift .eq. 0)xkbn = uzz * xkphi
(  923) 	     
(  924) 	     
(  925) 	     sgn_kprl = sign(1.0, xkbn)
(  926)              akprl = abs(xkbn)
(  927) 
(  928)              y0 = 1.5
(  929)              y = y0
(  930) 	     
(  931)       
(  932)              l = 1
(  933) 	     if(xkbn .eq. 0)xkbn = 1.0e-06
(  934)              gammab = abs(l * omgc / (2.0 * alpha * xkbn**2)  &
(  935)      &                                    * gradprlb / bmod)
(  936) 
(  937)              if(xm .eq. xme)gammab = 0.0
(  938) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
(  939)              if(abs(gammab) .lt. .01)gammab = .01
(  940) 
(  941) 
(  942)              if(sgn_kprl .ge. 0.0)then
(  943)                 fgam = 1.0
(  944) 
(  945)                 if(gammab .gt. 1.0e-05)then
(  946)                    y = y0
(  947)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
(  948)      &               / (2. * gammab * y)
(  949)                 endif
(  950) 
(  951)                 xkprl_eff = xkbn / fgam 
(  952) 
(  953)              end if
(  954) 
(  955) 
(  956)              if(sgn_kprl .lt. 0.0)then
(  957)                 fgam = 1.0
(  958) 
(  959)                 if(gammab .gt. 1.0e-05)then
(  960)                    descrim = 1. - 4. * gammab * y0
(  961)                    if (descrim .ge. 0.0) y =   y0
(  962)                    if (descrim .lt. 0.0) y = - y0
(  963)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
(  964)      &                / (2. * gammab * y)
(  965)                 endif
(  966) 
(  967)                 xkprl_eff = xkbn / fgam 
(  968) 
(  969)              end if
(  970) 
(  971)              xkbn = xkprl_eff	     






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 18

(  972) 	
(  973)              NPARA_sav(n, m) = xkbn * C / W
(  974) 
(  975)              xkperpn = sqrt(xkrhon**2 + xketan**2)
(  976)              if(xkperpn .eq. 0.0)xkperpn = 1.0e-08
(  977) 	
(  978)              cosbeta_n_m  = xkrhon / xkperpn
(  979)              sinbeta_n_m  = xketan / xkperpn
(  980)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m  )
(  981) 
(  982)              zeta = xkperpn * uper(k_uper) * c * sqmut0i / wc
(  983) 
(  984)              call besjc(zeta, nharm + 2, b, ier)
(  985)              if(ier .ne. 0) write(6, *) "ier = ", ier
(  986) 
(  987)              do IHARM = 0, NHARM + 1
(  988)                 Jn(iharm,  n, m) = b(iharm + 1)
(  989)                 Jn(-iharm, n, m) = (-1.0)**iharm * Jn(iharm, n, m)
(  990)              end do
(  991) 
(  992)           end do
(  993)        end do
(  994)     
(  995)     else
(  996)     
(  997)         
(  998)        ! -------------------------------------- !
(  999)        ! ---Interpolate; calculate zeta mesh -- !
( 1000)        ! -------------------------------------- !
( 1001)     
( 1002)        zetamax = 0.0
( 1003)        zetamin = 0.0
( 1004)     
( 1005)        do n = nkx1, nkx2
( 1006)           do m = nky1, nky2
( 1007) 
( 1008)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
( 1009)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
( 1010)              xkbn   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
( 1011) 
( 1012)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
( 1013) 	
( 1014)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
( 1015) 	  
( 1016)              if (zeta0 .gt. zetamax) zetamax = zeta0
( 1017)              if (zeta0 .lt. zetamin) zetamin = zeta0
( 1018)           end do
( 1019)        end do
( 1020)     
( 1021) 
( 1022)         if(zetamax .eq. zetamin)then
( 1023)           zetamax =  1.0e-06
( 1024)           zetamin = -1.0e-06
( 1025)        end if
( 1026) 
( 1027)        dzeta = (zetamax - zetamin) / (nzeta - 1)
( 1028)        dzetai = 1.0 / dzeta
( 1029)     






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 19

( 1030)        ! ------------------------------------------------- !
( 1031)        ! ---Pre-calculate Bessel functions on zeta mesh -- !
( 1032)        ! ------------------------------------------------- !
( 1033) 	  
( 1034)        do i = 1, nzeta + 1
( 1035)           zetai(i) = zetamin + (i - 1) * dzeta
( 1036)           zeta = cmplx(zetai(i), 0.0)
( 1037) 	  
( 1038)           call besjc(zeta, nharm + 2, b, ier)
( 1039) !          if(ier .ne. 0) write(6, *) "ier = ", ier
( 1040) 	  
( 1041)           do iharm = 0, NHARM + 1
( 1042)              Jni(iharm,  i) = b(iharm + 1)
( 1043)              Jni(-iharm, i) = (-1.0)**iharm * b(iharm + 1)
( 1044)           end do
( 1045)        end do
( 1046)      
( 1047) 
( 1048)        ! --------------------------------- !
( 1049)        ! ---Interpolate Bessel functions-- !
( 1050)        ! --------------------------------- !
( 1051) 
( 1052)        do n = nkx1, nkx2
( 1053)           do m = nky1, nky2
( 1054) 
( 1055)              xkrhon = uxx * xkxsav(n) + uxy * xkysav(m) + uxz * xkphi
( 1056)              xketan = uyx * xkxsav(n) + uyy * xkysav(m) + uyz * xkphi
( 1057)              xkbn   = uzx * xkxsav(n) + uzy * xkysav(m) + uzz * xkphi
( 1058) 	     
( 1059) 	    ! ------------------------------------
( 1060)             ! Optional: leave out upshift in xkprl
( 1061)             ! --------------------------------- --          
( 1062)               if(upshift .eq. 0)xkbn = uzz * xkphi
( 1063) 	     
( 1064) 	     sgn_kprl = sign(1.0, xkbn)
( 1065)              akprl = abs(xkbn)
( 1066) 
( 1067)              y0 = 1.5
( 1068)              y = y0
( 1069) 	     
( 1070)       
( 1071)              l = 1
( 1072) 	     if(xkbn .eq. 0)xkbn = 1.0e-06
( 1073)              gammab = abs(l * omgc / (2.0 * alpha * xkbn**2)  &
( 1074)      &                                    * gradprlb / bmod)
( 1075) 
( 1076)              if(xm .eq. xme)gammab = 0.0
( 1077) !             if(abs(gammab) .gt. 1000.0) gammab = 1000.0
( 1078)              if(abs(gammab) .lt. .01)gammab = .01
( 1079) 
( 1080) 
( 1081)              if(sgn_kprl .ge. 0.0)then
( 1082)                 fgam = 1.0
( 1083) 
( 1084)                 if(gammab .gt. 1.0e-05)then
( 1085)                    y = y0
( 1086)                    fgam = (sqrt(1. +  4. * gammab * y) - 1.)   &
( 1087)      &               / (2. * gammab * y)






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 20

( 1088)                 endif
( 1089) 
( 1090)                 xkprl_eff = xkbn / fgam 
( 1091) 
( 1092)              end if
( 1093) 
( 1094) 
( 1095)              if(sgn_kprl .lt. 0.0)then
( 1096)                 fgam = 1.0
( 1097) 
( 1098)                 if(gammab .gt. 1.0e-05)then
( 1099)                    descrim = 1. - 4. * gammab * y0
( 1100)                    if (descrim .ge. 0.0) y =   y0
( 1101)                    if (descrim .lt. 0.0) y = - y0
( 1102)                    fgam = (1. - sqrt(1. -  4. * gammab * y) )  &
( 1103)      &                / (2. * gammab * y)
( 1104)                 endif
( 1105) 
( 1106)                 xkprl_eff = xkbn / fgam 
( 1107) 
( 1108)              end if
( 1109) 
( 1110)              xkbn = xkprl_eff
( 1111) 	     
( 1112) 	
( 1113)              NPARA_sav(n, m) = xkbn * C * WI
( 1114) 
( 1115)              xkperpn = sqrt(xkrhon**2 + xketan**2) + 1.0e-08
( 1116)              xkperpni = 1.0 / xkperpn
( 1117) 	
( 1118)              cosbeta_n_m = xkrhon * xkperpni
( 1119)              sinbeta_n_m  = xketan * xkperpni
( 1120)              zbeta(n,m) = cmplx( cosbeta_n_m , sinbeta_n_m )
( 1121) 	  
( 1122)              zeta0 = xkperpn * uperpk * c * sqmut0i * wci
( 1123) 	  
( 1124)              i = int((zeta0 - zetamin) * dzetai) + 1
( 1125)              p = (zeta0 - zetai(i)) * dzetai
( 1126)              A1 = 0.5 * P * (P - 1.)
( 1127)              A2 = 1. - P * P
( 1128)              A3 = 0.5 * P * (P + 1.)
( 1129) 	  
( 1130)              do iharm = -NHARM - 1, NHARM + 1
( 1131) 	  
( 1132)                 Jn(iharm, n, m) = Jni(iharm, i)    &
( 1133)      &   	   + p * (Jni(iharm, i + 1) - Jni(iharm, i))
( 1134)                 if(i .ne. 1 )then
( 1135)                    Jn(iharm, n, m) = A1 * Jni(iharm, i - 1)     &
( 1136)      &                             + A2 * Jni(iharm, i)         &
( 1137)      &                             + A3 * Jni(iharm, i + 1)
( 1138)                 end if
( 1139) 	      
( 1140)              end do
( 1141) 	  
( 1142)           end do
( 1143)        end do
( 1144)     
( 1145) 






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 21

( 1146)     end if
( 1147)                     
( 1148) 
( 1149)     ! ------------------------ !
( 1150)     ! ---Sum over harmonics--- !
( 1151)     ! ------------------------ !
( 1152)     
( 1153)     sum_wdot = 0.0
( 1154)     sum_fx0  = 0.0
( 1155)     sum_fy0  = 0.0    
( 1156)     
( 1157)     b_sum = 0.0
( 1158)     c_sum = 0.0
( 1159)     e_sum = 0.0
( 1160)     f_sum = 0.0
( 1161)        
( 1162)     do IHARM = -NHARM, NHARM
( 1163) 
( 1164)        NWCW = real(IHARM) * WCW
( 1165)        
( 1166)        sumb_11 = 0.0
( 1167)        sumb_31 = 0.0
( 1168) 	  
( 1169)        sumc_11 = 0.0
( 1170)        sumc_31 = 0.0	
( 1171) 	  
( 1172)        sume_11 = 0.0
( 1173)        sume_31 = 0.0
( 1174) 	  
( 1175)        sumf_11 = 0.0
( 1176)        sumf_31 = 0.0	  
( 1177) 	          
( 1178)        sumwdot_11 = 0.0
( 1179)        sumwdot_31 = 0.0       
( 1180)        
( 1181)        sumwdotkx_11 = 0.0
( 1182)        sumwdotkx_31 = 0.0
( 1183)        
( 1184)        sumwdotky_11 = 0.0
( 1185)        sumwdotky_31 = 0.0       
( 1186) 
( 1187)        sum2_1 = 0.0
( 1188)        sum2_2 = 0.0
( 1189)        sum2_3 = 0.0
( 1190)        
( 1191)        sumkx2_1 = 0.0
( 1192)        sumkx2_2 = 0.0
( 1193)        sumkx2_3 = 0.0
( 1194)        
( 1195)        sumky2_1 = 0.0
( 1196)        sumky2_2 = 0.0
( 1197)        sumky2_3 = 0.0       
( 1198)        
( 1199)        call zpow((nkx2-nkx1+1)*(nky2-nky1+1), zbeta, iharm, zbeta_iharm) 
( 1200)        
( 1201)        ! ----------------------- !
( 1202)        ! ---Find resonant modes--!
( 1203)        ! ----------------------- !






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 22

( 1204)        ires = 0
( 1205)        do n = nkx1, nkx2
( 1206)           do m = nky1, nky2     
( 1207)              ! ------------------------ !
( 1208)              ! -- Resonance relation -- !
( 1209)              ! ------------------------ !
( 1210)              RRP = 1.0 - NWCW - NPARA_sav(n, m) * UPARMAX * SQMUT0i
( 1211)              RRM = 1.0 - NWCW - NPARA_sav(n, m) * UPARMIN * SQMUT0i
( 1212) 
( 1213)              is_resonance_nm(n,m) = (RRP * RRM .le. 0.0)
( 1214)              if (is_resonance_nm(n,m)) then
( 1215) 	         ires = ires + 1
( 1216) 	         nres(ires) = n
( 1217) 		 mres(ires) = m
( 1218) 	     end if
( 1219) 	  end do
( 1220)        end do
( 1221)        iresmax = ires     
( 1222) 
( 1223)       ! ---------------------------- !
( 1224)       ! ---Sum over resonant modes-- !
( 1225)       ! ---------------------------- !
( 1226) 
( 1227)        do ires = 1, iresmax
( 1228)           n = nres(ires)
( 1229) 	  m = mres(ires)
( 1230) 	                                                 
( 1231)           cexp1 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) * zbeta(n,m)
( 1232)           cexp2 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m) / zbeta(n,m)
( 1233)           cexp0 = xx(n, i_global) * yy(m, j_global) * zbeta_iharm(n,m)
( 1234) 		
( 1235)           epsx = isq2 * (ealphak(n, m) - zi * ebetak(n, m)) * cexp1
( 1236)           epsy = isq2 * (ealphak(n, m) + zi * ebetak(n, m)) * cexp2
( 1237)           epsz = ebk(n, m) * cexp0
( 1238) 	     
( 1239)           sum2_1 = sum2_1 + conjg(epsx) * Jn(IHARM + 1, n, m)
( 1240)           sum2_2 = sum2_2 + conjg(epsy) * Jn(IHARM - 1, n, m)
( 1241)           sum2_3 = sum2_3 + conjg(epsz) * Jn(IHARM, n, m)
( 1242) 	     
( 1243) 	  sumkx2_1 = sumkx2_1 + xkxsav(n) * conjg(epsx) * Jn(IHARM + 1, n, m)
( 1244)           sumkx2_2 = sumkx2_2 + xkxsav(n) * conjg(epsy) * Jn(IHARM - 1, n, m)
( 1245)           sumkx2_3 = sumkx2_3 + xkxsav(n) * conjg(epsz) * Jn(IHARM, n, m)
( 1246) 	     
( 1247) 	  sumky2_1 = sumky2_1 + xkysav(m) * conjg(epsx) * Jn(IHARM + 1, n, m)
( 1248)           sumky2_2 = sumky2_2 + xkysav(m) * conjg(epsy) * Jn(IHARM - 1, n, m)
( 1249)           sumky2_3 = sumky2_3 + xkysav(m) * conjg(epsz) * Jn(IHARM, n, m)	     	     	    
( 1250) 
( 1251)           UPAR0 = SQMUT0 / NPARA_sav(n, m) * (1. - NWCW)
( 1252) 	
( 1253) 	  u = sqrt(upar0**2 + uperpk2) + 1.0e-08
( 1254)           sinth = uperpk / u + 1.0e-08
( 1255) 	  sinth_inv = 1.0 / sinth
( 1256) 		
( 1257) 	  facte = (nwcw - sinth**2) /  upar0
( 1258) 	
( 1259)           i = int((UPAR0 - UPAR(1)) * dui) + 1
( 1260) 	  i_uprl = i
( 1261)           p = (UPAR0 - UPAR(i)) * dui






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 23

( 1262) 		
( 1263) 	  dfduper0 = dfduper(k_uper, NUPAR)
( 1264)           if (i .ne. NUPAR) then
( 1265)             dfduper0 = dfduper(k_uper, i) + (dfduper(k_uper, i+1) - dfduper(k_uper, i)) * p
( 1266)           end if
( 1267) 		
( 1268)           DFACTPAR = NPARA1 * UPAR0 * SQMUT0I
( 1269)           DFACTPER = NPARA1 * UPER(k_uper) * SQMUT0I
( 1270) 	
( 1271)           U0 = (1. - DFACTPAR) * DFDUPER0 + DFACTPER * DFDUPAR0
( 1272) 			
( 1273)           factor = PISQMUT0 / abs(NPARA_sav(n, m)) 
( 1274) 			
( 1275)           sumb_11_nm = UPER(k_uper) * UPER(k_uper)  * Jn(IHARM + 1, n, m) * epsx     &
( 1276)      &               + UPER(k_uper) * UPER(k_uper)  * Jn(IHARM - 1, n, m) * epsy     &
( 1277)      &               + SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM, n, m)     * epsz
( 1278) 
( 1279)           sumb_31_nm = SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM + 1, n, m) * epsx     &
( 1280)      &               + SQ2 * UPER(k_uper) * UPAR0  * Jn(IHARM - 1, n, m) * epsy     &
( 1281)      &               + 2.0 * UPAR0 * UPAR0 * Jn(IHARM, n, m)     * epsz
( 1282)      
( 1283)           sumb_11_nm = sumb_11_nm * factor 
( 1284)           sumb_31_nm = sumb_31_nm * factor 
( 1285) 				
( 1286)           sume_11_nm = sumb_11_nm * facte
( 1287)           sume_31_nm = sumb_31_nm * facte
( 1288)           
( 1289)           sumc_11_nm = sume_11_nm * sinth_inv
( 1290)           sumc_31_nm = sume_31_nm * sinth_inv     
( 1291)      
( 1292)           sumf_11_nm = sumc_11_nm * facte
( 1293)           sumf_31_nm = sumc_31_nm * facte
( 1294)           		
( 1295)           sumwdot_11_nm = sumb_11_nm * u0
( 1296)           sumwdot_31_nm = sumb_31_nm * u0	
( 1297) 											     
( 1298)           sumf_11(i_uprl) = sumf_11(i_uprl) + sumf_11_nm
( 1299)           sumf_31(i_uprl) = sumf_31(i_uprl) + sumf_31_nm
( 1300) 
( 1301)           sume_11(i_uprl) = sume_11(i_uprl) + sume_11_nm
( 1302)           sume_31(i_uprl) = sume_31(i_uprl) + sume_31_nm
( 1303) 
( 1304)           sumc_11(i_uprl) = sumc_11(i_uprl) + sumc_11_nm
( 1305)           sumc_31(i_uprl) = sumc_31(i_uprl) + sumc_31_nm
( 1306) 
( 1307)           sumb_11(i_uprl) = sumb_11(i_uprl) + sumb_11_nm
( 1308)           sumb_31(i_uprl) = sumb_31(i_uprl) + sumb_31_nm
( 1309) 		
( 1310) 	  sumwdot_11 = sumwdot_11 + sumwdot_11_nm
( 1311) 	  sumwdot_31 = sumwdot_31 + sumwdot_31_nm
( 1312) 		
( 1313) 	  sumwdotkx_11 = sumwdotkx_11 + xkxsav(n) * sumwdot_11_nm
( 1314) 	  sumwdotkx_31 = sumwdotkx_31 + xkxsav(n) * sumwdot_31_nm	
( 1315) 		
( 1316) 	  sumwdotky_11 = sumwdotky_11 + xkysav(m) * sumwdot_11_nm
( 1317) 	  sumwdotky_31 = sumwdotky_31 + xkysav(m) * sumwdot_31_nm							
( 1318) 		
( 1319)        enddo






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 24

( 1320)        
( 1321)        
( 1322)        sum_wdot = sum_wdot + sum2_1 * sumwdot_11    &
( 1323)      &                     + sum2_2 * sumwdot_11    &
( 1324)      &  		   + sum2_3 * sumwdot_31 
( 1325)      
( 1326)      
( 1327)        sum_fx0 = sum_fx0  + sumkx2_1 * sumwdot_11    &
( 1328)      &                    + sumkx2_2 * sumwdot_11    &
( 1329)      &  		  + sumkx2_3 * sumwdot_31    &
( 1330)      &                    + sum2_1 * sumwdotkx_11    &
( 1331)      &                    + sum2_2 * sumwdotkx_11    &
( 1332)      &  		  + sum2_3 * sumwdotkx_31
( 1333)      
( 1334)        sum_fy0 = sum_fy0  + sumky2_1 * sumwdot_11    &
( 1335)      &                    + sumky2_2 * sumwdot_11    &
( 1336)      &  	          + sumky2_3 * sumwdot_31    &
( 1337)      &                    + sum2_1 * sumwdotky_11    &
( 1338)      &                    + sum2_2 * sumwdotky_11    &
( 1339)      &  	          + sum2_3 * sumwdotky_31    
( 1340)       
( 1341)        
( 1342) 
( 1343)        do i_uprl = 1, nupar
( 1344)           b_sum(i_uprl) = b_sum(i_uprl) + sum2_1 * sumb_11(i_uprl)   &
( 1345)      &                                  + sum2_2 * sumb_11(i_uprl)   &
( 1346)      &                                  + sum2_3 * sumb_31(i_uprl)
( 1347)           c_sum(i_uprl) = c_sum(i_uprl) + sum2_1 * sumc_11(i_uprl)   &
( 1348)      &                                  + sum2_2 * sumc_11(i_uprl)   &
( 1349)      &                                  + sum2_3 * sumc_31(i_uprl)
( 1350)           e_sum(i_uprl) = e_sum(i_uprl) + sum2_1 * sume_11(i_uprl)   &
( 1351)      &                                  + sum2_2 * sume_11(i_uprl)   &
( 1352)      &                                  + sum2_3 * sume_31(i_uprl)
( 1353)           f_sum(i_uprl) = f_sum(i_uprl) + sum2_1 * sumf_11(i_uprl)   &
( 1354)      &                                  + sum2_2 * sumf_11(i_uprl)   &
( 1355)      &                                  + sum2_3 * sumf_31(i_uprl)     
( 1356)        end do
( 1357)        
( 1358)        
( 1359) 
( 1360)     end do
( 1361)     
( 1362) 
( 1363) 
( 1364)     deallocate( zbeta )
( 1365)     deallocate( zbeta_iharm )
( 1366)     
( 1367)     deallocate(nres )
( 1368)     deallocate(mres )
( 1369) 
( 1370)     deallocate(zetai)
( 1371)     deallocate(Jni)
( 1372)     deallocate(Jn)    
( 1373)     deallocate(NPARA_sav)
( 1374)     
( 1375)     
( 1376)     deallocate(sumb_11)
( 1377)     deallocate(sumb_31)






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 25

( 1378)     
( 1379)     deallocate(sumc_11)
( 1380)     deallocate(sumc_31) 
( 1381)     
( 1382)     deallocate(sume_11)
( 1383)     deallocate(sume_31)
( 1384)     
( 1385)     deallocate(sumf_11)
( 1386)     deallocate(sumf_31)      
( 1387)     
( 1388)     deallocate( is_resonance_nm )
( 1389)     
( 1390)     return
( 1391) 
( 1392)   end subroutine QLSUM_NON_MAXWELLIAN
( 1393) 
( 1394) 
( 1395) !
( 1396) !*************************************************************************
( 1397) !
( 1398) 
( 1399) 	subroutine zpow(n, z, iharm, zout )
( 1400) 	implicit none
( 1401) 	integer n, iharm
( 1402) 	complex z(n), zout(n)
( 1403) 
( 1404) 	integer i,ipow
( 1405) 	complex one, zero
( 1406)         complex zin
( 1407) 
( 1408)         integer nharm
( 1409)         logical isodd
( 1410)         intrinsic mod
( 1411) 
( 1412)         logical use_zdiv
( 1413)         parameter(use_zdiv=.true.)
( 1414) 
( 1415)         integer nb
( 1416)         parameter(nb=1024*4*4)
( 1417)         complex zk(nb)
( 1418)         integer istart,iend,isize
( 1419) 
( 1420)         one = 1.0d0
( 1421)         zero = 0.0d0
( 1422) 
( 1423)         if (iharm.eq.0) then
( 1424)              do i=1,n
( 1425)                 zout(i) = one
( 1426)              enddo
( 1427)              return
( 1428)         endif
( 1429) 
( 1430) 
( 1431)         do istart=1,n,nb
( 1432) 
( 1433)            iend = min(n,istart+nb-1)
( 1434)            isize = iend-istart+1
( 1435) 






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 26

( 1436) 	  do i=1,isize
( 1437) 	    zout(istart-1+i) = one
( 1438)           enddo
( 1439) 
( 1440) 
( 1441)          do i=1,isize
( 1442)            zk(i) = z(istart-1+i)
( 1443)          enddo
( 1444) 
( 1445)         nharm = abs(iharm)
( 1446)         do while (nharm .gt. 0)
( 1447)            isodd = (mod(nharm,2).eq.1)
( 1448)            if (isodd) then
( 1449)                do i=1,isize
( 1450)                  zout(istart-1+i) = zout(istart-1+i) * zk(i)
( 1451)                enddo
( 1452)            endif
( 1453)            do i=1,isize
( 1454)               zk(i) = zk(i) * zk(i)
( 1455)            enddo
( 1456)            nharm = int( nharm/2 )
( 1457)         enddo
( 1458) 
( 1459) 
( 1460) 
( 1461) 	if (iharm.lt.0) then
( 1462)            if (use_zdiv) then
( 1463) 	     do i=1,isize
( 1464)                 zin = zout(istart-1+i)
( 1465)                 call zdiv( zin, zout(istart-1+i) )
( 1466)             enddo
( 1467)            else
( 1468)              do i=1,isize
( 1469)                 zin = zout(istart-1+i)
( 1470)                 zout(istart-1+i) = one/zin
( 1471)              enddo
( 1472)            endif
( 1473)         endif
( 1474) 
( 1475)         enddo
( 1476) 
( 1477) 	return
( 1478) 	end subroutine 
( 1479) 	
( 1480) !
( 1481) !*************************************************************************
( 1482) !
( 1483) 
( 1484)         subroutine zdiv( zin, zout )
( 1485)         implicit none
( 1486)         complex zin, zout
( 1487)         real a, b
( 1488)         real d
( 1489) 
( 1490)         real one
( 1491)         parameter(one=1.0d0)
( 1492)         real rd, a_over_b, b_over_a
( 1493) 






PGF90 (Version      9.0)          02/05/2010  11:44:18      page 27

( 1494) 
( 1495)         a = real(zin)
( 1496)         b = aimag(zin)
( 1497) 
( 1498) !       z = (a + i * b)
( 1499) !       1/z =  a/(a^2 + b^2) - i * b/(a^2 + b^2)
( 1500) !
( 1501) !       or    1/(a + (b/a)*b) - i * (b/a) / (a + (b/a)*b)
( 1502) !       or    (a/b)/( (a/b)*a + b ) - i * 1/( (a/b)*a + b )
( 1503) !        
( 1504)         if (abs(a).gt.abs(b)) then
( 1505)             b_over_a = b/a
( 1506)             d = a + (b_over_a)*b
( 1507)             rd = one/d
( 1508)             zout = cmplx( rd, -(b_over_a)*rd )
( 1509)         else
( 1510)             a_over_b = a/b
( 1511)             d = (a_over_b)*a + b
( 1512)             rd = one/d
( 1513)             zout = cmplx( (a_over_b)*rd, -rd )
( 1514)         endif
( 1515) 
( 1516)         return
( 1517)         end subroutine
( 1518) 	
( 1519) 
( 1520) 
( 1521) !
( 1522) !*************************************************************************
( 1523) !
( 1524) 
( 1525)          end module qlsum_myra_mod
( 1526) 	 
( 1527) 
