


PGF90 (Version      7.0)          05/01/2008  16:42:33      page 1

Switches: -noasm -nodclchk -nodebug -nodlines -noline -list
          -idir /ccs/home/jaegeref/AORSA2D/02-29-2008_AORSA-CQL_EQDSK14_JAGUARCNL/src/CQL3D_SETUP
          -idir /ccs/home/jaegeref/AORSA2D/02-29-2008_AORSA-CQL_EQDSK14_JAGUARCNL/src/CQL3D_SETUP
          -idir /apps/netcdf/3.6.0/xt3_pgi605/include/
          -idir /opt/xt-libsci/10.2.0/pgi/snos64/include
          -idir /opt/xt-libsci/10.2.0/pgi/snos64/include/superlu
          -idir /opt/xt-mpt/2.0.33/sma/P/include
          -idir /opt/xt-mpt/2.0.33/mpich2-64/P/include
          -idir /opt/xt-mpt/2.0.33/mpich2-64/P/include
          -idir /opt/acml/default/pgi64/include
          -idir /notbackedup-jbod/users/rsrel/rs64.REL_2_0_33.071120.Tue/install/include
          -idir /opt/xt-catamount/2.0.33/catamount/linux/include
          -idir /opt/xt-service/2.0.33/include
          -inform severe -opt 2 -save -object -noonetrip
          -depchk on -nostandard     
          -nosymbol -noupcase    

Filename: /ccs/home/jaegeref/AORSA2D/02-29-2008_AORSA-CQL_EQDSK14_JAGUARCNL/src/mets2aorsa.f

(    1) !module METS2AORSA
(    2) 
(    3) !  private
(    4) !  public:: WMATPRECALC_AORSA,GETNONMAXSWMAT_AORSA,GETNONMAXSWMAT_AORSA_NEW
(    5) 
(    6) !contains
(    7) 
(    8) !
(    9) !*************************************************************************
(   10) !
(   11) 
(   12)     subroutine GETNONMAX_SIGMA_AORSA_NEW(W,ZSPEC,ASPEC,DENS,BMAG, &
(   13)        & K1,XI1,JNXI1,K2,XI2,JNXI2,NBESSJ,ENORM,UPARMIN,UPARMAX, &
(   14)        & NUPAR,NUPER,UPER,UPAR,DFDUPER,DFDUPAR,WSPEC,IFAIL)
(   15)     implicit none
(   16)     real, intent(IN):: W,ZSPEC,ASPEC,DENS,BMAG
(   17)     real, dimension(3):: K1,K2
(   18)     integer, intent(IN):: NUPAR,NUPER,NBESSJ
(   19)     real, dimension(NUPER), intent(IN):: XI1,XI2
(   20)     real, dimension(NUPER, NBESSJ), intent(IN):: JNXI1,JNXI2
(   21)     real, intent(IN):: ENORM,UPARMIN,UPARMAX
(   22)     real, dimension(NUPER), intent(IN):: UPER
(   23)     real, dimension(NUPAR), intent(IN):: UPAR
(   24)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER,DFDUPAR
(   25)     real  DFDTH(NUPER,NUPAR)
(   26)     complex, dimension(3,3), intent(inout):: WSPEC
(   27)     complex zi
(   28)     integer, intent(inout):: IFAIL
(   29) 
(   30)     complex:: BETAFACT
(   31)     real, parameter::  EOVERAMU = 9.58084e7
(   32)     real, parameter:: WP2FACT=1.745915
(   33)     real, parameter:: MPC2=938271998.38
(   34)     real, parameter:: C=2.99792458e8
(   35)     real, parameter:: PI=3.141592653597932384
(   36)     real, dimension(NUPER):: JN0XI1,JNP1XI1,JNM1XI1
(   37)     real, dimension(NUPER):: JN0XI2,JNP1XI2,JNM1XI2
(   38)     real, dimension(NUPER,3,3):: SSGG
(   39)     real, dimension(NUPAR,3,3):: SGG
(   40) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 2

(   41)     real ga_33(nupar)
(   42)     real, dimension(NUPAR,-1:NBESSJ-2) :: sgg_31
(   43)     real, dimension(NUPAR,-1:NBESSJ-2) :: sgg_11
(   44) 
(   45)     real, dimension(NUPAR) :: sgg_31_last, sgg_21p
(   46)     real, dimension(3,3):: THETARE,THETAIM
(   47)     real:: W2,WP2,WPFACT,WCW,RRP,RRM,RR,IRR, du_3, g_33, g_33j
(   48)     real:: MUT0,SQMUT0,BETA1,BETA2,KPARA1,NPARA1
(   49)     real:: ISQ2,CUPAR,CUPER,NWCW,DFACTPAR,DFACTPER,LF0,LNF0UPER
(   50)     real:: DFACTPERI, reson
(   51)     real:: UPAR0,SFACT0,SFACTP1,SFACTM1, factor, kperp2, vperp_norm2
(   52)     real:: ssgg_11,ssgg_22,ssgg_31,ssgg_33,ssgg_32,ssgg_21,du, temp
(   53)     integer:: NHARM,IHARM,NJ,NJP1,NJM1,J,K,M,N
(   54) 
(   55)     real, dimension(nupar) :: irr_j, rr_j
(   56) 
(   57)     integer :: kdim,  jdim
(   58)     real, dimension(nuper,nupar) :: LF0kj
(   59)     real :: ssgg_11a,ssgg_33a, ssgg_31a
(   60)     real :: maxabserr, maxrelerr
(   61)     real :: abserr_11, abserr_33, abserr_31
(   62)     real :: relerr_11, relerr_33, relerr_31
(   63) 
(   64)     real, dimension(:,:), pointer :: JN0N0,JN0N0U,JN0N1U
(   65)     real, dimension(:,:), pointer :: LF0JN0N0, LF0JN0N0U, LF0JN0N1U
(   66)     real, dimension(nupar,3*nbessj-1), target :: Jmat
(   67)     real, dimension(nuper,3*nbessj-1), target :: Kmat
(   68) 
(   69)     integer :: mm,nn,kk,ld1,ld2,ld3
(   70)     real :: alpha,beta
(   71) 
(   72)     integer :: mn
(   73)     integer, dimension(6) :: mlist,nlist
(   74)     real, dimension(3,3) :: sumsgg_even, sumsgg_odd
(   75)     real :: sum_even, sum_odd, JNP1XI1_K, JN0XI1_K
(   76) 
(   77)     logical :: is_uniform 
(   78) 
(   79)     integer, parameter :: nfxmax = 9
(   80)     integer :: nfx 
(   81)     real*8, dimension(nfxmax) ::  vint
(   82)     real*8, dimension(nupar,nfxmax) :: fx
(   83)     real*8 :: dh,dx,tol
(   84)     integer :: i
(   85) 
(   86)     is_uniform = .true.
(   87)     tol = 1.0d-7
(   88)     dh = upar(2)-upar(1)
(   89)     do i=1,nupar-1
(   90)        dx = upar(i+1)-upar(i)
(   91)        is_uniform = abs(dx-dh).le. tol*dx
(   92)        if (.not.is_uniform) exit
(   93)     enddo
(   94) 
(   95)     jdim = nupar
(   96)     kdim = nuper
(   97) 
(   98)     mn = 1






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 3

(   99)     do m=1,3
(  100)        do n=1,m
(  101)           mlist(mn) = m
(  102)           nlist(mn) = n
(  103)           mn = mn+1
(  104)        enddo
(  105)     enddo
(  106) 
(  107)     zi = cmplx(0.0, 1.0)
(  108) 
(  109)     IFAIL=0
(  110)     WSPEC(1:3,1:3) = cmplx(0.,0.)
(  111)     W2=W*W
(  112)     WP2=DENS*ZSPEC**2*WP2FACT/ASPEC
(  113)     WPFACT=WP2/W2
(  114)     WCW=BMAG*ZSPEC*EOVERAMU/ASPEC/W
(  115)     
(  116)     BETA1=ATAN2(K1(2),K1(1))
(  117)     BETA2=ATAN2(K2(2),K2(1))
(  118)     KPARA1=K1(3)
(  119)     NPARA1=KPARA1*C/W
(  120)     MUT0=0.5*MPC2*ASPEC/ENORM
(  121)     SQMUT0=SQRT(MUT0)
(  122)     DFACTPER = NPARA1 / SQMUT0
(  123)     DFACTPERI = 1.0 / DFACTPER
(  124)     ISQ2=SQRT(0.5)
(  125)     NHARM=NBESSJ-2
(  126)     kperp2 = k1(1)*k1(1)+ k1(2)*k1(2)
(  127)     vperp_norm2 = mut0*wcw*wcw*w2/c/c/kperp2  ! need to fix kperp = 0
(  128) 
(  129) !   -------------------------------------------------------
(  130) !   do extra integral (STIX) to convert all elements to "U"
(  131) !   do perpendicular integral by inline trapezoidal rule
(  132) !   and parallel integral by simpson's rule
(  133) !   -------------------------------------------------------
(  134) 
(  135)     do j = 1, nupar
(  136)        do k = 1 , nuper
(  137) 	  DFDTH(k,j) = upar(j) * DFDUPER(k,j) - uper(k) * DFDUPAR(k,j)
(  138)        end do
(  139)     end do
(  140) 
(  141)     du = (uper(nuper) - uper(1))/(nuper - 1)
(  142)     
(  143)     do J = 1, NUPAR
(  144)        g_33j =  0.0
(  145)        
(  146)        do K = 2, NUPER - 1
(  147)           g_33j = g_33j + DFDTH(k,j)
(  148)        end do
(  149)        
(  150)        k = 1
(  151)        g_33j = g_33j + 0.5d0*DFDTH(k,j)
(  152)        k = nuper
(  153)        g_33j = g_33j + 0.5d0*DFDTH(k,j)
(  154) 
(  155)        g_33j = upar(j)*(-g_33j)
(  156) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 4

(  157)        ga_33(j) = g_33j  * du
(  158) 
(  159)     enddo
(  160) 
(  161) 
(  162)     g_33  = 0.0
(  163) 
(  164) !   the uperp integral is done; now do parallel integral by simpson's rule
(  165) 
(  166)     call EQSIMPSON1D_2(NUPAR, UPAR, ga_33, g_33)
(  167) 
(  168)     JN0N0 => Kmat(1:kdim,1:nbessj)
(  169)     JN0N0U => Kmat(1:kdim,(nbessj+1):(2*nbessj) )
(  170)     JN0N1U => Kmat(1:kdim,(2*nbessj+1):(2*nbessj+nbessj-1) )
(  171) 
(  172)     LF0JN0N0 => Jmat(1:jdim,1:nbessj)
(  173)     LF0JN0N0U => Jmat(1:jdim,(nbessj+1):(2*nbessj) )
(  174)     LF0JN0N1U => Jmat(1:jdim,(2*nbessj+1):(2*nbessj+nbessj-1) )
(  175) 
(  176)     do j=1,jdim
(  177)        do k=1,kdim
(  178)           LF0kj(k,j) = DFDUPER(K,J) - DFACTPER * dfdth(k,j)
(  179)        enddo
(  180)     enddo
(  181) 
(  182) !   -------------------------------
(  183) !   precompute LF0kj(k,j) * vectors
(  184) !   -------------------------------
(  185)     do nj=1,nbessj
(  186)        do k=1,kdim
(  187)           JN0N0(k,nj) = JNXI1(k,nj)**2
(  188)           JN0N0U(k,nj) = (JNXI1(k,nj) * UPER(k))**2
(  189)        enddo
(  190)     enddo
(  191)     
(  192)     do nj=1,nbessj-1
(  193)        do k=1,kdim
(  194)           JN0N1U(k,nj) = JNXI1(k,nj)*JNXI1(k,nj+1)*UPER(k)
(  195)        enddo
(  196)     enddo
(  197) 
(  198) !   -----------------------------
(  199) !   one big happy matrix multiply
(  200) !   -----------------------------
(  201) 
(  202)     mm = jdim
(  203)     nn = 3*nbessj-1
(  204)     kk = (kdim-1) - 2 + 1
(  205)     ld1 = size(LF0kj,1)
(  206)     ld2 = size(Kmat,1)
(  207)     ld3 = size(Jmat,1)
(  208)     alpha = 1.0
(  209)     beta = 0.0
(  210)     call dgemm( 'T', 'N', mm,nn,kk,                 &
(  211)         alpha, LF0kj(2,1), ld1,   Kmat(2,1),ld2,    &
(  212)         beta,  Jmat(1,1), ld3 )
(  213) 
(  214)     maxabserr = 0.0






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 5

(  215)     maxrelerr = 0.0
(  216) 
(  217) !   -------------------
(  218) !   Loop over harmonics
(  219) !   -------------------
(  220) 
(  221)     do IHARM = -1, NHARM
(  222) 
(  223)        NWCW=real(IHARM)*WCW  !L*omega_cyc
(  224)        
(  225)        reson = 1.0 - nwcw
(  226) 
(  227)        BETAFACT=exp(cmplx(0.,IHARM*(BETA1-BETA2)))
(  228)        NJ=ABS(IHARM)+1
(  229)        NJP1=ABS(IHARM+1)+1
(  230)        NJM1=ABS(IHARM-1)+1
(  231)        SFACT0=real(sign(1,IHARM))**ABS(IHARM)
(  232)        SFACTP1=real(sign(1,IHARM+1))**ABS(IHARM+1)
(  233)        SFACTM1=real(sign(1,IHARM-1))**ABS(IHARM-1)
(  234) 
(  235)        ! -- Build array with integrand -- !
(  236) 	
(  237)        do J=1,NUPAR
(  238) 	
(  239)           ssgg_11 = 0.0
(  240)           ssgg_31 = 0.0
(  241)           ssgg_33 = 0.0
(  242) 
(  243) !         --------------------------------------------
(  244) !         sums already computed in the matrix multiply
(  245) !         --------------------------------------------
(  246) 
(  247)           ssgg_33a = LF0JN0N0(j,nj) * (sfact0**2)
(  248)           ssgg_11a = LF0JN0N0U(j,njp1) * (sfactp1**2)
(  249) 
(  250) !         -------------------------------------
(  251) !         note it is possible for njp1 .lt. nj
(  252) !         -------------------------------------
(  253)           ssgg_31a = LF0JN0N1U(j,min(nj,njp1)) * (sfact0*sfactp1) * upar(j)
(  254) 
(  255)           ssgg_33 = ssgg_33a
(  256)           ssgg_11 = ssgg_11a
(  257)           ssgg_31 = ssgg_31a
(  258) 	
(  259)           ssgg_11 = ssgg_11 * 0.5
(  260) 	  ssgg_31 = ssgg_31 * ISQ2		
(  261) 
(  262) !         ---------------------------------------------------
(  263) !         no need to form vectors for JN0XI1(:) or JNP1XI1(:)
(  264) !         ---------------------------------------------------
(  265) 
(  266)           k = 1
(  267) 
(  268)           LF0 = LF0kj(k,j)
(  269)           JN0XI1_K = (sfact0*JNXI1(k,nj))
(  270)           ssgg_33 = ssgg_33 + 0.5 * JN0XI1_K**2 *LF0
(  271) 
(  272)           JNP1XI1_k = (sfactp1*JNXI1(k,njp1))






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 6

(  273)           LF0 = UPER(K) * JNP1XI1_K * LF0
(  274)           ssgg_11 = ssgg_11 + 0.25 *       UPER(K) * JNP1XI1_K * LF0
(  275)           ssgg_31 = ssgg_31 + 0.5 * ISQ2 * UPAR(J) * JN0XI1_K  * LF0
(  276) 
(  277)           k = nuper
(  278) 
(  279)           LF0 = LF0kj(k,j)
(  280)           JN0XI1_K = (sfact0*JNXI1(k,nj))
(  281)           ssgg_33 = ssgg_33 + 0.5 * LF0 * JN0XI1_K**2
(  282) 
(  283)           JNP1XI1_K = (sfactp1 * JNXI1(k,njp1))
(  284)           LF0 = UPER(K) * JNP1XI1_K  * LF0
(  285)           ssgg_11 = ssgg_11 + 0.25 *       UPER(K) * JNP1XI1_K * LF0
(  286)           ssgg_31 = ssgg_31 + 0.5 * ISQ2 * UPAR(J) * JN0XI1_K  * LF0
(  287) 
(  288) !         end of the kperp loop
(  289) 	
(  290) 	  du = (uper(nuper) - uper(1))/(nuper - 1)
(  291) 	  sgg_11(j,iharm) =  ssgg_11 * du
(  292) 	  sgg_21p(j) =  ssgg_33 * du  ! this is a piece of 21
(  293) 	  sgg_31(j,iharm) =	ssgg_31 * du
(  294) 	  SGG(j,3,3) =	UPAR(J)**2 * sgg_21p(j)
(  295) 
(  296)        end do
(  297) !      -----------------------------------------------
(  298) !      The perp integrals have been calculated; now do
(  299) !      parallel, but reuse them for negative harmonics
(  300) !      ----------------------------------------------
(  301)        if(iharm .eq. -1) cycle
(  302) 	
(  303)           du_3 = (UPAR(NUPAR)-UPAR(1))/real(nupar-1)/3.	
(  304) 	  SGG(1:nupar,1,1) = sgg_11(1:nupar,iharm)
(  305) 	
(  306) !         do the 31--32, 21, 22 compression
(  307) 	
(  308) 	  select case(iharm)
(  309) 	  case(0)
(  310)              SGG(1:nupar,2,2) = sgg_11(1:nupar,iharm)  ! no -2 for 0 but they are the same
(  311) 	     SGG(1:nupar,2,1) = - SGG(1:nupar,2,2)     ! 12--21 are anti symmetric
(  312) 	  case default
(  313) 	     SGG(1:nupar,2,2) = sgg_11(1:nupar,iharm-2)!  look two back for 22
(  314)              SGG(1:nupar,2,1) = -0.5*(SGG(1:nupar,1,1)+ SGG(1:nupar,2,2))&
(  315) 	       &+ vperp_norm2*iharm*iharm*(sgg_21p(1:nupar))  ! use bessel function identity for 21
(  316) 	  end select
(  317) 
(  318) 	  SGG(1:nupar,3,2) = sgg_31(1:nupar,iharm-1)
(  319) 	  SGG(1:nupar,3,1) = sgg_31(1:nupar,iharm)
(  320) 	
(  321) !         ------------------------	 	
(  322) !         -- Resonance relation -- 
(  323) !         ------------------------
(  324)           RRP=1. - NWCW - DFACTPER * UPARMAX
(  325)           RRM=1. - NWCW - DFACTPER * UPARMIN
(  326) 		
(  327)           if (RRP*RRM.GT.0) then	  
(  328) !            -----------------------	  
(  329) !            -- No resonance here -- 
(  330) !            -----------------------	






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 7

(  331) 
(  332)              do J=1,NUPAR
(  333)                 RR = 1.- NWCW - DFACTPER * UPAR(J)
(  334)                 IRR = 1. / RR
(  335)                 rr_j(j) = rr
(  336)                 irr_j(j) = irr
(  337)              enddo
(  338) 
(  339)              do mn=1,6
(  340)                 m = mlist(mn)
(  341)                 n = nlist(mn)
(  342) 
(  343)                do j=1,nupar
(  344)                   IRR = irr_j(j)
(  345) 	          SGG(J,M,N) = SGG(J,M,N) * IRR
(  346)                end do	    
(  347)              end do
(  348) 	
(  349)              !-- Hermitian part of $\Theta/(2\pi)$ --!
(  350) 	
(  351)              do mn=1,6
(  352)                 m = mlist(mn)
(  353)                 n = nlist(mn)
(  354) 
(  355)                 sum_even = sum(sgg(2:(nupar-1):2,m,n))
(  356)                 sum_odd  = sum(sgg(3:(nupar-1):2,m,n))
(  357) 
(  358)                 thetare(m,n) = (sgg(1,m,n) + sgg(nupar,m,n) +    &
(  359)                    2.0d0*(sum_odd + sum_even) + 2.0d0*sum_even ) * du_3
(  360)              end do
(  361) 	
(  362)              do mn=1,6
(  363)                 m = mlist(mn)
(  364)                 n = nlist(mn)
(  365) 
(  366)                 do j=1,nupar
(  367)                    SGG(J,M,N) = SGG(J,M,N) * rr_j(j)
(  368)                 enddo
(  369)              end do
(  370) 	
(  371)  	     THETARE(1,2) = THETARE(2,1)
(  372)              THETARE(1,3) = THETARE(3,1)
(  373)              THETARE(2,3) = THETARE(3,2)
(  374) 
(  375)              !-- Anti-hermitian part of $\Theta/(2\pi)$ --!
(  376)              THETAIM(1:3,1:3)=0.
(  377) 
(  378)           else
(  379) !            -------------------------------	  
(  380) !            There is a resonance all right 
(  381) !            -------------------------------
(  382)              ! -- 1. Hermitian part -- !
(  383)              UPAR0 = (1. - NWCW) * DFACTPERI	
(  384) 
(  385)              fx(1:nupar,1) = SGG(1:nupar,1,1)
(  386)              fx(1:nupar,2) = SGG(1:nupar,2,1)
(  387)              fx(1:nupar,3) = SGG(1:nupar,3,1)
(  388)              fx(1:nupar,4) = SGG(1:nupar,2,2)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 8

(  389)              fx(1:nupar,5) = SGG(1:nupar,3,2)
(  390)              fx(1:nupar,6) = SGG(1:nupar,3,3)
(  391) 
(  392)              nfx = 6
(  393)              call cauchy_ppart6(upar,nupar,upar0,nfx,fx,vint,is_uniform)
(  394) 
(  395)              thetare(1,1) = vint(1)
(  396)              thetare(2,1) = vint(2)
(  397)              thetare(3,1) = vint(3)
(  398)              thetare(2,2) = vint(4)
(  399)              thetare(3,2) = vint(5)
(  400)              thetare(3,3) = vint(6)
(  401) 
(  402)              THETARE(1,2) = THETARE(2,1)
(  403)              THETARE(1,3) = THETARE(3,1)
(  404)              THETARE(2,3) = THETARE(3,2)
(  405) 
(  406)              ! -- 2. Anti-hermitian part -- !
(  407)              call WINTERP1D_2(UPAR,NUPAR,SGG(1,1,1),UPAR0,THETAIM(1,1))
(  408)              call WINTERP1D_2(UPAR,NUPAR,SGG(1,2,1),UPAR0,THETAIM(2,1))
(  409)              call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,1),UPAR0,THETAIM(3,1))
(  410)              call WINTERP1D_2(UPAR,NUPAR,SGG(1,2,2),UPAR0,THETAIM(2,2))
(  411)              call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,2),UPAR0,THETAIM(3,2))
(  412)              call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,3),UPAR0,THETAIM(3,3))
(  413) 
(  414)              THETAIM(1,2) = THETAIM(2,1)
(  415)              THETAIM(1,3) = THETAIM(3,1)
(  416)              THETAIM(2,3) = THETAIM(3,2)
(  417) 	
(  418) 
(  419)              do M=1,3
(  420)                 do N=1,3
(  421)                    THETARE(M,N) = -THETARE(M,N) * DFACTPERI
(  422)                    THETAIM(M,N) = -PI * THETAIM(M,N) * abs(DFACTPERI) 
(  423)                 end do
(  424)              end do
(  425) 
(  426)           end if
(  427) 	  
(  428) 
(  429)           do N=1,3
(  430)              do M=1,3
(  431)                 WSPEC(M,N) = WSPEC(M,N) + 2. * PI * WPFACT * BETAFACT * &
(  432) !	           & cmplx(THETARE(M,N), THETAIM(M,N))
(  433) 		   & (THETARE(M,N) + zi * THETAIM(M,N))	
(  434)              end do
(  435)           end do
(  436) 
(  437) 	  if(iharm .ne. 0) then  !  skip the negative for zero
(  438) 
(  439) 	     nwcw = - nwcw
(  440) 
(  441)       	     ! -- Resonance relation -- !		
(  442)              RRP = 1. - NWCW - DFACTPER * UPARMAX
(  443)              RRM = 1. - NWCW - DFACTPER * UPARMIN
(  444) 	
(  445)              if (RRP*RRM.GT.0) then
(  446) !            -----------------------	  






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 9

(  447) !            -- No resonance here -- 
(  448) !            -----------------------
(  449) 	
(  450)              do J=1,NUPAR
(  451)                 RR = 1.- NWCW - DFACTPER * UPAR(J)
(  452)                 IRR = 1. / RR
(  453)                 rr_j(j) = rr
(  454)                 irr_j(j) = irr
(  455)              enddo
(  456) 
(  457)              do mn=1,6
(  458)                 m = mlist(mn)
(  459)                 n = nlist(mn)
(  460)                 do j=1,nupar
(  461)                    IRR = irr_j(j)
(  462)                    SGG(J,M,N) = SGG(J,M,N) * IRR
(  463)                 enddo
(  464)              end do
(  465) 		
(  466) !            Hermitian part of $\Theta/(2\pi)$ --
(  467) 
(  468)              do mn=1,6
(  469)                 m = mlist(mn)
(  470)                 n = nlist(mn)
(  471) 
(  472)                 sum_even = sum(sgg(2:(nupar-1):2,m,n))
(  473)                 sum_odd  = sum(sgg(3:(nupar-1):2,m,n))
(  474) 
(  475)                 thetare(m,n) = (sgg(1,m,n)+sgg(nupar,m,n) +     &
(  476)                    2.0d0*(sum_even + sum_odd) + 2.0d0*sum_even) * du_3
(  477)              enddo
(  478) 
(  479)              do mn=1,6
(  480)                 m = mlist(mn)
(  481)                 n = nlist(mn)
(  482) 
(  483)                 do j=1,nupar
(  484)                    SGG(J,M,N) = SGG(J,M,N)  * rr_j(j)
(  485)                 enddo
(  486) 
(  487)              end do
(  488) 
(  489) 	     temp = THETARE(3,2)
(  490) 	     THETARE(3,2) = -THETARE(3,1)
(  491) 	     THETARE(3,1) = -temp
(  492) 		
(  493) 	     temp = THETARE(1,1)
(  494) 	     THETARE(1,1) = THETARE(2,2)
(  495) 	     THETARE(2,2) = temp
(  496) 
(  497)  	     THETARE(1,2) = THETARE(2,1)
(  498)       	     THETARE(1,3) = THETARE(3,1)
(  499)       	     THETARE(2,3) = THETARE(3,2)
(  500) 
(  501) !            Anti-hermitian part of $\Theta/(2\pi)$ 
(  502)       	     THETAIM(1:3,1:3)=0.
(  503) 
(  504)           else






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 10

(  505) !            -------------------------------	  
(  506) !            There is a resonance all right 
(  507) !            -------------------------------
(  508)       	     ! -- 1. Hermitian part -- !	
(  509) 	
(  510)       	     UPAR0 = DFACTPERI * (1. - NWCW)
(  511) 
(  512)              fx(1:nupar,1) = SGG(1:nupar,1,1)
(  513)              fx(1:nupar,2) = SGG(1:nupar,2,1)
(  514)              fx(1:nupar,3) = SGG(1:nupar,3,1)
(  515)              fx(1:nupar,4) = SGG(1:nupar,2,2)
(  516)              fx(1:nupar,5) = SGG(1:nupar,3,2)
(  517)              fx(1:nupar,6) = SGG(1:nupar,3,3)
(  518) 
(  519)              nfx = 6
(  520)              call cauchy_ppart6(upar,nupar,upar0,nfx,fx,vint,is_uniform)
(  521) 
(  522)              thetare(1,1) = vint(1)
(  523)              thetare(2,1) = vint(2)
(  524)              thetare(3,1) = vint(3)
(  525)              thetare(2,2) = vint(4)
(  526)              thetare(3,2) = vint(5)
(  527)              thetare(3,3) = vint(6)
(  528) 
(  529)              temp = THETARE(3,2)
(  530) 	     THETARE(3,2) = -THETARE(3,1)
(  531) 	     THETARE(3,1) = -temp
(  532) 	     temp = THETARE(1,1)
(  533) 	     THETARE(1,1) = THETARE(2,2)
(  534) 	     THETARE(2,2) = temp
(  535) 		
(  536)       	     THETARE(1,2) = THETARE(2,1)
(  537)       	     THETARE(1,3) = THETARE(3,1)
(  538)       	     THETARE(2,3) = THETARE(3,2)
(  539) 
(  540)       	     ! -- 2. Anti-hermitian part -- !
(  541)       	     call WINTERP1D_2(UPAR,NUPAR,SGG(1,1,1),UPAR0,THETAIM(1,1))
(  542)       	     call WINTERP1D_2(UPAR,NUPAR,SGG(1,2,1),UPAR0,THETAIM(2,1))
(  543)       	     call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,1),UPAR0,THETAIM(3,1))
(  544)       	     call WINTERP1D_2(UPAR,NUPAR,SGG(1,2,2),UPAR0,THETAIM(2,2))
(  545)       	     call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,2),UPAR0,THETAIM(3,2))
(  546)       	     call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,3),UPAR0,THETAIM(3,3))
(  547) 
(  548) 	     temp = THETAIM(3,2)
(  549) 	     THETAIM(3,2) = -THETAIM(3,1)
(  550) 	     THETAIM(3,1) = -temp
(  551) 	     temp = THETAIM(1,1)
(  552) 	     THETAIM(1,1) = THETAIM(2,2)
(  553) 	     THETAIM(2,2) = temp
(  554) 		
(  555)       	     THETAIM(1,2) = THETAIM(2,1)
(  556)       	     THETAIM(1,3) = THETAIM(3,1)
(  557)       	     THETAIM(2,3) = THETAIM(3,2)
(  558) 
(  559)              do M=1,3
(  560)                 do N=1,3
(  561)                    THETARE(M,N) = -THETARE(M,N) * DFACTPERI
(  562)                    THETAIM(M,N) = -PI * THETAIM(M,N) * abs(DFACTPERI)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 11

(  563)                 end do
(  564)       	     end do
(  565) 		
(  566)           end if  !resonance exists
(  567) 	
(  568) 	  do N=1,3
(  569)       	     do M=1,3
(  570)                 WSPEC(M,N) = WSPEC(M,N) + 2. * PI * WPFACT * BETAFACT * &
(  571) !                  & cmplx(THETARE(M,N), THETAIM(M,N))
(  572)                    & (THETARE(M,N) + zi * THETAIM(M,N))		
(  573) 
(  574)       	     end do
(  575)           end do
(  576) 
(  577)        end if ! skip zero if
(  578)        
(  579)     end do !harmonic sum
(  580) 
(  581)     ! add in extra term in sig33 from the w to u conversion
(  582) 
(  583)     WSPEC(3,3)=WSPEC(3,3)+2.*PI*WPFACT*BETAFACT*cmplx(g_33,0.0)
(  584) 
(  585)     call WROTATE_AORSA(BETA1,BETA2,WSPEC)
(  586) 
(  587)     end subroutine GETNONMAX_SIGMA_AORSA_NEW
(  588) 
(  589) !
(  590) !*************************************************************************
(  591) !
(  592) 
(  593) 
   237, Invariant assignments hoisted out of loop
   355, sum reduction inlined
   356, sum reduction inlined
   472, sum reduction inlined
   473, sum reduction inlined




























PGF90 (Version      7.0)          05/01/2008  16:42:33      page 12

(  594)     subroutine getnonmaxsigma_aorsa_newi(w,zspec,aspec,dens,bmag, &
(  595)        & k1,xi1,jnxi1,k2,xi2,jnxi2,nbessj,enorm,uparmin,uparmax, &
(  596)        & nupar,nuper,uper,upar,dfduper,dfdupar,wspec,ifail, &
(  597) 	 & l_first, l_interp, kperp_max, nkperp, xkprl0)
(  598) 
(  599) !   ---------------------------------------------------------
(  600) !   lee's version: interpolates for l_interp = .true
(  601) !           does full integrals for l_interp = .false.
(  602) !   ---------------------------------------------------------
(  603) 	
(  604)     implicit none
(  605) 
(  606) 
(  607)     logical, optional :: l_interp
(  608)     logical, optional :: l_first
(  609)     integer, optional :: nkperp
(  610)     real, optional :: kperp_max
(  611)     real :: kperp_max_l
(  612)     real :: dk, kperp, p
(  613)     integer :: nk, nkperp_l
(  614)     integer :: ll, mm, nn
(  615)     !nupar, -2 to nkper =2, 0 to nharm=1
(  616)     real, save, allocatable, dimension(:,:,:) :: fpint_11, fpint_33
(  617)     real, save, allocatable, dimension(:,:) :: fpint_31   ! no nharm
(  618)     real, save, allocatable, dimension(:,:) :: pint_11, pint_33
(  619)     real, save, allocatable, dimension(:) :: pint_31
(  620)     real, intent(in) :: w,zspec,aspec,dens,bmag
(  621)     real, dimension(3) :: k1,k2
(  622)     integer, intent(in) :: nupar,nuper,nbessj
(  623)     real, dimension(nuper) :: xi1,xi2
(  624)     real, dimension(nuper, nbessj), intent(in) :: jnxi1,jnxi2
(  625)     real, intent(in) :: enorm,uparmin,uparmax
(  626)     real, dimension(nuper), intent(in) :: uper
(  627)     real, dimension(nupar), intent(in):: upar
(  628)     real, dimension(nuper,nupar), intent(in) :: dfduper,dfdupar
(  629)     real, save, allocatable, dimension(:,:) ::  dfdthp
(  630)     complex, dimension(3,3), intent(inout) :: wspec
(  631)     complex :: sig_11, sig_21, sig_22, sig_31, sig_32, sig_33
(  632)     complex :: sig_fact
(  633)     integer, intent(inout) :: ifail
(  634)     real, parameter::  EOVERAMU = 9.58084e7
(  635)     real, parameter:: wp2fact=1.745915
(  636)     real, parameter:: mpc2=938271998.38
(  637)     real, parameter:: c=2.99792458e8
(  638)     real, parameter:: pi=3.141592653597932384
(  639)     real :: ga_33(nupar)
(  640)     real :: w2,wp2,wpfact,wcw,rrp,rrm,rr,irr, du_3, g_33j, xkprl0
(  641)     real, save :: g_33, n_save, b_save
(  642)     real :: mut0,sqmut0,kpara1, kpara0, npara1, npara0, verp_norm
(  643)     real :: isq2,cupar,cuper,nwcw,dfactpar,dfactper, dfactper0, lf0,lnf0uper
(  644)     real :: dfactperi, a1, a2, a3, a4, a5,beta1,beta2
(  645)     real :: upar0, factor, kperp2, vperp_norm2
(  646)     real :: ssgg_11, ssgg_31, ssgg_33, du, temp, kperp_f
(  647)     integer :: nharm, iharm, j, k, m, n, dn
(  648)     complex :: wref(3,3)
(  649)     real :: rerror, ierror, i_fact, r_fact, vperp_norm
(  650)     real :: thtrp_11,thtrp_21,thtrp_22,thtrp_31,thtrp_32,thtrp_33
(  651)     real :: o_thtrp_11,o_thtrp_21,o_thtrp_22,o_thtrp_31,o_thtrp_32,o_thtrp_33






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 13

(  652)     real :: e_thtrp_11,e_thtrp_21,e_thtrp_22,e_thtrp_31,e_thtrp_32,e_thtrp_33
(  653)     real :: thtip_11,thtip_21,thtip_22,thtip_31,thtip_32,thtip_33
(  654)     real :: thtrm_11,thtrm_21,thtrm_22,thtrm_31,thtrm_32,thtrm_33
(  655)     real :: o_thtrm_11,o_thtrm_21,o_thtrm_22,o_thtrm_31,o_thtrm_32,o_thtrm_33
(  656)     real :: e_thtrm_11,e_thtrm_21,e_thtrm_22,e_thtrm_31,e_thtrm_32,e_thtrm_33
(  657)     real :: thtim_11,thtim_21,thtim_22,thtim_31,thtim_32,thtim_33
(  658)     real, dimension(nupar) :: temp_11,temp_21,temp_22,temp_31,temp_32,temp_33
(  659)     real, dimension(nupar) :: sg_11,sg_21,sg_22,sg_31,sg_32,sg_33
(  660) 
(  661) 
(  662) 
(  663) 
(  664)     logical, parameter :: use_ppart6 = .true.
(  665)     logical :: is_uniform 
(  666)     integer, parameter :: nfxmax = 9
(  667)     real*8, dimension(nfxmax) ::  vint
(  668)     real*8, dimension(nupar,nfxmax) :: fx
(  669)     integer :: nfx
(  670)     real*8 :: dx,dh,tol
(  671)     integer :: i
(  672) 
(  673) !  check to make sure that the v_par mesh is uniform
(  674) !  if we need to check par, why not perp as well?
(  675) 
(  676)     is_uniform = .true.
(  677)     tol = 1.0d-7
(  678)     dh = upar(2)-upar(1)
(  679)     do i=1,nupar-1
(  680)        dx = upar(i+1)-upar(i)
(  681)        is_uniform = abs(dx-dh).le. tol*dx
(  682)        if (.not.is_uniform) exit
(  683)     enddo
(  684) 
(  685) 
(  686) !  create a local value of nkperp
(  687)     nkperp_l = nkperp !don't change the calling arguement.
(  688) 
(  689)     !are the storage arrays allocated?
(  690)     !nupar; -2 to nkperp + 2, 0 to nharm + 1 (0 to nbessj -1)
(  691)     if(.not. allocated(fpint_11)) then
(  692)        if(nkperp_l .lt. 0) then
(  693)           nkperp_l = 0  !need to have at least one slot in the nk dimension
(  694)        end if !end if set nkperp_1
(  695)     
(  696) !  allcate storate arrays for interpolation/integration
(  697) !  fpint group stores values for interpolation
(  698) !  three are needed:  one each for sig_11, sig_f33, and sig_31
(  699) !  pint stores the values of the perpendicular integral for the actual k_perp*vperp/omega_c
(  700) !  for fpint, the range is:  the parallel mesh; the perpendicular mesh +/- 2 for interpolation;
(  701) !  and the harmonic index  (no offset)
(  702) !  dfdthp is a common factor for all of sigma that is closely related to dfdtheta
(  703) 
(  704)        allocate(fpint_11(1:nupar, -2:nkperp_l+2, 0:nbessj-1),  &
(  705)             &   fpint_33(1:nupar, -2:nkperp_l+2, 0:nbessj-1),  &
(  706)             &   fpint_31(1:nupar, -2:nkperp_l+2),  &
(  707)             &   pint_11(1:nupar, 0:nbessj-1),	&
(  708)             &   pint_33(1:nupar, 0:nbessj-1),	&
(  709)             &   pint_31(1:nupar),               &






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 14

(  710)             &   dfdthp(1:nuper,1:nupar))
(  711)     else  !check for size
(  712)        if((size(fpint_11,2) .ne. nkperp_l + 5)  &
(  713)           &   .or. (size(fpint_11,1) .ne. nupar)  &
(  714)           &   .or. (size(fpint_11,3) .ne. nbessj)) then
(  715)           deallocate(fpint_11,fpint_33,fpint_31,pint_11,pint_33,pint_31)
(  716)           print*, 'arrays changed size, reallocated'
(  717)           allocate(fpint_11(1:nupar, -2:nkperp_l+2, 0:nbessj-1),  &
(  718)          &   fpint_33(1:nupar, -2:nkperp_l+2, 0:nbessj-1),  &
(  719)          &   fpint_31(1:nupar, -2:nkperp_l+2),  &
(  720)          &   pint_11(1:nupar, 0:nbessj-1),	&
(  721)          &   pint_33(1:nupar, 0:nbessj-1),	&
(  722)          &   pint_31(1:nupar),			&
(  723)          &   dfdthp(1:nuper,1:nupar))
(  724)        end if !what size
(  725)     end if  !not allocated
(  726) !have b or n changed?  if yes, then l_first must be true
(  727)     if(((b_save - bmag)**2/bmag**2 + (n_save - dens)**2/dens**2)  &
(  728)        &  .gt. 10d-6) then
(  729)        l_first = .true.
(  730)     end if  !end if b or n changed
(  731)     n_save = dens
(  732)     b_save = bmag
(  733)     
(  734) 
(  735)     ifail=0
(  736) 
(  737)     w2=w*w    !omega rf squared
(  738)     wp2=dens*zspec**2*wp2fact/aspec !plasma frequency squared
(  739)     wpfact=wp2/w2  !multiplying factor for sigma
(  740)     wcw=bmag*zspec*eoveramu/aspec/w  !cyclotron frequency/rf frequency
(  741)     beta1=atan2(k1(2),k1(1))  !angle of perp k1
(  742)     beta2=atan2(k2(2),k2(1))  !angle of perp k2
(  743)     
(  744)     kpara1 = k1(3)  ! parallel wave vector
(  745)     kpara0 = xkprl0 ! no upshift version
(  746)     
(  747)     npara1 = kpara1 * c/w  ! parallel index of refraction
(  748)     npara0 = kpara0 * c/w  ! no upshift version
(  749)     
(  750)     mut0=0.5*mpc2*aspec/enorm !a factor for converting
(  751)     sqmut0=sqrt(mut0)
(  752)     
(  753)     dfactper  = npara1 / sqmut0   !puts in the velocity nomalization
(  754)     dfactper0 = npara0 / sqmut0   !puts in the velocity nomalization
(  755)     
(  756)     dfactperi = 1.0 / dfactper
(  757)     isq2=sqrt(0.5)
(  758)     nharm=nbessj-2  !bessel routine starts with array index 1 == j0 
(  759)        !and one order higher than nharm is needed
(  760)     kperp2 = k1(1)*k1(1)+ k1(2)*k1(2)
(  761)     kperp = sqrt(kperp2)
(  762)     r_fact = -dfactperi
(  763)     i_fact = -pi * abs(dfactperi)
(  764) 
(  765)     vperp_norm2 = mut0*wcw*wcw*w2/c/c/kperp2  !used in bessel idendities for pependicular velocity integrals.
(  766)     vperp_norm = sqrt(vperp_norm2)  ! need to fix kperp = 0 bess argument normalization need to check.
(  767) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 15

(  768)     sig_fact = 2.0 * pi * wpfact
(  769)     kperp_max_l = kperp_max  !keep a local copy that can be changed
(  770) 
(  771) !      -------------------------------------------------------
(  772) !      do extra integral (stix) to convert all elements to "u"
(  773) !      do perpendicular integral by inline trapezoidal rule
(  774) !      and parallel integral by simpson's rule
(  775) !      -------------------------------------------------------
(  776)        
(  777) 
(  778) !  independent of interpolation or not, we need the extra factor per
(  779) !  stix
(  780)     if(l_first .or. .not. l_interp) then
(  781)        du = (uper(nuper) - uper(1))/(nuper - 1)
(  782)           do j = 1, nupar  !par loop for g_33
(  783)              g_33j = 0.0
(  784)              do k = 2, nuper - 1  !perp loop for g_33
(  785)                 g_33j = g_33j +            &
(  786)              &     upar(j)*(uper(k)*dfdupar(k,j)-upar(j)*dfduper(k,j))
(  787)              end do !nperp loop for 33 integral
(  788) 
(  789)           k = nuper  !do the last point of trapazoidal integratin
(  790)           ga_33(j) = g_33j +                       &
(  791)    &          0.5 * upar(j)*(uper(k)*dfdupar(k,j)-upar(j)*dfduper(k,j))
(  792)        end do  ! end vpar loop all values are filled
(  793)        call eqsimpson1d_2(nupar, upar, ga_33, g_33)
(  794)        g_33 = g_33 * du
(  795)        
(  796)     end if !l_first or not l_interp)       
(  797) 
(  798) !  the derivative combination in the conductivity can be precomputed
(  799)        do j = 1, nupar
(  800)           do k = 1 , nuper
(  801)              dfdthp(k,j) = upar(j) * dfduper(k,j) - uper(k) * dfdupar(k,j)
(  802) 	     
(  803) 	     
(  804) !            --------------------------------------------
(  805) !            Approximate 2nd term with no upshift, xkprl0
(  806) !           ---------------------------------------------	     	     
(  807)              dfdthp(k,j) = dfduper(k,j) - dfactper0 * dfdthp(k,j)
(  808) 	     
(  809) 	     
(  810) !t  his isn't really dfdth now, but a combination that is used
(  811)           end do  ! vperp loop
(  812)        end do !vpar loop
(  813) 
(  814) 
(  815) !      -----------------------------------------------
(  816) !      loop over harmonics:  this loop fills integrals
(  817) !      -----------------------------------------------
(  818) 
(  819) !  logic for dealing with interp/no_interp--
(  820) !  for no interp, set kperp to the value we want, and indecies so we execute only once
(  821)     if(l_interp) then  !going to interpolate--set up loop
(  822)        nk = 0 !starting point for fill loop
(  823)        dn = 1 !index increment for fill loop
(  824)        dk = kperp_max_l/nkperp_l  !k_perp increment for fill loop
(  825)     else






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 16

(  826)        nk = 1  !start at nk = 1
(  827)        dn = 3  !big jump to exit after first loop
(  828)        nkperp_l = 1  !one time through loop
(  829)        dk = kperp  !k_perp for "exact" calculation
(  830)     end if
(  831)     if(l_first .or. .not. l_interp) then  !for these cases, we need to do perp integrals
(  832) !the loop starts with 0 and increments to nkperp+2 for l_interp, but with 1 for
(  833) !one loop for .not. l_interp.
(  834)        do  !this loop will either fill the kperp tables, or calculate one value
(  835)           if (nk .gt. nkperp_l + 2) exit  !need to fill two past nkperp
(  836)              kperp_f = nk*dk
(  837)              if(kperp_f .lt. 1.0e-10) then
(  838)                 kperp_f = 1.0e-8  ! don't let kperp too near zero
(  839)              end if
(  840)    
(  841)    !over all logic comments:
(  842)    ! sigma has nine elements, and has a sum over harmonic numbers plus to minus
(  843)    ! a max.  when sigma is written for e+ and e-, and has kperp in the x direction,
(  844)    ! as is the case here becuase other directions are handled via rotations,
(  845)    ! the elements involve the following bessel functions for a harmonic number l
(  846)    !              1                        2                        3
(  847)    !  1   j(l+1)**2*vperp**2       j(l+1)j(l-1)*vperp**2    j(l+1)j(l)*vperp*vpar
(  848)    !  2   j(l+1)j(l-1)*vperp**2    j(l-1)j(l-1)*vperp**2    j(l-1)j(l)*vperp*vpar
(  849)    !  1   j(l+1)*j(l)*vperp*vpar   j(l-1)j(l)*vperp*vpar    j(l)j(l)*vpar**2
(  850)    !  two types of symmetries and the use of bessel function identities allow us
(  851)    !  to reduce the 2*nharm*9 terms to nharm*2
(  852)    !  first we note the symmetry in sigma when using +/- coordinates
(  853)    !  this reduces the nine elements to six
(  854)    !  we can use bessel function identities to get 12, and 13 form 11 and 33
(  855)    !  except for nharm = 1
(  856)    ! for 12, observe that 2 * l * j(l,z) / z = j(l+1,z) + j(l-1,)
(  857)    ! if we square this term (33) and then substract the correct entries for j(l-1), j(l+1)
(  858)    ! we can get the cross term.  an extra factor normalization factor must be used to correct
(  859)    ! the vperp**2 for the enorm and for kperp that is in the z.
(  860)    !  for 13, we do the same thing except use
(  861)    ! for harmonics, we note that on changing the sign of l,  l+1=> -(l-1); l=>-l; l-1=>-(l+1)
(  862)    ! this allows the following idendifications:
(  863)    !  11<=>22 with no sign change--(pairs of bessel functions with the same odd/even
(  864)    !  index parity do not change sign on index sign changes
(  865)    !  12=21=>12=21 , 33(no changes)
(  866)    !  -31=>-32; -32=>32
(  867)    !..all symmetries preserved.
(  868)    
(  869)              iharm = 0  !need 31 for iharm = 0
(  870)    !
(  871)    ! -- build array with integrand -- !
(  872)    ! -- bessel functions are now calculated inside
(  873)    
(  874)              call wmatprecalc_aorsa(zspec, aspec, enorm, bmag, kperp_f, uper,  &
(  875)                  &  nuper, nbessj, 2*nbessj+8,xi1, jnxi1, ifail)
(  876)              if(ifail .ne. 0) then
(  877)                 stop 'bessel function failure in interp intialize'
(  878)              end if  !bessel function failure
(  879)    
(  880)              do j=1,nupar   !start vapr loop for filling iharm = 0
(  881)                 ssgg_11 = 0.0
(  882)                 ssgg_31 = 0.0
(  883)                 ssgg_33 = 0.0






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 17

(  884)                 do k = 2, nuper - 1  !do center points for perp integrals
(  885)                    lf0 = dfdthp(k,j) * jnxi1(k,1)
(  886)                    ssgg_33 = ssgg_33 + lf0 * jnxi1(k,1)
(  887)                    lf0 = uper(k) * lf0
(  888)                    ssgg_11 = ssgg_11 + uper(k) * jnxi1(k,1) * lf0
(  889)                    ssgg_31 = ssgg_31 + upar(j) * jnxi1(k,2) * lf0
(  890)                 end do !vperp
(  891)    
(  892)                 k = nuper  ! do last point for perp integrals--1st point is zero.
(  893)    
(  894)                 lf0 = dfdthp(k,j) * jnxi1(k,1)
(  895)                 ssgg_33 = ssgg_33 + lf0 * jnxi1(k, 1)
(  896)                 lf0 = uper(k) * lf0
(  897)                 ssgg_11 = ssgg_11 + uper(k) * jnxi1(k,1) * lf0
(  898)                 ssgg_31 = ssgg_31 + upar(j) * jnxi1(k,2) * lf0
(  899)    
(  900)                 ssgg_11 = ssgg_11 * 0.5
(  901)                 ssgg_31 = ssgg_31 * isq2
(  902)    
(  903)                 fpint_11(j,nk,iharm) = ssgg_11 * du
(  904)                 fpint_33(j,nk,iharm) = ssgg_33 * du
(  905)                 fpint_31(j,nk) = ssgg_31 * du
(  906)              end do !vpar
(  907)    !  the 11 and 33 terms are sufficient for all but iharm = 0
(  908)    
(  909)              do iharm = 1 , nharm + 1
(  910)    !do preliminaries for harmonic loop
(  911)    
(  912)    
(  913)    ! -- build array with integrand for the rest of nharms--need one more than nharm!
(  914)    
(  915)              do j=1,nupar
(  916)                 ssgg_11 = 0.0
(  917)                 ssgg_31 = 0.0
(  918)                 ssgg_33 = 0.0
(  919)    
(  920)    
(  921)                 do k = 2, nuper - 1  !do center points for perp integrals
(  922)                    lf0 = dfdthp(k,j) * jnxi1(k,iharm+1)**2
(  923)                    ssgg_33 = ssgg_33 + lf0
(  924)                    ssgg_11 = ssgg_11 + uper(k) * uper(k) * lf0
(  925)                 end do !vperp
(  926)    
(  927)    ! do last point for perp integrals--1st point is zero.
(  928)    
(  929)                 lf0 = dfdthp(nuper,j) * jnxi1(nuper,iharm+1)**2
(  930)    
(  931)                 ssgg_33 = ssgg_33 + lf0
(  932)    
(  933)                 ssgg_11 = ssgg_11 + uper(nuper) * uper(nuper) * lf0
(  934)                 ssgg_11 = ssgg_11 * 0.5
(  935)    ! now copy into fipint arrays
(  936)                 fpint_11(j,nk,iharm) = ssgg_11 * du
(  937)                 fpint_33(j,nk,iharm) = ssgg_33 * du
(  938)              end do !vpar
(  939)           end do !iharm for generating integrals
(  940)    
(  941)    






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 18

(  942)           nk = nk + dn  !i'm doing the do loop indexing myself to control 1st loop
(  943)        end do !fill do loop over kperp (one kperp for exact)
(  944)     if(l_interp .and. l_first) then  !fill fpint with extra points for interp
(  945) !  use symmetries about origin to add extra terms for interpolation
(  946)        fpint_11(1:nupar,-2,0:nharm+1) =   fpint_11(1:nupar,2,0:nharm+1)
(  947)        fpint_11(1:nupar,-1,0:nharm+1) =   fpint_11(1:nupar,1,0:nharm+1)
(  948)        fpint_33(1:nupar,-2,0:nharm) =   fpint_33(1:nupar,2,0:nharm)
(  949)        fpint_33(1:nupar,-1,0:nharm) =   fpint_33(1:nupar,1,0:nharm)
(  950)        fpint_31(1:nupar,-2) = - fpint_31(1:nupar,2)
(  951)        fpint_31(1:nupar,-1) = - fpint_31(1:nupar,1)
(  952)     end if !put in end points at kperp = 0
(  953)     end if !if we do perp integrals
(  954)     sig_11 = cmplx(0.,0.)
(  955)     sig_21 = cmplx(0.,0.)
(  956)     sig_22 = cmplx(0.,0.)
(  957)     sig_31 = cmplx(0.,0.)
(  958)     sig_32 = cmplx(0.,0.)
(  959)     sig_33 = cmplx(0.,0.)
(  960) !-----------------------------------------------------------------------------------------
(  961) !-----------------------------------------------------------------------------------------
(  962) !-----------------------------------------------------------------------------------------
(  963) !  the remaining code either uses the exact integrals, not l_interp, or interpolates in kperp.	
(  964)     du_3 = (upar(nupar)-upar(1))/real(nupar-1)/3.
(  965)     if(l_interp) then
(  966)        dk = kperp_max_l/nkperp_l
(  967)        nk = kperp/dk  + 0.5
(  968)        p = kperp/dk - nk
(  969) ! -- build array with interpolation -- !
(  970)        if(.true.) then  !fourth order
(  971)           a1 = (p*p-1.)*p*(p-2.)/24.
(  972)           a2 = -(p-1.)*p*(p*p-4.)/6.
(  973)           a3 = (p*p-1.)*(p*p-4.)/4.
(  974)           a4 = -(p+1.)*p*(p*p-4.)/6.
(  975)           a5 = (p*p-1.)*p*(p+2.)/24.
(  976)           pint_11(1:nupar,0:nharm+1) =   &
(  977)             &    fpint_11(1:nupar,nk-2,0:nharm+1) * a1 &
(  978)             & +  fpint_11(1:nupar,nk-1,0:nharm+1) * a2 &
(  979)             & +  fpint_11(1:nupar,nk  ,0:nharm+1) * a3 &
(  980)             & +  fpint_11(1:nupar,nk+1,0:nharm+1) * a4 &
(  981)             & +  fpint_11(1:nupar,nk+2,0:nharm+1) * a5
(  982) 
(  983)           pint_33(1:nupar,0:nharm) =   &
(  984)             &    fpint_33(1:nupar,nk-2,0:nharm) * a1	&
(  985)             & +  fpint_33(1:nupar,nk-1,0:nharm) * a2	&
(  986)             & +  fpint_33(1:nupar,nk  ,0:nharm) * a3     &
(  987)             & +  fpint_33(1:nupar,nk+1,0:nharm) * a4	&
(  988)             & +  fpint_33(1:nupar,nk+2,0:nharm) * a5
(  989) 
(  990)           pint_31(1:nupar) =   &
(  991)             &    fpint_31(1:nupar, nk-2) * a1   &
(  992)             & +  fpint_31(1:nupar, nk-1) * a2   &
(  993)             & +  fpint_31(1:nupar, nk  ) * a3   &
(  994)             & +  fpint_31(1:nupar, nk+1) * a4   &
(  995)             & +  fpint_31(1:nupar, nk+2) * a5
(  996) 
(  997)        else	! second order
(  998)           a2 = p*(p-1.)/2.
(  999)           a3 = (1.-p*p)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 19

( 1000)           a4 = p*(p+1.)/2.
( 1001)           pint_11(1:nupar,0:iharm+1) =   &
( 1002)             & +  fpint_11(1:nupar,nk-1,0:nharm+1) * a2	&
( 1003)             & +  fpint_11(1:nupar,nk  ,0:nharm+1) * a3	&
( 1004)             & +  fpint_11(1:nupar,nk+1,0:nharm+1) * a4
( 1005) 
( 1006)           pint_33(1:nupar,0:iharm+1) =   &
( 1007)             & +  fpint_33(1:nupar,nk-1,0:nharm) * a2   &
( 1008)             & +  fpint_33(1:nupar,nk  ,0:nharm) * a3   &
( 1009)             & +  fpint_33(1:nupar,nk+1,0:nharm) * a4
( 1010) 
( 1011)           pint_31(1:nupar) =   &
( 1012)             & +  fpint_31(1:nupar, nk-1) * a2   &
( 1013)             & +  fpint_31(1:nupar, nk)   * a3   &
( 1014)             & +  fpint_31(1:nupar, nk+1) * a4
( 1015)        end if
( 1016) 
( 1017)     else !integrals are already exactly done for exact--just copy
( 1018)        pint_11(1:nupar,0:nharm+1) = fpint_11(1:nupar,1,0:nharm+1)
( 1019)        pint_33(1:nupar,0:nharm) = fpint_33(1:nupar,1,0:nharm)
( 1020)        pint_31(1:nupar) = fpint_31(1:nupar,1)
( 1021)     end if
( 1022) 
( 1023) !      the perp integrals have been calculated/interpolated now do
( 1024) !      parallel, but reuse them for negative harmonics
( 1025) 
( 1026)     do iharm = 0, nharm
( 1027) !do preliminaries for harmonic loop
( 1028)        nwcw=real(iharm)*wcw  !l*omega_cyc
( 1029)        sg_11(1:nupar) = pint_11(1:nupar,iharm + 1)
( 1030) 
( 1031) ! do the 31, 32, 21, 22 compression
( 1032) 	
( 1033)        select case(iharm)
( 1034)           case(0) !perp blocks are all j1*j1
( 1035)              sg_22(1:nupar) =   sg_11(1:nupar)  ! no -2 for 0 but they are the same
( 1036)              sg_21(1:nupar) = - sg_22(1:nupar)     ! 12--22 are anti symmetric
( 1037)              sg_31(1:nupar) =   pint_31(1:nupar) !this time it has the vpar in it
( 1038)              sg_32(1:nupar) = - pint_31(1:nupar)
( 1039)           case default
( 1040)              sg_22(1:nupar) =   pint_11(1:nupar,iharm - 1)!  look two back for 22
( 1041)              sg_21(1:nupar) = -0.5*(sg_11(1:nupar)  &
( 1042)              & +  sg_22(1:nupar))                &
( 1043)              & +  vperp_norm2*iharm*iharm*pint_33(1:nupar,iharm)  ! use bessel function identity for 21
( 1044)              sg_32(1:nupar) = sg_31(1:nupar)  !  this is from the previous harmonic
( 1045)              sg_31(1:nupar) = (sg_11(1:nupar) +  sg_21(1:nupar))*upar(1:nupar)  &
( 1046)              &  *isq2/iharm/vperp_norm
( 1047)        end select
( 1048) 
( 1049)        sg_33(1:nupar) = pint_33(1:nupar,iharm) * upar(1:nupar)**2
( 1050) 
( 1051) ! now have all the pieces, do the parallel integrals
( 1052) ! -- resonance relation -- !
( 1053) 
( 1054)        rrp=1. - nwcw - dfactper * uparmax
( 1055)        rrm=1. - nwcw - dfactper * uparmin
( 1056) 	
( 1057)        if (rrp*rrm.gt.0) then






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 20

( 1058) ! -- no resonance here -- !
( 1059) ! -- form the itegrands for the non-singular parallel integral
( 1060) 	
( 1061)           do j=1,nupar
( 1062)              rr = 1.- nwcw - dfactper * upar(j)
( 1063)              irr = 1. / rr
( 1064)              temp_11(j) = sg_11(j) * irr
( 1065)              temp_21(j) = sg_21(j) * irr
( 1066)              temp_22(j) = sg_22(j) * irr
( 1067)              temp_31(j) = sg_31(j) * irr
( 1068)              temp_32(j) = sg_32(j) * irr
( 1069)              temp_33(j) = sg_33(j) * irr
( 1070)           end do
( 1071) 
( 1072) !-- hermitian part of $\theta/(2\pi)$ --  use trap. integration!
( 1073) 
( 1074)           e_thtrp_11 = sum(temp_11(2:nupar-1:2))
( 1075)           e_thtrp_21 = sum(temp_21(2:nupar-1:2))
( 1076)           e_thtrp_31 = sum(temp_31(2:nupar-1:2))
( 1077)           e_thtrp_22 = sum(temp_22(2:nupar-1:2))
( 1078)           e_thtrp_32 = sum(temp_32(2:nupar-1:2))
( 1079)           e_thtrp_33 = sum(temp_33(2:nupar-1:2))
( 1080) 
( 1081)           o_thtrp_11 = sum(temp_11(3:nupar-1:2))
( 1082)           o_thtrp_21 = sum(temp_21(3:nupar-1:2))
( 1083)           o_thtrp_31 = sum(temp_31(3:nupar-1:2))
( 1084)           o_thtrp_22 = sum(temp_22(3:nupar-1:2))
( 1085)           o_thtrp_32 = sum(temp_32(3:nupar-1:2))
( 1086)           o_thtrp_33 = sum(temp_33(3:nupar-1:2))
( 1087) 
( 1088)           thtrp_11 = (temp_11(1)+temp_11(nupar)+2.*(o_thtrp_11 + 2.*e_thtrp_11))*du_3
( 1089)           thtrp_21 = (temp_21(1)+temp_21(nupar)+2.*(o_thtrp_21 + 2.*e_thtrp_21))*du_3
( 1090)           thtrp_31 = (temp_31(1)+temp_31(nupar)+2.*(o_thtrp_31 + 2.*e_thtrp_31))*du_3
( 1091)           thtrp_22 = (temp_22(1)+temp_22(nupar)+2.*(o_thtrp_22 + 2.*e_thtrp_22))*du_3
( 1092)           thtrp_32 = (temp_32(1)+temp_32(nupar)+2.*(o_thtrp_32 + 2.*e_thtrp_32))*du_3
( 1093)           thtrp_33 = (temp_33(1)+temp_33(nupar)+2.*(o_thtrp_33 + 2.*e_thtrp_33))*du_3
( 1094) 
( 1095) !-- anti-hermitian part of $\theta/(2\pi)$ --!
( 1096) 	
( 1097)           sig_11 = sig_11 +  cmplx(thtrp_11,0.0)
( 1098)           sig_21 = sig_21 +  cmplx(thtrp_21,0.0)
( 1099)           sig_22 = sig_22 +  cmplx(thtrp_22,0.0)
( 1100)           sig_31 = sig_31 +  cmplx(thtrp_31,0.0)
( 1101)           sig_32 = sig_32 +  cmplx(thtrp_32,0.0)
( 1102)           sig_33 = sig_33 +  cmplx(thtrp_33,0.0)
( 1103) 	
( 1104)        else
( 1105) 
( 1106) ! -- there is a resonance all right -- !
( 1107) ! -- 1. hermitian part -- !
( 1108)           upar0 = (1. - nwcw) * dfactperi
( 1109) 	
( 1110)           if (use_ppart6) then
( 1111)              fx(1:nupar,1) = sg_11(1:nupar)
( 1112)              fx(1:nupar,2) = sg_21(1:nupar)
( 1113)              fx(1:nupar,3) = sg_31(1:nupar)
( 1114)              fx(1:nupar,4) = sg_22(1:nupar)
( 1115)              fx(1:nupar,5) = sg_32(1:nupar)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 21

( 1116)              fx(1:nupar,6) = sg_33(1:nupar)
( 1117)              nfx = 6
( 1118)              call cauchy_ppart6(upar,nupar,upar0,nfx,fx,vint,is_uniform)
( 1119) 
( 1120)              thtrp_11 = vint(1)
( 1121)              thtrp_21 = vint(2)
( 1122)              thtrp_31 = vint(3)
( 1123)              thtrp_22 = vint(4)
( 1124)              thtrp_32 = vint(5)
( 1125)              thtrp_33 = vint(6)
( 1126)           else
( 1127)              call cauchy_ppart2(upar,nupar,upar0,sg_11,thtrp_11)
( 1128)              call cauchy_ppart2(upar,nupar,upar0,sg_21,thtrp_21)
( 1129)              call cauchy_ppart2(upar,nupar,upar0,sg_31,thtrp_31)
( 1130)              call cauchy_ppart2(upar,nupar,upar0,sg_22,thtrp_22)
( 1131)              call cauchy_ppart2(upar,nupar,upar0,sg_32,thtrp_32)
( 1132)              call cauchy_ppart2(upar,nupar,upar0,sg_33,thtrp_33)
( 1133) 
( 1134)           endif
( 1135) 
( 1136) ! -- 2. anti-hermitian part -- !
( 1137) 
( 1138)           call winterp1d_2(upar,nupar,sg_11,upar0,thtip_11)
( 1139)           call winterp1d_2(upar,nupar,sg_21,upar0,thtip_21)
( 1140)           call winterp1d_2(upar,nupar,sg_31,upar0,thtip_31)
( 1141)           call winterp1d_2(upar,nupar,sg_22,upar0,thtip_22)
( 1142)           call winterp1d_2(upar,nupar,sg_32,upar0,thtip_32)
( 1143)           call winterp1d_2(upar,nupar,sg_33,upar0,thtip_33)
( 1144) 
( 1145)           sig_11 = sig_11 +  cmplx(r_fact*thtrp_11,i_fact*thtip_11)
( 1146)           sig_21 = sig_21 +  cmplx(r_fact*thtrp_21,i_fact*thtip_21)
( 1147)           sig_22 = sig_22 +  cmplx(r_fact*thtrp_22,i_fact*thtip_22)
( 1148)           sig_31 = sig_31 +  cmplx(r_fact*thtrp_31,i_fact*thtip_31)
( 1149)           sig_32 = sig_32 +  cmplx(r_fact*thtrp_32,i_fact*thtip_32)
( 1150)           sig_33 = sig_33 +  cmplx(r_fact*thtrp_33,i_fact*thtip_33)
( 1151) 
( 1152)        end if
( 1153) 
( 1154)        if(iharm .eq. 0) cycle  !  skip the negative for zero
( 1155) 
( 1156)           nwcw = - nwcw
( 1157)  ! -- resonance relation -- !
( 1158) 
( 1159)           rrp = 1. - nwcw - dfactper * uparmax
( 1160)           rrm = 1. - nwcw - dfactper * uparmin
( 1161) 	
( 1162)           if (rrp*rrm.gt.0) then
( 1163) ! -- no resonance here -- !
( 1164) 	
( 1165)              do j=1,nupar
( 1166)                 rr = 1.- nwcw - dfactper * upar(j)
( 1167)                 irr = 1. / rr
( 1168)                 temp_11(j) = sg_11(j) * irr
( 1169)                 temp_21(j) = sg_21(j) * irr
( 1170)                 temp_22(j) = sg_22(j) * irr
( 1171)                 temp_31(j) = sg_31(j) * irr
( 1172)                 temp_32(j) = sg_32(j) * irr
( 1173)                 temp_33(j) = sg_33(j) * irr






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 22

( 1174)              end do
( 1175) 
( 1176) 	!-- hermitian part of $\theta/(2\pi)$ --  use trap. integration!
( 1177) 
( 1178)              e_thtrm_11 = sum(temp_11(2:nupar-1:2))
( 1179)              e_thtrm_21 = sum(temp_21(2:nupar-1:2))
( 1180)              e_thtrm_31 = sum(temp_31(2:nupar-1:2))
( 1181)              e_thtrm_22 = sum(temp_22(2:nupar-1:2))
( 1182)              e_thtrm_32 = sum(temp_32(2:nupar-1:2))
( 1183)              e_thtrm_33 = sum(temp_33(2:nupar-1:2))
( 1184) 	
( 1185)              o_thtrm_11 = sum(temp_11(3:nupar-1:2))
( 1186)              o_thtrm_21 = sum(temp_21(3:nupar-1:2))
( 1187)              o_thtrm_31 = sum(temp_31(3:nupar-1:2))
( 1188)              o_thtrm_22 = sum(temp_22(3:nupar-1:2))
( 1189)              o_thtrm_32 = sum(temp_32(3:nupar-1:2))
( 1190)              o_thtrm_33 = sum(temp_33(3:nupar-1:2))
( 1191) 
( 1192)              thtrm_11 = (temp_11(1)+temp_11(nupar)+2.*(o_thtrm_11 + 2.*e_thtrm_11))*du_3
( 1193)              thtrm_21 = (temp_21(1)+temp_21(nupar)+2.*(o_thtrm_21 + 2.*e_thtrm_21))*du_3
( 1194)              thtrm_31 = (temp_31(1)+temp_31(nupar)+2.*(o_thtrm_31 + 2.*e_thtrm_31))*du_3
( 1195)              thtrm_22 = (temp_22(1)+temp_22(nupar)+2.*(o_thtrm_22 + 2.*e_thtrm_22))*du_3
( 1196)              thtrm_32 = (temp_32(1)+temp_32(nupar)+2.*(o_thtrm_32 + 2.*e_thtrm_32))*du_3
( 1197)              thtrm_33 = (temp_33(1)+temp_33(nupar)+2.*(o_thtrm_33 + 2.*e_thtrm_33))*du_3
( 1198) 
( 1199) !-- anti-hermitian part of $\theta/(2\pi)$ is zero!
( 1200) !  signs and idex variations in the following reflect the negative harmonic
( 1201)              sig_11 = sig_11 +  cmplx(thtrm_22,0.0)
( 1202)              sig_21 = sig_21 +  cmplx(thtrm_21,0.0)
( 1203)              sig_22 = sig_22 +  cmplx(thtrm_11,0.0)
( 1204)              sig_31 = sig_31 -  cmplx(thtrm_32,0.0)
( 1205)              sig_32 = sig_32 -  cmplx(thtrm_31,0.0)
( 1206)              sig_33 = sig_33 +  cmplx(thtrm_33,0.0)
( 1207) 
( 1208) 
( 1209)           else
( 1210) 
( 1211) ! -- there is a resonance all right -- !
( 1212) ! -- 1. hermitian part -- !
( 1213) 	
( 1214)              upar0 = dfactperi * (1. - nwcw)
( 1215) 
( 1216) 
( 1217)              if (use_ppart6) then
( 1218) 
( 1219)                 fx(1:nupar,1) = sg_11(1:nupar)
( 1220)                 fx(1:nupar,2) = sg_21(1:nupar)
( 1221)                 fx(1:nupar,3) = sg_31(1:nupar)
( 1222)                 fx(1:nupar,4) = sg_22(1:nupar)
( 1223)                 fx(1:nupar,5) = sg_32(1:nupar)
( 1224)                 fx(1:nupar,6) = sg_33(1:nupar)
( 1225) 
( 1226)                 nfx = 6
( 1227)                 call cauchy_ppart6(upar,nupar,upar0,nfx,fx,vint,is_uniform)
( 1228) 
( 1229)                 thtrm_11 = vint(1)
( 1230)                 thtrm_21 = vint(2)
( 1231)                 thtrm_31 = vint(3)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 23

( 1232)                 thtrm_22 = vint(4)
( 1233)                 thtrm_32 = vint(5)
( 1234)                 thtrm_33 = vint(6)
( 1235) 
( 1236) 
( 1237)              else
( 1238) 
( 1239)                 call cauchy_ppart2(upar,nupar,upar0,sg_11,thtrm_11)
( 1240)                 call cauchy_ppart2(upar,nupar,upar0,sg_21,thtrm_21)
( 1241)                 call cauchy_ppart2(upar,nupar,upar0,sg_31,thtrm_31)
( 1242)                 call cauchy_ppart2(upar,nupar,upar0,sg_22,thtrm_22)
( 1243)                 call cauchy_ppart2(upar,nupar,upar0,sg_32,thtrm_32)
( 1244)                 call cauchy_ppart2(upar,nupar,upar0,sg_33,thtrm_33)
( 1245) 
( 1246)              endif
( 1247) 
( 1248) ! -- 2. anti-hermitian part -- !
( 1249)                 call winterp1d_2(upar,nupar,sg_11,upar0,thtim_11)
( 1250)                 call winterp1d_2(upar,nupar,sg_21,upar0,thtim_21)
( 1251)                 call winterp1d_2(upar,nupar,sg_31,upar0,thtim_31)
( 1252)                 call winterp1d_2(upar,nupar,sg_22,upar0,thtim_22)
( 1253)                 call winterp1d_2(upar,nupar,sg_32,upar0,thtim_32)
( 1254)                 call winterp1d_2(upar,nupar,sg_33,upar0,thtim_33)
( 1255) 
( 1256) 
( 1257) !  signs and idex variations in the following reflect the negative harmonic 
( 1258)                 sig_11 = sig_11 +  cmplx(r_fact*thtrm_22,i_fact*thtim_22)
( 1259)                 sig_21 = sig_21 +  cmplx(r_fact*thtrm_21,i_fact*thtim_21)
( 1260)                 sig_22 = sig_22 +  cmplx(r_fact*thtrm_11,i_fact*thtim_11)
( 1261)                 sig_31 = sig_31 -  cmplx(r_fact*thtrm_32,i_fact*thtim_32)
( 1262)                 sig_32 = sig_32 -  cmplx(r_fact*thtrm_31,i_fact*thtim_31)
( 1263)                 sig_33 = sig_33 +  cmplx(r_fact*thtrm_33,i_fact*thtim_33)
( 1264) 
( 1265)              end if  !resonance exists
( 1266) 
( 1267)          end do !harmonic sum
( 1268) 
( 1269)    ! add in extra term in sig33 from the w to u conversion
( 1270) 
( 1271)          wspec(1,1) = sig_fact *sig_11
( 1272)          wspec(2,1) = sig_fact *sig_21
( 1273)          wspec(2,2) = sig_fact *sig_22
( 1274)          wspec(3,1) = sig_fact *sig_31
( 1275)          wspec(3,2) = sig_fact *sig_32
( 1276)          wspec(3,3) = sig_fact * (sig_33 + cmplx(g_33,0.0))
( 1277)          wspec(1,2) = sig_fact *sig_21
( 1278)          wspec(1,3) = sig_fact *sig_31
( 1279)          wspec(2,3) = sig_fact *sig_32
( 1280) 
( 1281) !	 if(l_first) then
( 1282) !	  print*, 'normalized errors for exact = ', (.not. l_interp), 'calculations'
( 1283) !	  print*, ' i  j   real    imaginary'
( 1284) !	  do mm = 1,3
( 1285) !	     do nn = 1,3
( 1286) !		  rerror = (real(wspec(mm,nn))- real(wref(mm,nn)))  &
( 1287) !		   &  /real(wref(mm,nn))
( 1288) !		   ierror = (imag(wspec(mm,nn))- imag(wref(mm,nn)))  &
( 1289) !		   &  /imag(wref(mm,nn))






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 24

( 1290) !		   print '(i3, i3, 2e15.3)' , mm, nn, rerror ,ierror
( 1291) !	     end do
( 1292) !	  end do
( 1293) !	 end if
( 1294) 
( 1295)          call wrotate_aorsa(beta1,beta2,wspec)
( 1296)     return  !finished with orgiginal non iteration version
( 1297)     end subroutine getnonmaxsigma_aorsa_newi
( 1298) 
( 1299) !
( 1300) !*************************************************************************
( 1301) !
( 1302) 
   909, Invariant assignments hoisted out of loop
   915, Invariant assignments hoisted out of loop
  1074, sum reduction inlined
  1075, sum reduction inlined
  1076, sum reduction inlined
  1077, sum reduction inlined
  1078, sum reduction inlined
  1079, sum reduction inlined
  1081, sum reduction inlined
  1082, sum reduction inlined
  1083, sum reduction inlined
  1084, sum reduction inlined
  1085, sum reduction inlined
  1086, sum reduction inlined
  1178, sum reduction inlined
  1179, sum reduction inlined
  1180, sum reduction inlined
  1181, sum reduction inlined
  1182, sum reduction inlined
  1183, sum reduction inlined
  1185, sum reduction inlined
  1186, sum reduction inlined
  1187, sum reduction inlined
  1188, sum reduction inlined
  1189, sum reduction inlined
  1190, sum reduction inlined

























PGF90 (Version      7.0)          05/01/2008  16:42:33      page 25

( 1303)   subroutine GETNONMAX_SIGMA_AORSA_NEW1(W,ZSPEC,ASPEC,DENS,BMAG, &
( 1304)        & K1,XI1,JNXI1,K2,XI2,JNXI2,NBESSJ,ENORM,UPARMIN,UPARMAX, &
( 1305)        & NUPAR,NUPER,UPER,UPAR,DFDUPER,DFDUPAR,WSPEC,IFAIL)
( 1306)     implicit none
( 1307)     real, intent(IN):: W,ZSPEC,ASPEC,DENS,BMAG
( 1308)     real, dimension(3):: K1,K2
( 1309)     integer, intent(IN):: NUPAR,NUPER,NBESSJ
( 1310)     real, dimension(NUPER), intent(IN):: XI1,XI2
( 1311)     real, dimension(NUPER, NBESSJ), intent(IN):: JNXI1,JNXI2
( 1312)     real, intent(IN):: ENORM,UPARMIN,UPARMAX
( 1313)     real, dimension(NUPER), intent(IN):: UPER
( 1314)     real, dimension(NUPAR), intent(IN):: UPAR
( 1315)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER,DFDUPAR
( 1316)     real  DFDTH(NUPER,NUPAR)
( 1317)     complex, dimension(3,3), intent(OUT):: WSPEC
( 1318)     integer, intent(OUT):: IFAIL
( 1319) 
( 1320)     complex:: BETAFACT
( 1321) 
( 1322)     real, parameter::  EOVERAMU = 9.58084e7
( 1323)     real, parameter:: WP2FACT=1.745915
( 1324)     real, parameter:: MPC2=938271998.38
( 1325)     real, parameter:: C=2.99792458e8
( 1326)     real, parameter:: PI=3.141592653597932384
( 1327)     real, dimension(NUPER):: JN0XI1,JNP1XI1,JNM1XI1
( 1328)     real, dimension(NUPER):: JN0XI2,JNP1XI2,JNM1XI2
( 1329)     real, dimension(NUPER,3,3):: SSGG
( 1330)     real, dimension(NUPAR,3,3):: SGG
( 1331) 
( 1332)     real ga_33(nupar)
( 1333)     real, dimension(NUPAR,-1:NBESSJ-2) :: sgg_31
( 1334)     real, dimension(NUPAR,-1:NBESSJ-2) :: sgg_11
( 1335) 
( 1336)     real, dimension(NUPAR) :: sgg_31_last, sgg_21p
( 1337)     real, dimension(3,3):: THETARE,THETAIM
( 1338)     real:: W2,WP2,WPFACT,WCW,RRP,RRM,RR,IRR, du_3, g_33, g_33j
( 1339)     real:: MUT0,SQMUT0,BETA1,BETA2,KPARA1,NPARA1
( 1340)     real:: ISQ2,CUPAR,CUPER,NWCW,DFACTPAR,DFACTPER,LF0,LNF0UPER
( 1341)     real:: DFACTPERI
( 1342)     real:: UPAR0,SFACT0,SFACTP1,SFACTM1, factor, kperp2, vperp_norm2
( 1343)     real:: ssgg_11,ssgg_22,ssgg_31,ssgg_33,ssgg_32,ssgg_21,du, temp
( 1344)     integer:: NHARM,IHARM,NJ,NJP1,NJM1,J,K,M,N
( 1345) 
( 1346)     IFAIL=0
( 1347)     WSPEC(1:3,1:3) = cmplx(0.,0.)
( 1348)     W2=W*W
( 1349)     WP2=DENS*ZSPEC**2*WP2FACT/ASPEC
( 1350)     WPFACT=WP2/W2
( 1351)     WCW=BMAG*ZSPEC*EOVERAMU/ASPEC/W
( 1352)     BETA1=ATAN2(K1(2),K1(1))
( 1353)     BETA2=ATAN2(K2(2),K2(1))
( 1354)     KPARA1=K1(3)
( 1355)     NPARA1=KPARA1*C/W
( 1356)     MUT0=0.5*MPC2*ASPEC/ENORM
( 1357)     SQMUT0=SQRT(MUT0)
( 1358)     DFACTPER = NPARA1 / SQMUT0
( 1359)     DFACTPERI = 1.0 / DFACTPER
( 1360)     ISQ2=SQRT(0.5)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 26

( 1361)     NHARM=NBESSJ-2
( 1362)     kperp2 = k1(1)*k1(1)+ k1(2)*k1(2)
( 1363)     vperp_norm2 = mut0*wcw*wcw*w2/c/c/kperp2  ! need to fix kperp = 0
( 1364)     
( 1365)     
( 1366) 
( 1367) 
( 1368) !      -------------------------------------------------------
( 1369) !      do extra integral (STIX) to convert all elements to "U"
( 1370) !      do perpendicular integral by inline trapezoidal rule
( 1371) !      and parallel integral by simpson's rule
( 1372) !      -------------------------------------------------------
( 1373) 
( 1374)        do J = 1, NUPAR
( 1375) 	  g_33j = 0.0
( 1376) 
( 1377)           do K = 2, NUPER - 1
( 1378)              g_33j = g_33j + UPAR(J)*(UPER(K)*DFDUPAR(K,J)-UPAR(J)*DFDUPER(K,J))
( 1379)           end do
( 1380) 
( 1381) 
( 1382) 	  k = 1
( 1383)           g_33j = g_33j + 0.5 * UPAR(J)*(UPER(K)*DFDUPAR(K,J)-UPAR(J)*DFDUPER(K,J))
( 1384) 
( 1385) 
( 1386) 	  k = nuper
( 1387)           g_33j = g_33j + 0.5 * UPAR(J)*(UPER(K)*DFDUPAR(K,J)-UPAR(J)*DFDUPER(K,J))
( 1388) 
( 1389) 	
( 1390) 	  du = (uper(nuper) - uper(1))/(nuper - 1)
( 1391) 	  ga_33(j) = g_33j * du
( 1392) 
( 1393)        end do
( 1394)        
( 1395)        g_33  = 0.0
( 1396) 
( 1397) !      the uperp integral is done; now do parallel integral by simpson's rule
( 1398) 
( 1399)        call EQSIMPSON1D_2(NUPAR, UPAR, ga_33, g_33)
( 1400)        
( 1401) 
( 1402)        do k = 1 , nuper
( 1403)           do j = 1, nupar
( 1404) 	     DFDTH(k,j) = upar(j) * DFDUPER(k,j) - uper(k) * DFDUPAR(k,j)
( 1405) 	  end do
( 1406)        end do
( 1407) 
( 1408) 
( 1409) 
( 1410) 
( 1411) 
( 1412) !      -------------------
( 1413) !      Loop over harmonics
( 1414) !      -------------------
( 1415) 
( 1416)     do IHARM = -1, NHARM
( 1417)        NWCW=real(IHARM)*WCW  !L*omega_cyc
( 1418) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 27

( 1419)        BETAFACT=exp(cmplx(0.,IHARM*(BETA1-BETA2)))
( 1420)        NJ=ABS(IHARM)+1
( 1421)        NJP1=ABS(IHARM+1)+1
( 1422)        NJM1=ABS(IHARM-1)+1
( 1423)        SFACT0=real(sign(1,IHARM))**ABS(IHARM)
( 1424)        SFACTP1=real(sign(1,IHARM+1))**ABS(IHARM+1)
( 1425)        SFACTM1=real(sign(1,IHARM-1))**ABS(IHARM-1)
( 1426)        JN0XI1(1:NUPER)=SFACT0*JNXI1(1:NUPER,NJ)
( 1427)        JNP1XI1(1:NUPER)=SFACTP1*JNXI1(1:NUPER,NJP1)
( 1428)        JNM1XI1(1:NUPER)=SFACTM1*JNXI1(1:NUPER,NJM1)
( 1429) 
( 1430)        ! -- Build array with integrand -- !
( 1431)        
( 1432) 
( 1433) 	  
( 1434)        do J=1,NUPAR
( 1435) 	  
( 1436) 	  ssgg_11 = 0.0
( 1437) 	  ssgg_31 = 0.0
( 1438) 	  ssgg_33 = 0.0
( 1439) 
( 1440) 	  do K = 2, NUPER - 1
( 1441) 	    
( 1442)              LF0 = DFDUPER(K,J) - DFACTPER * dfdth(k,j)
( 1443)              ssgg_33 = ssgg_33 + JN0XI1(K)**2 *LF0
( 1444) 		 
( 1445)              LF0 = UPER(K) * JNP1XI1(K) * LF0
( 1446)              ssgg_11 = ssgg_11 + UPER(K) * JNP1XI1(K)* LF0
( 1447)              ssgg_31 = ssgg_31 + UPAR(J) * JN0XI1(K) * LF0
( 1448)           end do
( 1449) 	    
( 1450) 	  ssgg_11 = ssgg_11 * 0.5
( 1451) 	  ssgg_31 = ssgg_31 * ISQ2
( 1452) 	    
( 1453) 	    
( 1454) 	  k = 1
( 1455) 
( 1456) 	  LF0 = DFDUPER(K,J) - DFACTPER * dfdth(k,j)
( 1457) 	  ssgg_33 = ssgg_33 + 0.5 * JN0XI1(K)**2 *LF0 
( 1458) 	  
( 1459)           LF0 = UPER(K) * JNP1XI1(K) * LF0
( 1460)           ssgg_11 = ssgg_11 + 0.25 *       UPER(K) * JNP1XI1(K)* LF0  
( 1461)           ssgg_31 = ssgg_31 + 0.5 * ISQ2 * UPAR(J) * JN0XI1(K) * LF0
( 1462) 
( 1463) 
( 1464) 	  k = nuper
( 1465) 	  
( 1466) 	  LF0 = DFDUPER(K,J) - DFACTPER * dfdth(k,j)
( 1467) 	  ssgg_33 = ssgg_33 + 0.5 * LF0 * JN0XI1(K)**2
( 1468) 	  
( 1469) 	  LF0 = UPER(K) * JNP1XI1(K) * LF0
( 1470) 	  ssgg_11 = ssgg_11 + 0.25 *       UPER(K) * JNP1XI1(K)* LF0
( 1471)           ssgg_31 = ssgg_31 + 0.5 * ISQ2 * UPAR(J) * JN0XI1(K) * LF0
( 1472) 
( 1473)        !  end of the kperp loop
( 1474)        
( 1475)        
( 1476) 	






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 28

( 1477) 	  du = (uper(nuper) - uper(1))/(nuper - 1)
( 1478) 	  sgg_11(j,iharm) =  ssgg_11 * du
( 1479) 	  sgg_21p(j) =  ssgg_33 * du  ! this is a piece of 21
( 1480) 	  sgg_31(j,iharm) =	ssgg_31 * du
( 1481) 	  SGG(j,3,3) =	UPAR(J)**2 * sgg_21p(j)
( 1482) 
( 1483)        end do
( 1484)        
( 1485)        
( 1486) !      the perp integrals have been calculated now do
( 1487) !      parallel, but reuse them for negative harmonics
( 1488) 
( 1489)        if(iharm .eq. -1) cycle
( 1490) 	 
( 1491)        du_3 = (UPAR(NUPAR)-UPAR(1))/real(nupar-1)/3.	
( 1492) 	 SGG(1:nupar,1,1) = sgg_11(1:nupar,iharm)
( 1493) 	 
( 1494) 	 ! do the 31--32, 21, 22 compression
( 1495) 	 
( 1496) 	 select case(iharm)  
( 1497) 	 case(0)
( 1498)             SGG(1:nupar,2,2) = sgg_11(1:nupar,iharm)  ! no -2 for 0 but they are the same
( 1499) 	    SGG(1:nupar,2,1) = - SGG(1:nupar,2,2)     ! 12--21 are anti symmetric
( 1500) 	 case default
( 1501) 	    SGG(1:nupar,2,2) = sgg_11(1:nupar,iharm-2)!  look two back for 22
( 1502)             SGG(1:nupar,2,1) = -0.5*(SGG(1:nupar,1,1)+ SGG(1:nupar,2,2))&
( 1503) 	      &+ vperp_norm2*iharm*iharm*(sgg_21p(1:nupar))  ! use bessel function identity for 21
( 1504) 	 end select
( 1505) 
( 1506) 	 SGG(1:nupar,3,2) = sgg_31(1:nupar,iharm-1)
( 1507) 	 SGG(1:nupar,3,1) = sgg_31(1:nupar,iharm)
( 1508) 	 
( 1509) 	 	
( 1510)        ! -- Resonance relation -- !
( 1511)        
( 1512)        RRP=1. - NWCW - DFACTPER * UPARMAX 
( 1513)        RRM=1. - NWCW - DFACTPER * UPARMIN 
( 1514) 	 
( 1515) 	 
( 1516) 
( 1517)        if (RRP*RRM.GT.0) then
( 1518)           ! -- No resonance here -- !
( 1519) 	  
( 1520)           do J=1,NUPAR
( 1521)              RR = 1.- NWCW - DFACTPER * UPAR(J)
( 1522)              IRR = 1. / RR
( 1523)              do M=1,3
( 1524)                 do N=1,M
( 1525)                    SGG(J,M,N) = SGG(J,M,N) * IRR
( 1526)                 end do
( 1527)              end do
( 1528)           end do
( 1529) 	  
( 1530) 
( 1531)           !-- Hermitian part of $\Theta/(2\pi)$ --!
( 1532) 	    
( 1533) 	  THETARE(1,1) = (sgg(1,1,1)+sgg(nupar,1,1)+2.*sum(sgg(2:nupar-1,1,1)) +&
( 1534) 	       & 2.*sum(sgg(2:nupar-1:2,1,1)))*du_3






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 29

( 1535) 	  THETARE(2,1) = (SGG(1,2,1)+SGG(nupar,2,1)+2.*sum(SGG(2:nupar-1,2,1)) +&
( 1536) 	       & 2.*sum(SGG(2:nupar-1:2,2,1)))*du_3
( 1537) 	  THETARE(3,1) = (sgg(1,3,1)+sgg(nupar,3,1)+2.*sum(sgg(2:nupar-1,3,1)) +&
( 1538) 	       & 2.*sum(sgg(2:nupar-1:2,3,1)))*du_3
( 1539) 	  THETARE(2,2) = (sgg(1,2,2)+sgg(nupar,2,2)+2.*sum(sgg(2:nupar-1,2,2)) +&
( 1540) 	       & 2.*sum(sgg(2:nupar-1:2,2,2)))*du_3
( 1541)           THETARE(3,2) = (sgg(1,3,2)+sgg(nupar,3,2)+2.*sum(sgg(2:nupar-1,3,2)) +&
( 1542) 	       & 2.*sum(sgg(2:nupar-1:2,3,2)))*du_3
( 1543) 	  THETARE(3,3) = (sgg(1,3,3)+sgg(nupar,3,3)+2.*sum(sgg(2:nupar-1,3,3)) +&
( 1544) 	       & 2.*sum(sgg(2:nupar-1:2,3,3)))*du_3
( 1545) 	
( 1546) 	
( 1547) 	  do J=1,NUPAR ! restore sgg
( 1548) 	     RR = 1.- NWCW - DFACTPER * UPAR(J)
( 1549) 	     
( 1550)              do M=1,3
( 1551)                 do N=1,M
( 1552)                    SGG(J,M,N) = SGG(J,M,N) * RR
( 1553)                 end do
( 1554)              end do
( 1555) 	     
( 1556)           end do
( 1557) 	    
( 1558)  	  THETARE(1,2) = THETARE(2,1)
( 1559)           THETARE(1,3) = THETARE(3,1)
( 1560)           THETARE(2,3) = THETARE(3,2)
( 1561) 
( 1562)           !-- Anti-hermitian part of $\Theta/(2\pi)$ --!
( 1563)           THETAIM(1:3,1:3)=0.
( 1564) 
( 1565)        else
( 1566) 
( 1567)           ! -- There is a resonance all right -- !
( 1568)           ! -- 1. Hermitian part -- !
( 1569)           UPAR0 = (1. - NWCW) * DFACTPERI
( 1570) 	  
( 1571)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,1,1),THETARE(1,1))
( 1572)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,1),THETARE(2,1))
( 1573)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,1),THETARE(3,1))
( 1574)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,2),THETARE(2,2))
( 1575)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,2),THETARE(3,2))
( 1576)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,3),THETARE(3,3))
( 1577) 
( 1578)           THETARE(1,2) = THETARE(2,1)
( 1579)           THETARE(1,3) = THETARE(3,1)
( 1580)           THETARE(2,3) = THETARE(3,2)
( 1581) 
( 1582)           ! -- 2. Anti-hermitian part -- !
( 1583)           call WINTERP1D_2(UPAR,NUPAR,SGG(1,1,1),UPAR0,THETAIM(1,1))
( 1584)           call WINTERP1D_2(UPAR,NUPAR,SGG(1,2,1),UPAR0,THETAIM(2,1))
( 1585)           call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,1),UPAR0,THETAIM(3,1))
( 1586)           call WINTERP1D_2(UPAR,NUPAR,SGG(1,2,2),UPAR0,THETAIM(2,2))
( 1587)           call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,2),UPAR0,THETAIM(3,2))
( 1588)           call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,3),UPAR0,THETAIM(3,3))
( 1589) 
( 1590)           THETAIM(1,2) = THETAIM(2,1)
( 1591)           THETAIM(1,3) = THETAIM(3,1)
( 1592)           THETAIM(2,3) = THETAIM(3,2)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 30

( 1593) 	  
( 1594) 
( 1595)           do M=1,3
( 1596)              do N=1,3
( 1597)                 THETARE(M,N) = -THETARE(M,N) * DFACTPERI
( 1598)                 THETAIM(M,N) = -PI * THETAIM(M,N) * abs(DFACTPERI)
( 1599)              end do
( 1600)           end do
( 1601) 
( 1602)        end if
( 1603) 
( 1604)        do N=1,3
( 1605)           do M=1,3
( 1606)              WSPEC(M,N)=WSPEC(M,N)+2.*PI*WPFACT*BETAFACT*cmplx(THETARE(M,N),THETAIM(M,N))
( 1607)           end do
( 1608)        end do
( 1609) 
( 1610) 	 if(iharm .ne. 0) then  !  skip the negative for zero
( 1611) 
( 1612) 	    nwcw = - nwcw
( 1613) 
( 1614)       	  ! -- Resonance relation -- !
( 1615) 	  
( 1616) 	 
( 1617)           RRP = 1. - NWCW - DFACTPER * UPARMAX 
( 1618)           RRM = 1. - NWCW - DFACTPER * UPARMIN
( 1619) 	    
( 1620)           if (RRP*RRM.GT.0) then
( 1621)       	 ! -- No resonance here -- !
( 1622) 	 
( 1623)       	  do J=1,NUPAR
( 1624) 
( 1625)              RR = 1. - NWCW - DFACTPER * UPAR(J)
( 1626)              IRR = 1. / RR
( 1627)              do M=1,3
( 1628)                 do N = 1,M
( 1629)                    SGG(J,M,N) = SGG(J,M,N) * IRR
( 1630)                 end do
( 1631)              end do
( 1632)       	  end do
( 1633) 		
( 1634)           !-- Hermitian part of $\Theta/(2\pi)$ --!
( 1635) 	  THETARE(1,1) = (sgg(1,1,1)+sgg(nupar,1,1)+2.*sum(sgg(2:nupar-1,1,1)) +&
( 1636) 	       & 2.*sum(sgg(2:nupar-1:2,1,1)))*du_3
( 1637) 	  THETARE(2,1) = (SGG(1,2,1)+SGG(nupar,2,1)+2.*sum(SGG(2:nupar-1,2,1)) +&
( 1638) 	       & 2.*sum(SGG(2:nupar-1:2,2,1)))*du_3
( 1639) 	  THETARE(3,1) = (sgg(1,3,1)+sgg(nupar,3,1)+2.*sum(sgg(2:nupar-1,3,1)) +&
( 1640) 	       & 2.*sum(sgg(2:nupar-1:2,3,1)))*du_3
( 1641) 	  THETARE(2,2) = (sgg(1,2,2)+sgg(nupar,2,2)+2.*sum(sgg(2:nupar-1,2,2)) +&
( 1642) 	       & 2.*sum(sgg(2:nupar-1:2,2,2)))*du_3
( 1643)           THETARE(3,2) = (sgg(1,3,2)+sgg(nupar,3,2)+2.*sum(sgg(2:nupar-1,3,2)) +&
( 1644) 	       & 2.*sum(sgg(2:nupar-1:2,3,2)))*du_3
( 1645) 	  THETARE(3,3) = (sgg(1,3,3)+sgg(nupar,3,3)+2.*sum(sgg(2:nupar-1,3,3)) +&
( 1646) 	       & 2.*sum(sgg(2:nupar-1:2,3,3)))*du_3
( 1647) 	       
( 1648) 
( 1649) 		
( 1650)           do J=1,NUPAR  ! restore sgg






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 31

( 1651)              RR=1.- NWCW - DFACTPER * UPAR(J)
( 1652) 	     do M=1,3
( 1653)                 do N=1,M
( 1654)                    SGG(J,M,N) = SGG(J,M,N) * RR
( 1655)             	end do
( 1656)              end do
( 1657)       	  end do
( 1658) 
( 1659) 	  temp = THETARE(3,2)
( 1660) 	  THETARE(3,2) = -THETARE(3,1)
( 1661) 	  THETARE(3,1) = -temp
( 1662) 		
( 1663) 	  temp = THETARE(1,1)
( 1664) 	  THETARE(1,1) = THETARE(2,2)
( 1665) 	  THETARE(2,2) = temp
( 1666) 
( 1667)  	  THETARE(1,2) = THETARE(2,1)
( 1668)       	  THETARE(1,3) = THETARE(3,1)
( 1669)       	  THETARE(2,3) = THETARE(3,2)
( 1670) 
( 1671)       	 !-- Anti-hermitian part of $\Theta/(2\pi)$ --!
( 1672)       	 THETAIM(1:3,1:3)=0.
( 1673) 
( 1674)           else
( 1675) 
( 1676)       	 ! -- There is a resonance all right -- !
( 1677)       	 ! -- 1. Hermitian part -- !
( 1678) 	 
( 1679) 	 
( 1680)       	 UPAR0 = DFACTPERI * (1. - NWCW)
( 1681) 
( 1682)       	 call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,1,1),THETARE(1,1))
( 1683)       	 call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,1),THETARE(2,1))
( 1684)       	 call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,1),THETARE(3,1))
( 1685)       	 call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,2),THETARE(2,2))
( 1686)       	 call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,2),THETARE(3,2))
( 1687)       	 call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,3),THETARE(3,3))
( 1688) 
( 1689) 		 temp = THETARE(3,2)
( 1690) 		 THETARE(3,2) = -THETARE(3,1)
( 1691) 		 THETARE(3,1) = -temp
( 1692) 		 temp = THETARE(1,1)
( 1693) 		 THETARE(1,1) = THETARE(2,2)
( 1694) 		 THETARE(2,2) = temp
( 1695) 		
( 1696)       	 THETARE(1,2) = THETARE(2,1)
( 1697)       	 THETARE(1,3) = THETARE(3,1)
( 1698)       	 THETARE(2,3) = THETARE(3,2)
( 1699) 
( 1700)       	 ! -- 2. Anti-hermitian part -- !
( 1701)       	 call WINTERP1D_2(UPAR,NUPAR,SGG(1,1,1),UPAR0,THETAIM(1,1))
( 1702)       	 call WINTERP1D_2(UPAR,NUPAR,SGG(1,2,1),UPAR0,THETAIM(2,1))
( 1703)       	 call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,1),UPAR0,THETAIM(3,1))
( 1704)       	 call WINTERP1D_2(UPAR,NUPAR,SGG(1,2,2),UPAR0,THETAIM(2,2))
( 1705)       	 call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,2),UPAR0,THETAIM(3,2))
( 1706)       	 call WINTERP1D_2(UPAR,NUPAR,SGG(1,3,3),UPAR0,THETAIM(3,3))
( 1707) 
( 1708) 	 temp = THETAIM(3,2)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 32

( 1709) 	 THETAIM(3,2) = -THETAIM(3,1)
( 1710) 	 THETAIM(3,1) = -temp
( 1711) 	 temp = THETAIM(1,1)
( 1712) 	 THETAIM(1,1) = THETAIM(2,2)
( 1713) 	 THETAIM(2,2) = temp
( 1714) 		
( 1715)       	 THETAIM(1,2) = THETAIM(2,1)
( 1716)       	 THETAIM(1,3) = THETAIM(3,1)
( 1717)       	 THETAIM(2,3) = THETAIM(3,2)
( 1718) 
( 1719)          do M=1,3
( 1720)             do N=1,3
( 1721)                THETARE(M,N) = -THETARE(M,N) * DFACTPERI
( 1722)                THETAIM(M,N) = -PI * THETAIM(M,N) * abs(DFACTPERI)
( 1723)             end do
( 1724)       	 end do
( 1725) 		
( 1726) 
( 1727)           end if  !resonance exists
( 1728) 	   
( 1729) 	    do N=1,3
( 1730)       	 do M=1,3
( 1731)                 WSPEC(M,N)=WSPEC(M,N)+2.*PI*WPFACT*BETAFACT*cmplx(THETARE(M,N),THETAIM(M,N))
( 1732)       	 end do
( 1733)           end do
( 1734) 
( 1735) 	 end if ! zero skip if
( 1736)     end do !harmonic sum
( 1737) 
( 1738)     ! add in extra term in sig33 from the w to u conversion
( 1739) 
( 1740)     WSPEC(3,3)=WSPEC(3,3)+2.*PI*WPFACT*BETAFACT*cmplx(g_33,0.0)
( 1741)     
( 1742)     call WROTATE_AORSA(BETA1,BETA2,WSPEC)
( 1743)     
( 1744)   end subroutine GETNONMAX_SIGMA_AORSA_NEW1
( 1745) 
( 1746) !
( 1747) !*************************************************************************
( 1748) !
( 1749) 
  1374, Invariant assignments hoisted out of loop
  1434, Invariant assignments hoisted out of loop
  1533, sum reduction inlined
        sum reduction inlined
  1535, sum reduction inlined
        sum reduction inlined
  1537, sum reduction inlined
        sum reduction inlined
  1539, sum reduction inlined
        sum reduction inlined
  1541, sum reduction inlined
        sum reduction inlined
  1543, sum reduction inlined
        sum reduction inlined
  1635, sum reduction inlined
        sum reduction inlined
  1637, sum reduction inlined






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 33

        sum reduction inlined
  1639, sum reduction inlined
        sum reduction inlined
  1641, sum reduction inlined
        sum reduction inlined
  1643, sum reduction inlined
        sum reduction inlined
  1645, sum reduction inlined
        sum reduction inlined























































PGF90 (Version      7.0)          05/01/2008  16:42:33      page 34

( 1750)   subroutine GETNONMAX_SIGMA_AORSA_NEW0(W,ZSPEC,ASPEC,DENS,BMAG, &
( 1751)        & K1,XI1,JNXI1,K2,XI2,JNXI2,NBESSJ,ENORM,UPARMIN,UPARMAX, &
( 1752)        & NUPAR,NUPER,UPER,UPAR,DFDUPER,DFDUPAR,WSPEC,IFAIL)
( 1753)     implicit none
( 1754)     real, intent(IN):: W,ZSPEC,ASPEC,DENS,BMAG
( 1755)     real, dimension(3):: K1,K2
( 1756)     integer, intent(IN):: NUPAR,NUPER,NBESSJ
( 1757)     real, dimension(NUPER), intent(IN):: XI1,XI2
( 1758)     real, dimension(NUPER, NBESSJ), intent(IN):: JNXI1,JNXI2
( 1759)     real, intent(IN):: ENORM,UPARMIN,UPARMAX
( 1760)     real, dimension(NUPER), intent(IN):: UPER
( 1761)     real, dimension(NUPAR), intent(IN):: UPAR
( 1762)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER,DFDUPAR
( 1763)     complex, dimension(3,3), intent(OUT):: WSPEC
( 1764)     integer, intent(OUT):: IFAIL
( 1765) 
( 1766)     complex:: BETAFACT
( 1767)     real, parameter::  EOVERAMU = 9.58084e7
( 1768)     real, parameter:: WP2FACT=1.745915
( 1769)     real, parameter:: MPC2=938271998.38
( 1770)     real, parameter:: C=2.99792458e8
( 1771)     real, parameter:: PI=3.141592653597932384
( 1772)     real, dimension(NUPER):: JN0XI1,JNP1XI1,JNM1XI1
( 1773)     real, dimension(NUPER):: JN0XI2,JNP1XI2,JNM1XI2
( 1774)     real, dimension(NUPER,3,3):: SSGG
( 1775)     real, dimension(NUPAR,3,3):: SGG
( 1776)     real, dimension(3,3):: THETARE,THETAIM
( 1777)     real:: W2,WP2,WPFACT,WCW,RRP,RRM,RR,IRR
( 1778)     real:: MUT0,SQMUT0,BETA1,BETA2,KPARA1,NPARA1
( 1779)     real:: ISQ2,CUPAR,CUPER,NWCW,DFACTPAR,DFACTPER,LF0,LNF0UPER
( 1780)     real:: UPAR0,SFACT0,SFACTP1,SFACTM1, factor
( 1781)     integer:: NHARM,IHARM,NJ,NJP1,NJM1,J,K,M,N
( 1782) 
( 1783)     IFAIL=0
( 1784)     WSPEC(1:3,1:3) = cmplx(0.,0.)
( 1785)     W2=W*W
( 1786)     WP2=DENS*ZSPEC**2*WP2FACT/ASPEC
( 1787)     WPFACT=WP2/W2
( 1788)     WCW=BMAG*ZSPEC*EOVERAMU/ASPEC/W
( 1789)     BETA1=ATAN2(K1(2),K1(1))
( 1790)     BETA2=ATAN2(K2(2),K2(1))
( 1791)     KPARA1=K1(3)
( 1792)     NPARA1=KPARA1*C/W
( 1793)     MUT0=0.5*MPC2*ASPEC/ENORM
( 1794)     SQMUT0=SQRT(MUT0)
( 1795)     ISQ2=SQRT(0.5)
( 1796)     NHARM=NBESSJ-2
( 1797) 
( 1798)     ! -- Loop over harmonics -- !
( 1799)     do IHARM=-NHARM,NHARM
( 1800)        NWCW=real(IHARM)*WCW
( 1801) 
( 1802)        BETAFACT=exp(cmplx(0.,IHARM*(BETA1-BETA2)))
( 1803)        NJ=ABS(IHARM)+1
( 1804)        NJP1=ABS(IHARM+1)+1
( 1805)        NJM1=ABS(IHARM-1)+1
( 1806)        SFACT0=real(sign(1,IHARM))**ABS(IHARM)
( 1807)        SFACTP1=real(sign(1,IHARM+1))**ABS(IHARM+1)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 35

( 1808)        SFACTM1=real(sign(1,IHARM-1))**ABS(IHARM-1)
( 1809)        JN0XI1(1:NUPER)=SFACT0*JNXI1(1:NUPER,NJ)
( 1810)        JNP1XI1(1:NUPER)=SFACTP1*JNXI1(1:NUPER,NJP1)
( 1811)        JNM1XI1(1:NUPER)=SFACTM1*JNXI1(1:NUPER,NJM1)
( 1812)        JN0XI2(1:NUPER)=SFACT0*JNXI2(1:NUPER,NJ)
( 1813)        JNP1XI2(1:NUPER)=SFACTP1*JNXI2(1:NUPER,NJP1)
( 1814)        JNM1XI2(1:NUPER)=SFACTM1*JNXI2(1:NUPER,NJM1)
( 1815) 
( 1816)        ! -- Build array with integrand -- !
( 1817)        do J=1,NUPAR
( 1818)           CUPAR=UPAR(J)
( 1819)           DFACTPAR=NPARA1*CUPAR/SQMUT0
( 1820)           do K=1,NUPER
( 1821)              CUPER=UPER(K)
( 1822)              DFACTPER=NPARA1*CUPER/SQMUT0
( 1823)              LF0=(1.-DFACTPAR)*DFDUPER(K,J)+DFACTPER*DFDUPAR(K,J)
( 1824)              LNF0UPER=NWCW*DFDUPER(K,J)*CUPAR+(1.-NWCW)*DFDUPAR(K,J)*CUPER
( 1825) 
( 1826) 
( 1827)              SSGG(K,1,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNP1XI2(K)*CUPER
( 1828)              SSGG(K,2,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNM1XI2(K)*CUPER
( 1829)              SSGG(K,3,1)=ISQ2*CUPAR*LF0*JNP1XI1(K)*JN0XI2(K)*CUPER
( 1830) !             SSGG(K,1,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNP1XI2(K)*CUPER
( 1831)              SSGG(K,2,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNM1XI2(K)*CUPER
( 1832)              SSGG(K,3,2)=ISQ2*CUPAR*LF0*JNM1XI1(K)*JN0XI2(K)*CUPER
( 1833) !             SSGG(K,1,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNP1XI2(K)
( 1834) !             SSGG(K,2,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNM1XI2(K)
( 1835)              SSGG(K,3,3)=CUPAR*LNF0UPER*JN0XI1(K)*JN0XI2(K)
( 1836) 
( 1837) 
( 1838) 
( 1839)           end do
( 1840) 
( 1841)           ! -- Integrate of $u_\perp$ -- !
( 1842) !          call EQSIMPSON1D(NUPER,UPER,SSGG(1,1,1),SGG(J,1,1))
( 1843) !          call EQSIMPSON1D(NUPER,UPER,SSGG(1,2,1),SGG(J,2,1))
( 1844) !          call EQSIMPSON1D(NUPER,UPER,SSGG(1,3,1),SGG(J,3,1))
( 1845) !!          call EQSIMPSON1D(NUPER,UPER,SSGG(1,1,2),SGG(J,1,2))
( 1846) !          call EQSIMPSON1D(NUPER,UPER,SSGG(1,2,2),SGG(J,2,2))
( 1847) !          call EQSIMPSON1D(NUPER,UPER,SSGG(1,3,2),SGG(J,3,2))
( 1848) !!          call EQSIMPSON1D(NUPER,UPER,SSGG(1,1,3),SGG(J,1,3))
( 1849) !!          call EQSIMPSON1D(NUPER,UPER,SSGG(1,2,3),SGG(J,2,3))
( 1850) !          call EQSIMPSON1D(NUPER,UPER,SSGG(1,3,3),SGG(J,3,3))
( 1851) 
( 1852)           call EQTRAPZ1D(NUPER,UPER,SSGG(1,1,1),SGG(J,1,1))
( 1853)           call EQTRAPZ1D(NUPER,UPER,SSGG(1,2,1),SGG(J,2,1))
( 1854)           call EQTRAPZ1D(NUPER,UPER,SSGG(1,3,1),SGG(J,3,1))
( 1855)           call EQTRAPZ1D(NUPER,UPER,SSGG(1,2,2),SGG(J,2,2))
( 1856)           call EQTRAPZ1D(NUPER,UPER,SSGG(1,3,2),SGG(J,3,2))
( 1857)           call EQTRAPZ1D(NUPER,UPER,SSGG(1,3,3),SGG(J,3,3))
( 1858) 
( 1859) 
( 1860) !          call sgrate2(NUPER,UPER,SSGG(1,1,1),SGG(J,1,1))
( 1861) !          call sgrate2(NUPER,UPER,SSGG(1,2,1),SGG(J,2,1))
( 1862) !          call sgrate2(NUPER,UPER,SSGG(1,3,1),SGG(J,3,1))
( 1863) !          call sgrate2(NUPER,UPER,SSGG(1,2,2),SGG(J,2,2))
( 1864) !          call sgrate2(NUPER,UPER,SSGG(1,3,2),SGG(J,3,2))
( 1865) !          call sgrate2(NUPER,UPER,SSGG(1,3,3),SGG(J,3,3))






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 36

( 1866) 
( 1867) 
( 1868) 
( 1869) 
( 1870)        end do
( 1871) 
( 1872)        ! -- Resonance relation -- !
( 1873)        RRP=1.-NWCW-NPARA1*UPARMAX/SQMUT0
( 1874)        RRM=1.-NWCW-NPARA1*UPARMIN/SQMUT0
( 1875) 
( 1876)        if (RRP*RRM.GT.0) then
( 1877)           ! -- No resonance here -- !
( 1878)           do J=1,NUPAR
( 1879)              CUPAR=UPAR(J)
( 1880)              DFACTPAR=NPARA1*CUPAR/SQMUT0
( 1881)              RR=1.-NWCW-DFACTPAR
( 1882)              IRR=1./RR
( 1883)              do N=1,3
( 1884)                 do M=1,3
( 1885)                    SGG(J,M,N)=SGG(J,M,N)*IRR
( 1886)                 end do
( 1887)              end do
( 1888)           end do
( 1889) 
( 1890)           !-- Hermitian part of $\Theta/(2\pi)$ --!
( 1891)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,1,1),THETARE(1,1))
( 1892)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,2,1),THETARE(2,1))
( 1893)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,3,1),THETARE(3,1))
( 1894) !          call EQSIMPSON1D(NUPAR,UPAR,SGG(1,1,2),THETARE(1,2))
( 1895)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,2,2),THETARE(2,2))
( 1896)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,3,2),THETARE(3,2))
( 1897) !          call EQSIMPSON1D(NUPAR,UPAR,SGG(1,1,3),THETARE(1,3))
( 1898) !          call EQSIMPSON1D(NUPAR,UPAR,SGG(1,2,3),THETARE(2,3))
( 1899)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,3,3),THETARE(3,3))
( 1900) 
( 1901) 
( 1902) 
( 1903) 
( 1904)  	    THETARE(1,2) = THETARE(2,1)
( 1905)           THETARE(1,3) = THETARE(3,1)
( 1906)           THETARE(2,3) = THETARE(3,2)
( 1907) 
( 1908)           !-- Anti-hermitian part of $\Theta/(2\pi)$ --!
( 1909)           THETAIM(1:3,1:3)=0.
( 1910) 
( 1911)        else
( 1912) 
( 1913)           ! -- There is a resonance all right -- !
( 1914)           ! -- 1. Hermitian part -- !
( 1915)           UPAR0=SQMUT0/NPARA1*(1.-NWCW)
( 1916)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,1,1),THETARE(1,1))
( 1917)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,1),THETARE(2,1))
( 1918)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,1),THETARE(3,1))
( 1919) !          call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,1,2),THETARE(1,2))
( 1920)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,2),THETARE(2,2))
( 1921)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,2),THETARE(3,2))
( 1922) !          call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,1,3),THETARE(1,3))
( 1923) !          call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,3),THETARE(2,3))






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 37

( 1924)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,3),THETARE(3,3))
( 1925) 
( 1926)           THETARE(1,2) = THETARE(2,1)
( 1927)           THETARE(1,3) = THETARE(3,1)
( 1928)           THETARE(2,3) = THETARE(3,2)
( 1929) 
( 1930)           ! -- 2. Anti-hermitian part -- !
( 1931)           call WINTERP1D(UPAR,NUPAR,SGG(1,1,1),UPAR0,THETAIM(1,1))
( 1932)           call WINTERP1D(UPAR,NUPAR,SGG(1,2,1),UPAR0,THETAIM(2,1))
( 1933)           call WINTERP1D(UPAR,NUPAR,SGG(1,3,1),UPAR0,THETAIM(3,1))
( 1934) !          call WINTERP1D(UPAR,NUPAR,SGG(1,1,2),UPAR0,THETAIM(1,2))
( 1935)           call WINTERP1D(UPAR,NUPAR,SGG(1,2,2),UPAR0,THETAIM(2,2))
( 1936)           call WINTERP1D(UPAR,NUPAR,SGG(1,3,2),UPAR0,THETAIM(3,2))
( 1937) !          call WINTERP1D(UPAR,NUPAR,SGG(1,1,3),UPAR0,THETAIM(1,3))
( 1938) !          call WINTERP1D(UPAR,NUPAR,SGG(1,2,3),UPAR0,THETAIM(2,3))
( 1939)           call WINTERP1D(UPAR,NUPAR,SGG(1,3,3),UPAR0,THETAIM(3,3))
( 1940) 
( 1941)           THETAIM(1,2) = THETAIM(2,1)
( 1942)           THETAIM(1,3) = THETAIM(3,1)
( 1943)           THETAIM(2,3) = THETAIM(3,2)
( 1944) 
( 1945)           do N=1,3
( 1946)              do M=1,3
( 1947)                 THETARE(M,N)=-THETARE(M,N)*SQMUT0/NPARA1
( 1948)                 THETAIM(M,N)=-PI*THETAIM(M,N)*SQMUT0/abs(NPARA1)
( 1949)              end do
( 1950)           end do
( 1951) 
( 1952)        end if
( 1953) 
( 1954)        do N=1,3
( 1955)           do M=1,3
( 1956)              WSPEC(M,N)=WSPEC(M,N)+2.*PI*WPFACT*BETAFACT*cmplx(THETARE(M,N),THETAIM(M,N))
( 1957)           end do
( 1958)        end do
( 1959) 
( 1960)     end do
( 1961) 
( 1962)     call WROTATE_AORSA(BETA1,BETA2,WSPEC(1,1))
( 1963) 
( 1964)   end subroutine GETNONMAX_SIGMA_AORSA_NEW0
( 1965) 
( 1966) 
( 1967) 
( 1968) 
( 1969) !
( 1970) !*************************************************************************
( 1971) !
( 1972) 
( 1973)   subroutine WMATPRECALC_AORSA(ZSPEC,ASPEC,ENORM,BMAG,KPER,UPER, &
( 1974)        &                   NUPER,NBESSJ,NBESSJ_START,XI,JNXI,IFAIL)
( 1975) 
( 1976) !   ---------------------------------------
( 1977) !   Nathan's version: optimized for Cray X1
( 1978) !   ---------------------------------------
( 1979) 
( 1980)     implicit none
( 1981) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 38

( 1982) 
( 1983)     real, intent(IN):: ZSPEC, ASPEC, ENORM,BMAG,KPER
( 1984)     integer, intent(IN):: NUPER
( 1985)     real, dimension(NUPER), intent(IN):: UPER
( 1986)     integer, intent(IN):: NBESSJ,NBESSJ_START
( 1987)     real, dimension(NUPER), intent(inout):: XI
( 1988)     real, dimension(NUPER,NBESSJ), intent(inout):: JNXI
( 1989)     integer, intent(inout):: IFAIL
( 1990) 
( 1991)     real, parameter::  EOVERAMU = 9.58084e7
( 1992)     real, parameter:: EVPERAMU=9.314943e8
( 1993)     real, parameter:: MPC2=938271998.38
( 1994)     real, parameter:: C=2.99792458e8
( 1995)     real:: WC,MUT0,SQMUT0
( 1996) 
( 1997)     MUT0=0.5*MPC2*ASPEC/ENORM
( 1998)     SQMUT0=SQRT(MUT0)
( 1999)     WC=BMAG*ZSPEC*EOVERAMU/ASPEC
( 2000)     XI(:)=KPER*UPER(:)*C/SQMUT0/WC
( 2001) 
( 2002)     call BESSJ(XI(1),JNXI(1,1),NUPER,NBESSJ,NBESSJ_START)
( 2003) 
( 2004)   end subroutine WMATPRECALC_AORSA
( 2005) 
( 2006) 
( 2007) !
( 2008) !*************************************************************************
( 2009) !
( 2010) 
( 2011)   subroutine GETNONMAXSWMAT_AORSA_NEW(W,ZSPEC,ASPEC,DENS,BMAG, &
( 2012)        & K1,XI1,JNXI1,K2,XI2,JNXI2,NBESSJ,ENORM,UPARMIN,UPARMAX, &
( 2013)        & NUPAR,NUPER,UPER,UPAR,DFDUPER,DFDUPAR,WSPEC,IFAIL)
( 2014)     implicit none
( 2015)     real, intent(IN):: W,ZSPEC,ASPEC,DENS,BMAG
( 2016)     real, dimension(3):: K1,K2
( 2017)     integer, intent(IN):: NUPAR,NUPER,NBESSJ
( 2018)     real, dimension(NUPER), intent(IN):: XI1,XI2
( 2019)     real, dimension(NUPER, NBESSJ), intent(IN):: JNXI1,JNXI2
( 2020)     real, intent(IN):: ENORM,UPARMIN,UPARMAX
( 2021)     real, dimension(NUPER), intent(IN):: UPER
( 2022)     real, dimension(NUPAR), intent(IN):: UPAR
( 2023)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER,DFDUPAR
( 2024)     complex, dimension(3,3), intent(inout):: WSPEC
( 2025)     integer, intent(inout):: IFAIL
( 2026) 
( 2027)     complex:: BETAFACT
( 2028)     real, parameter::  EOVERAMU = 9.58084e7
( 2029)     real, parameter:: WP2FACT=1.745915
( 2030)     real, parameter:: MPC2=938271998.38
( 2031)     real, parameter:: C=2.99792458e8
( 2032)     real, parameter:: PI=3.141592653597932384
( 2033)     real, dimension(NUPER):: JN0XI1,JNP1XI1,JNM1XI1
( 2034)     real, dimension(NUPER):: JN0XI2,JNP1XI2,JNM1XI2
( 2035)     real, dimension(NUPER,3,3):: SSGG
( 2036)     real, dimension(NUPAR,3,3):: SGG
( 2037)     real, dimension(3,3):: THETARE,THETAIM
( 2038)     real:: W2,WP2,WPFACT,WCW,RRP,RRM,RR,IRR
( 2039)     real:: MUT0,SQMUT0,BETA1,BETA2,KPARA1,NPARA1






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 39

( 2040)     real:: ISQ2,CUPAR,CUPER,NWCW,DFACTPAR,DFACTPER,LF0,LNF0UPER
( 2041)     real:: UPAR0,SFACT0,SFACTP1,SFACTM1
( 2042)     integer:: NHARM,IHARM,NJ,NJP1,NJM1,J,K,M,N
( 2043) 
( 2044)     logical, parameter :: use_ppart6 = .true.
( 2045)     logical :: is_uniform 
( 2046)     integer, parameter :: nfxmax = 9
( 2047)     integer :: nfx 
( 2048)     real*8, dimension(nfxmax) ::  vint
( 2049)     real*8, dimension(nupar,nfxmax) :: fx
( 2050)     real*8 :: dx, dh, tol
( 2051)     integer :: i
( 2052) 
( 2053)     IFAIL=0
( 2054)     WSPEC(1:3,1:3) = cmplx(0.,0.)
( 2055)     W2=W*W
( 2056)     WP2=DENS*ZSPEC**2*WP2FACT/ASPEC
( 2057)     WPFACT=WP2/W2
( 2058)     WCW=BMAG*ZSPEC*EOVERAMU/ASPEC/W
( 2059)     BETA1=ATAN2(K1(2),K1(1))
( 2060)     BETA2=ATAN2(K2(2),K2(1))
( 2061)     KPARA1=K1(3)
( 2062)     NPARA1=KPARA1*C/W
( 2063)     MUT0=0.5*MPC2*ASPEC/ENORM
( 2064)     SQMUT0=SQRT(MUT0)
( 2065)     ISQ2=SQRT(0.5)
( 2066)     NHARM=NBESSJ-2
( 2067) 
( 2068)     is_uniform = .true.
( 2069)     tol = 1.0d-7
( 2070)     dh = upar(2)-upar(1)
( 2071)     do i=1,nupar-1
( 2072)        dx = upar(i+1)-upar(i)
( 2073)        is_uniform = abs(dx-dh).le. tol*dx
( 2074)        if (.not.is_uniform) exit
( 2075)     enddo
( 2076) 
( 2077)     ! -- Loop over harmonics -- !
( 2078)     do IHARM=-NHARM,NHARM
( 2079)        NWCW=real(IHARM)*WCW
( 2080) 
( 2081)        BETAFACT=exp(cmplx(0.,IHARM*(BETA1-BETA2)))
( 2082)        NJ=ABS(IHARM)+1
( 2083)        NJP1=ABS(IHARM+1)+1
( 2084)        NJM1=ABS(IHARM-1)+1
( 2085)        SFACT0=real(sign(1,IHARM))**ABS(IHARM)
( 2086)        SFACTP1=real(sign(1,IHARM+1))**ABS(IHARM+1)
( 2087)        SFACTM1=real(sign(1,IHARM-1))**ABS(IHARM-1)
( 2088)        JN0XI1(1:NUPER)=SFACT0*JNXI1(1:NUPER,NJ)
( 2089)        JNP1XI1(1:NUPER)=SFACTP1*JNXI1(1:NUPER,NJP1)
( 2090)        JNM1XI1(1:NUPER)=SFACTM1*JNXI1(1:NUPER,NJM1)
( 2091)        JN0XI2(1:NUPER)=SFACT0*JNXI2(1:NUPER,NJ)
( 2092)        JNP1XI2(1:NUPER)=SFACTP1*JNXI2(1:NUPER,NJP1)
( 2093)        JNM1XI2(1:NUPER)=SFACTM1*JNXI2(1:NUPER,NJM1)
( 2094) 
( 2095)        ! -- Build array with integrand -- !
( 2096)        do J=1,NUPAR
( 2097)           CUPAR=UPAR(J)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 40

( 2098)           DFACTPAR=NPARA1*CUPAR/SQMUT0
( 2099)           do K=1,NUPER
( 2100)              CUPER=UPER(K)
( 2101)              DFACTPER=NPARA1*CUPER/SQMUT0
( 2102)              LF0=(1.-DFACTPAR)*DFDUPER(K,J)+DFACTPER*DFDUPAR(K,J)
( 2103)              LNF0UPER=NWCW*DFDUPER(K,J)*CUPAR+(1.-NWCW)*DFDUPAR(K,J)*CUPER
( 2104)              SSGG(K,1,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNP1XI2(K)*CUPER
( 2105)              SSGG(K,2,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNM1XI2(K)*CUPER
( 2106)              SSGG(K,3,1)=ISQ2*CUPAR*LF0*JNP1XI1(K)*JN0XI2(K)*CUPER
( 2107)              SSGG(K,1,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNP1XI2(K)*CUPER
( 2108)              SSGG(K,2,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNM1XI2(K)*CUPER
( 2109)              SSGG(K,3,2)=ISQ2*CUPAR*LF0*JNM1XI1(K)*JN0XI2(K)*CUPER
( 2110)              SSGG(K,1,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNP1XI2(K)
( 2111)              SSGG(K,2,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNM1XI2(K)
( 2112)              SSGG(K,3,3)=CUPAR*LNF0UPER*JN0XI1(K)*JN0XI2(K)
( 2113)           end do
( 2114) 
( 2115)           ! -- Integrate of $u_\perp$ -- !
( 2116)           call EQSIMPSON1D(NUPER,UPER,SSGG(1,1,1),SGG(J,1,1))
( 2117)           call EQSIMPSON1D(NUPER,UPER,SSGG(1,2,1),SGG(J,2,1))
( 2118)           call EQSIMPSON1D(NUPER,UPER,SSGG(1,3,1),SGG(J,3,1))
( 2119)           call EQSIMPSON1D(NUPER,UPER,SSGG(1,1,2),SGG(J,1,2))
( 2120)           call EQSIMPSON1D(NUPER,UPER,SSGG(1,2,2),SGG(J,2,2))
( 2121)           call EQSIMPSON1D(NUPER,UPER,SSGG(1,3,2),SGG(J,3,2))
( 2122)           call EQSIMPSON1D(NUPER,UPER,SSGG(1,1,3),SGG(J,1,3))
( 2123)           call EQSIMPSON1D(NUPER,UPER,SSGG(1,2,3),SGG(J,2,3))
( 2124)           call EQSIMPSON1D(NUPER,UPER,SSGG(1,3,3),SGG(J,3,3))
( 2125) 
( 2126)        end do
( 2127) 
( 2128)        ! -- Resonance relation -- !
( 2129)        RRP=1.-NWCW-NPARA1*UPARMAX/SQMUT0
( 2130)        RRM=1.-NWCW-NPARA1*UPARMIN/SQMUT0
( 2131) 
( 2132)        if (RRP*RRM.GT.0) then
( 2133)           ! -- No resonance here -- !
( 2134)           do J=1,NUPAR
( 2135)              CUPAR=UPAR(J)
( 2136)              DFACTPAR=NPARA1*CUPAR/SQMUT0
( 2137)              RR=1.-NWCW-DFACTPAR
( 2138)              IRR=1./RR
( 2139)              do N=1,3
( 2140)                 do M=1,3
( 2141)                    SGG(J,M,N)=SGG(J,M,N)*IRR
( 2142)                 end do
( 2143)              end do
( 2144)           end do
( 2145) 
( 2146)           !-- Hermitian part of $\Theta/(2\pi)$ --!
( 2147)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,1,1),THETARE(1,1))
( 2148)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,2,1),THETARE(2,1))
( 2149)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,3,1),THETARE(3,1))
( 2150)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,1,2),THETARE(1,2))
( 2151)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,2,2),THETARE(2,2))
( 2152)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,3,2),THETARE(3,2))
( 2153)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,1,3),THETARE(1,3))
( 2154)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,2,3),THETARE(2,3))
( 2155)           call EQSIMPSON1D(NUPAR,UPAR,SGG(1,3,3),THETARE(3,3))






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 41

( 2156) 
( 2157)           !-- Anti-hermitian part of $\Theta/(2\pi)$ --!
( 2158)           THETAIM(1:3,1:3)=0.
( 2159) 
( 2160)        else
( 2161) 
( 2162)           ! -- There is a resonance all right -- !
( 2163)           ! -- 1. Hermitian part -- !
( 2164)           UPAR0=SQMUT0/NPARA1*(1.-NWCW)
( 2165) 
( 2166)           
( 2167)           if (use_ppart6) then
( 2168) 
( 2169)            fx(1:nupar,1) = SGG(1:nupar,1,1)
( 2170)            fx(1:nupar,2) = SGG(1:nupar,2,1)
( 2171)            fx(1:nupar,3) = SGG(1:nupar,3,1)
( 2172) 
( 2173)            fx(1:nupar,4) = SGG(1:nupar,1,2)
( 2174)            fx(1:nupar,5) = SGG(1:nupar,2,2)
( 2175)            fx(1:nupar,6) = SGG(1:nupar,3,2)
( 2176) 
( 2177)            fx(1:nupar,7) = SGG(1:nupar,1,3)
( 2178)            fx(1:nupar,8) = SGG(1:nupar,2,3)
( 2179)            fx(1:nupar,9) = SGG(1:nupar,3,3)
( 2180) 
( 2181)            nfx = 9
( 2182)            call cauchy_ppart6(upar,nupar,upar0,nfx,fx,vint)
( 2183) 
( 2184)            thetare(1,1) = vint(1)
( 2185)            thetare(2,1) = vint(2)
( 2186)            thetare(3,1) = vint(3)
( 2187) 
( 2188)            thetare(1,2) = vint(4)
( 2189)            thetare(2,2) = vint(5)
( 2190)            thetare(3,2) = vint(6)
( 2191) 
( 2192)            thetare(1,3) = vint(7)
( 2193)            thetare(2,3) = vint(8)
( 2194)            thetare(3,3) = vint(9)
( 2195) 
( 2196)           else
( 2197) 
( 2198)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,1,1),THETARE(1,1))
( 2199)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,1),THETARE(2,1))
( 2200)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,1),THETARE(3,1))
( 2201) 
( 2202)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,1,2),THETARE(1,2))
( 2203)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,2),THETARE(2,2))
( 2204)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,2),THETARE(3,2))
( 2205) 
( 2206)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,1,3),THETARE(1,3))
( 2207)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,2,3),THETARE(2,3))
( 2208)           call CAUCHY_PPART2(UPAR,NUPAR,UPAR0,SGG(1,3,3),THETARE(3,3))
( 2209) 
( 2210)           endif
( 2211) 
( 2212)           ! -- 2. Anti-hermitian part -- !
( 2213)           call WINTERP1D(UPAR,NUPAR,SGG(1,1,1),UPAR0,THETAIM(1,1))






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 42

( 2214)           call WINTERP1D(UPAR,NUPAR,SGG(1,2,1),UPAR0,THETAIM(2,1))
( 2215)           call WINTERP1D(UPAR,NUPAR,SGG(1,3,1),UPAR0,THETAIM(3,1))
( 2216)           call WINTERP1D(UPAR,NUPAR,SGG(1,1,2),UPAR0,THETAIM(1,2))
( 2217)           call WINTERP1D(UPAR,NUPAR,SGG(1,2,2),UPAR0,THETAIM(2,2))
( 2218)           call WINTERP1D(UPAR,NUPAR,SGG(1,3,2),UPAR0,THETAIM(3,2))
( 2219)           call WINTERP1D(UPAR,NUPAR,SGG(1,1,3),UPAR0,THETAIM(1,3))
( 2220)           call WINTERP1D(UPAR,NUPAR,SGG(1,2,3),UPAR0,THETAIM(2,3))
( 2221)           call WINTERP1D(UPAR,NUPAR,SGG(1,3,3),UPAR0,THETAIM(3,3))
( 2222) 
( 2223)           do N=1,3
( 2224)              do M=1,3
( 2225)                 THETARE(M,N)=-THETARE(M,N)*SQMUT0/NPARA1
( 2226)                 THETAIM(M,N)=-PI*THETAIM(M,N)*SQMUT0/abs(NPARA1)
( 2227)              end do
( 2228)           end do
( 2229) 
( 2230)        end if
( 2231) 
( 2232)        do N=1,3
( 2233)           do M=1,3
( 2234)              WSPEC(M,N)=WSPEC(M,N)+2.*PI*WPFACT*BETAFACT*cmplx(THETARE(M,N),THETAIM(M,N))
( 2235)           end do
( 2236)        end do
( 2237) 
( 2238)     end do
( 2239) 
( 2240)     call WROTATE_AORSA(BETA1,BETA2,WSPEC(1,1))
( 2241) 
( 2242)   end subroutine GETNONMAXSWMAT_AORSA_NEW
( 2243) 
( 2244) !
( 2245) !*************************************************************************
( 2246) !
( 2247) 
( 2248) 
( 2249)   subroutine GETNONMAXSWMAT_AORSA(W,ZSPEC,ASPEC,DENS,BMAG, &
( 2250)        & K1,XI1,JNXI1,K2,XI2,JNXI2,NBESSJ,ENORM,UPARMIN,UPARMAX, &
( 2251)        & NUPAR,NUPER,UPER,UPAR,DFDUPER,DFDUPAR,WSPEC,IFAIL)
( 2252)     implicit none
( 2253)     real, intent(IN):: W,ZSPEC,ASPEC,DENS,BMAG
( 2254)     real, dimension(3):: K1,K2
( 2255)     integer, intent(IN):: NUPAR,NUPER,NBESSJ
( 2256)     real, dimension(NUPER), intent(IN):: XI1,XI2
( 2257)     real, dimension(NUPER, NBESSJ), intent(IN):: JNXI1,JNXI2
( 2258)     real, intent(IN):: ENORM,UPARMIN,UPARMAX
( 2259)     real, dimension(NUPER), intent(IN):: UPER
( 2260)     real, dimension(NUPAR), intent(IN):: UPAR
( 2261)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER,DFDUPAR
( 2262)     complex, dimension(3,3), intent(inout):: WSPEC
( 2263)     integer, intent(inout):: IFAIL
( 2264) 
( 2265)     complex:: BETAFACT
( 2266)     real, parameter::  EOVERAMU = 9.58084e7
( 2267)     real, parameter:: WP2FACT=1.745915
( 2268)     real, parameter:: MPC2=938271998.38
( 2269)     real, parameter:: C=2.99792458e8
( 2270)     real, parameter:: PI=3.141592653597932384
( 2271)     real:: W2,WP2,WPFACT,WCW,BETA1,BETA2






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 43

( 2272)     real:: MUT0,SQMUT0,ISQ2,NWCW
( 2273)     real:: SFACT0,SFACTP1,SFACTM1,RRP,RRM,KPARA1
( 2274)     real:: KPARABS,NPARA1,CUPAR,CUPER,DFACTPAR,DFACTPER
( 2275)     real:: RR,IRR,LF0,LNF0UPER,UPAR0,DUPARF,UPARMMAX
( 2276)     real:: CLUPARF,CUPARP,CUPARM,DFACTPARP,DFACTPARM
( 2277)     real:: IDFDUPARM,IDFDUPERM,IDFDUPARP,IDFDUPERP
( 2278)     real:: LF0P,LF0M,LNF0PUPER,LNF0MUPER
( 2279)     real:: DLF0,DLNF0UPER,UDLF0,UDLNF0UPER
( 2280)     real:: DFDUPER0,DFDUPAR0
( 2281)     real, dimension(3,3):: THETARE,THETAIM,G
( 2282)     real, dimension(NUPER,3,3):: SWW
( 2283)     real, dimension(NUPAR,3,3):: IRRG,GG,UDDGG
( 2284)     real, dimension(NUPER):: JN0XI1,JNP1XI1,JNM1XI1
( 2285)     real, dimension(NUPER):: JN0XI2,JNP1XI2,JNM1XI2
( 2286)     real, dimension(NUPAR):: LUPARF,LLOGF
( 2287)     integer:: IHARM,NHARM,NJ,NJP1,NJM1,I,J,J1,K,N,M
( 2288) 
( 2289)     GG = 0.0
( 2290) 
( 2291)     IFAIL=0
( 2292)     WSPEC(1:3,1:3) = cmplx(0.,0.)
( 2293)     W2=W*W
( 2294)     WP2=DENS*ZSPEC**2*WP2FACT/ASPEC
( 2295)     WPFACT=WP2/W2
( 2296)     WCW=BMAG*ZSPEC*EOVERAMU/ASPEC/W
( 2297)     BETA1=ATAN2(K1(2),K1(1))
( 2298)     BETA2=ATAN2(K2(2),K2(1))
( 2299)     KPARA1=K1(3)
( 2300)     NPARA1=KPARA1*C/W
( 2301)     MUT0=0.5*MPC2*ASPEC/ENORM
( 2302)     SQMUT0=SQRT(MUT0)
( 2303)     ISQ2=SQRT(0.5)
( 2304)     NHARM=NBESSJ-2
( 2305) 
( 2306)     ! -- Loop over harmonics -- !
( 2307)     do IHARM=-NHARM,NHARM
( 2308)        NWCW=real(IHARM)*WCW
( 2309) 
( 2310)        BETAFACT=exp(cmplx(0.,IHARM*(BETA1-BETA2)))
( 2311)        NJ=ABS(IHARM)+1
( 2312)        NJP1=ABS(IHARM+1)+1
( 2313)        NJM1=ABS(IHARM-1)+1
( 2314)        SFACT0=real(sign(1,IHARM))**ABS(IHARM)
( 2315)        SFACTP1=real(sign(1,IHARM+1))**ABS(IHARM+1)
( 2316)        SFACTM1=real(sign(1,IHARM-1))**ABS(IHARM-1)
( 2317)        JN0XI1(1:NUPER)=SFACT0*JNXI1(1:NUPER,NJ)
( 2318)        JNP1XI1(1:NUPER)=SFACTP1*JNXI1(1:NUPER,NJP1)
( 2319)        JNM1XI1(1:NUPER)=SFACTM1*JNXI1(1:NUPER,NJM1)
( 2320)        JN0XI2(1:NUPER)=SFACT0*JNXI2(1:NUPER,NJ)
( 2321)        JNP1XI2(1:NUPER)=SFACTP1*JNXI2(1:NUPER,NJP1)
( 2322)        JNM1XI2(1:NUPER)=SFACTM1*JNXI2(1:NUPER,NJM1)
( 2323) 
( 2324)        ! -- Resonance relation -- !
( 2325)        RRP=1.-NWCW-NPARA1*UPARMAX/SQMUT0
( 2326)        RRM=1.-NWCW-NPARA1*UPARMIN/SQMUT0
( 2327) 
( 2328)        if (RRP*RRM.GT.0) then
( 2329) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 44

( 2330)           !--------------------------------------!
( 2331)           !-- First case: vector, no resonant  --!
( 2332)           !-- parallel velocity in the  domain --!
( 2333)           !--------------------------------------!
( 2334) 
( 2335)           do J=1,NUPAR
( 2336)              CUPAR=UPAR(J)
( 2337)              DFACTPAR=NPARA1*CUPAR/SQMUT0
( 2338)              RR=1.-NWCW-DFACTPAR
( 2339)              IRR=1./RR
( 2340) 
( 2341)              ! --- Computation of $sww=u_\perp*w$ ---
( 2342)              do K=1,NUPER
( 2343)                 CUPER=UPER(K)
( 2344)                 DFACTPER=NPARA1*CUPER/SQMUT0
( 2345)                 LF0=(1.-DFACTPAR)*DFDUPER(K,J)+DFACTPER*DFDUPAR(K,J)
( 2346)                 LNF0UPER=NWCW*DFDUPER(K,J)*CUPAR+(1.-NWCW)*DFDUPAR(K,J)*CUPER
( 2347)                 SWW(K,1,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNP1XI2(K)*CUPER
( 2348)                 SWW(K,2,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNM1XI2(K)*CUPER
( 2349)                 SWW(K,3,1)=ISQ2*CUPAR*LF0*JNP1XI1(K)*JN0XI2(K)*CUPER
( 2350)                 SWW(K,1,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNP1XI2(K)*CUPER
( 2351)                 SWW(K,2,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNM1XI2(K)*CUPER
( 2352)                 SWW(K,3,2)=ISQ2*CUPAR*LF0*JNM1XI1(K)*JN0XI2(K)*CUPER
( 2353)                 SWW(K,1,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNP1XI2(K)
( 2354)                 SWW(K,2,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNM1XI2(K)
( 2355)                 SWW(K,3,3)=CUPAR*LNF0UPER*JN0XI1(K)*JN0XI2(K)
( 2356)              end do
( 2357) 
( 2358)              !-- Integration over $u_\perp$ --!
( 2359)              call EQTRAPZ1D(NUPER,UPER,SWW(1,1,1),G(1,1))
( 2360)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,1),G(2,1))
( 2361)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,1),G(3,1))
( 2362)              call EQTRAPZ1D(NUPER,UPER,SWW(1,1,2),G(1,2))
( 2363)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,2),G(2,2))
( 2364)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,2),G(3,2))
( 2365)              call EQTRAPZ1D(NUPER,UPER,SWW(1,1,3),G(1,3))
( 2366)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,3),G(2,3))
( 2367)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,3),G(3,3))
( 2368) 
( 2369)              do N=1,3
( 2370)                 do M=1,3
( 2371)                    IRRG(J,M,N)=G(M,N)*IRR
( 2372)                 end do
( 2373)              end do
( 2374) 
( 2375)           end do
( 2376) 
( 2377)           !-- Hermitian part of $\Theta/(2\pi)$ --!
( 2378)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,1,1),THETARE(1,1))
( 2379)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,2,1),THETARE(2,1))
( 2380)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,3,1),THETARE(3,1))
( 2381)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,1,2),THETARE(1,2))
( 2382)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,2,2),THETARE(2,2))
( 2383)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,3,2),THETARE(3,2))
( 2384)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,1,3),THETARE(1,3))
( 2385)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,2,3),THETARE(2,3))
( 2386)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,3,3),THETARE(3,3))
( 2387) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 45

( 2388)           !-- Anti-hermitian part of $\Theta/(2\pi)$ --!
( 2389)           THETAIM(1:3,1:3)=0.
( 2390) 
( 2391)        else
( 2392) 
( 2393)           !---------------------------------------------------!
( 2394)           !-- Second case: there is a resonant              --!
( 2395)           !-- parallel velocity in the $u_\parallel$ domain --!
( 2396)           !---------------------------------------------------!
( 2397) 
( 2398)           !-- Resonant parallel velocity --!
( 2399)           UPAR0=SQMUT0/NPARA1*(1.-NWCW)
( 2400) 
( 2401)           ! --- 1. Hermitian part --- !
( 2402) 
( 2403)           !-- New $u_\parallel$ grid --!
( 2404)           LUPARF(1)=0.
( 2405)           LLOGF(1)=0.
( 2406)           UPARMMAX=max(abs(UPARMIN),abs(UPARMAX))
( 2407)           DUPARF=(UPARMMAX+ABS(UPAR0))/(NUPAR-1)
( 2408)           do J1=2,NUPAR
( 2409)              CLUPARF=DUPARF*(J1-1)
( 2410)              LUPARF(J1)=CLUPARF
( 2411)              LLOGF(J1)=CLUPARF*(LOG(ABS(CLUPARF))-1.)
( 2412)           end do
( 2413) 
( 2414)           do J=1,NUPAR
( 2415)              CUPARP=UPAR0+LUPARF(J)
( 2416)              CUPARM=UPAR0-LUPARF(J)
( 2417)              DFACTPARP=NPARA1*CUPARP/SQMUT0
( 2418)              DFACTPARM=NPARA1*CUPARM/SQMUT0
( 2419) 
( 2420)              ! --- Computation of $sww=u_\perp*w$ ---
( 2421)              do K=1,NUPER
( 2422)                 CUPER=UPER(K)
( 2423)                 DFACTPER=NPARA1*CUPER/SQMUT0
( 2424)                 call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPAR, &
( 2425)                      & CUPER,CUPARP,IDFDUPARP)
( 2426)                 call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPER, &
( 2427)                      & CUPER,CUPARP,IDFDUPERP)
( 2428)                 call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPAR, &
( 2429)                      & CUPER,CUPARM,IDFDUPARM)
( 2430)                 call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPER, &
( 2431)                      & CUPER,CUPARM,IDFDUPERM)
( 2432)                 LF0P=(1.-DFACTPARP)*IDFDUPERP+DFACTPER*IDFDUPARP
( 2433)                 LF0M=(1.-DFACTPARM)*IDFDUPERM+DFACTPER*IDFDUPARM
( 2434)                 LNF0PUPER=NWCW*IDFDUPERP*CUPARP+(1.-NWCW)*IDFDUPARP*CUPER
( 2435)                 LNF0MUPER=NWCW*IDFDUPERM*CUPARM+(1.-NWCW)*IDFDUPARM*CUPER
( 2436)                 DLF0=LF0P-LF0M
( 2437)                 DLNF0UPER=LNF0PUPER-LNF0MUPER
( 2438)                 UDLF0=CUPARP*LF0P-CUPARM*LF0M
( 2439)                 UDLNF0UPER=CUPARP*LNF0PUPER-CUPARM*LNF0MUPER
( 2440)                 SWW(K,1,1)=0.5*CUPER*DLF0*JNP1XI1(K)*JNP1XI2(K)*CUPER
( 2441)                 SWW(K,2,1)=0.5*CUPER*DLF0*JNP1XI1(K)*JNM1XI2(K)*CUPER
( 2442)                 SWW(K,3,1)=ISQ2*UDLF0*JNP1XI1(K)*JN0XI2(K)*CUPER
( 2443)                 SWW(K,1,2)=0.5*CUPER*DLF0*JNM1XI1(K)*JNP1XI2(K)*CUPER
( 2444)                 SWW(K,2,2)=0.5*CUPER*DLF0*JNM1XI1(K)*JNM1XI2(K)*CUPER
( 2445)                 SWW(K,3,2)=ISQ2*UDLF0*JNM1XI1(K)*JN0XI2(K)*CUPER






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 46

( 2446)                 SWW(K,1,3)=ISQ2*CUPER*DLNF0UPER*JN0XI1(K)*JNP1XI2(K)
( 2447)                 SWW(K,2,3)=ISQ2*CUPER*DLNF0UPER*JN0XI1(K)*JNM1XI2(K)
( 2448)                 SWW(K,3,3)=UDLNF0UPER*JN0XI1(K)*JN0XI2(K)
( 2449)              end do
( 2450) 
( 2451)              !-- Integration over $u_\perp$ --!
( 2452)              call EQTRAPZ1D(NUPER,UPER,SWW(1,1,1),GG(J,1,1))
( 2453)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,1),GG(J,2,1))
( 2454)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,1),GG(J,3,1))
( 2455)              call EQTRAPZ1D(NUPER,UPER,SWW(1,1,2),GG(J,1,2))
( 2456)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,2),GG(J,2,2))
( 2457)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,2),GG(J,3,2))
( 2458)              call EQTRAPZ1D(NUPER,UPER,SWW(1,1,3),GG(J,1,3))
( 2459)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,3),GG(J,2,3))
( 2460)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,3),GG(J,3,3))
( 2461) 
( 2462)           end do
( 2463) 
( 2464)           !-- $gg''*llogf$ --!
( 2465)           UDDGG(1,1:3,1:3)=0.
( 2466)           UDDGG(NUPAR,1:3,1:3)=0.
( 2467)           do J=2,NUPAR-1
( 2468)              UDDGG(J,1,1)=LLOGF(J)* &
( 2469)                   & (GG(J+1,1,1)-2.*GG(J,1,1)+GG(J-1,1,1))/DUPARF**2
( 2470)              UDDGG(J,2,1)=LLOGF(J)* &
( 2471)                   & (GG(J+1,2,1)-2.*GG(J,2,1)+GG(J-1,2,1))/DUPARF**2
( 2472)              UDDGG(J,3,1)=LLOGF(J)* &
( 2473)                   & (GG(J+1,3,1)-2.*GG(J,3,1)+GG(J-1,3,1))/DUPARF**2
( 2474)              UDDGG(J,1,2)=LLOGF(J)* &
( 2475)                   & (GG(J+1,1,2)-2.*GG(J,1,2)+GG(J-1,1,2))/DUPARF**2
( 2476)              UDDGG(J,2,2)=LLOGF(J)* &
( 2477)                   & (GG(J+1,2,2)-2.*GG(J,2,2)+GG(J-1,2,2))/DUPARF**2
( 2478)              UDDGG(J,3,2)=LLOGF(J)* &
( 2479)                   & (GG(J+1,3,2)-2.*GG(J,3,2)+GG(J-1,3,2))/DUPARF**2
( 2480)              UDDGG(J,1,3)=LLOGF(J)* &
( 2481)                   &(GG(J+1,1,3)-2.*GG(J,1,3)+GG(J-1,1,3))/DUPARF**2
( 2482)              UDDGG(J,2,3)=LLOGF(J)* &
( 2483)                   & (GG(J+1,2,3)-2.*GG(J,2,3)+GG(J-1,2,3))/DUPARF**2
( 2484)              UDDGG(J,3,3)=LLOGF(J)* &
( 2485)                   & (GG(J+1,3,3)-2.*GG(J,3,3)+GG(J-1,3,3))/DUPARF**2
( 2486)           end do
( 2487) 
( 2488)           !-- Real part of $\Theta/(2\pi)$ --!
( 2489)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,1,1),THETARE(1,1))
( 2490)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,2,1),THETARE(2,1))
( 2491)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,3,1),THETARE(3,1))
( 2492)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,1,2),THETARE(1,2))
( 2493)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,2,2),THETARE(2,2))
( 2494)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,3,2),THETARE(3,2))
( 2495)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,1,3),THETARE(1,3))
( 2496)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,2,3),THETARE(2,3))
( 2497)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,3,3),THETARE(3,3))
( 2498) 
( 2499)           do N=1,3
( 2500)              do M=1,3
( 2501)                 THETARE(M,N)=-THETARE(M,N)*SQMUT0/NPARA1
( 2502)              end do
( 2503)           end do






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 47

( 2504) 
( 2505)           ! --- 2. Anti-hermitian part --- !
( 2506)           do K=1,NUPER
( 2507)              CUPER=UPER(K)
( 2508)              DFACTPER=NPARA1*CUPER/SQMUT0
( 2509)              call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPAR,CUPER,UPAR0,DFDUPAR0)
( 2510)              call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPER,CUPER,UPAR0,DFDUPER0)
( 2511) 
( 2512)              LF0=NWCW*DFDUPER0+DFACTPER*DFDUPAR0
( 2513)              LNF0UPER=NWCW*DFDUPER0*UPAR0+(1.-NWCW)*DFDUPAR0*CUPER
( 2514) 
( 2515)              SWW(K,1,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNP1XI2(K)*CUPER
( 2516)              SWW(K,2,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNM1XI2(K)*CUPER
( 2517)              SWW(K,3,1)=ISQ2*UPAR0*LF0*JNP1XI1(K)*JN0XI2(K)*CUPER
( 2518)              SWW(K,1,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNP1XI2(K)*CUPER
( 2519)              SWW(K,2,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNM1XI2(K)*CUPER
( 2520)              SWW(K,3,2)=ISQ2*UPAR0*LF0*JNM1XI1(K)*JN0XI2(K)*CUPER
( 2521)              SWW(K,1,3)=ISQ2*CUPAR*LNF0UPER*JN0XI1(K)*JNP1XI2(K)
( 2522)              SWW(K,2,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNM1XI2(K)
( 2523)              SWW(K,3,3)=UPAR0*LNF0UPER*JN0XI1(K)*JN0XI2(K)
( 2524)           end do
( 2525) 
( 2526)           !--- Integration over $u_perp$ ---!
( 2527)           call EQTRAPZ1D(NUPER,UPER,SWW(1,1,1),G(1,1))
( 2528)           call EQTRAPZ1D(NUPER,UPER,SWW(1,2,1),G(2,1))
( 2529)           call EQTRAPZ1D(NUPER,UPER,SWW(1,3,1),G(3,1))
( 2530)           call EQTRAPZ1D(NUPER,UPER,SWW(1,1,2),G(1,2))
( 2531)           call EQTRAPZ1D(NUPER,UPER,SWW(1,2,2),G(2,2))
( 2532)           call EQTRAPZ1D(NUPER,UPER,SWW(1,3,2),G(3,2))
( 2533)           call EQTRAPZ1D(NUPER,UPER,SWW(1,1,3),G(1,3))
( 2534)           call EQTRAPZ1D(NUPER,UPER,SWW(1,2,3),G(2,3))
( 2535)           call EQTRAPZ1D(NUPER,UPER,SWW(1,3,3),G(3,3))
( 2536) 
( 2537)           !-- Imaginary part of $\Theta/(2\pi)$ --!
( 2538)           do N=1,3
( 2539)              do M=1,3
( 2540)                 THETAIM(M,N)=-PI*G(M,N)*SQMUT0/abs(NPARA1)
( 2541)              end do
( 2542)           end do
( 2543) 
( 2544)        end if
( 2545) 
( 2546)        do N=1,3
( 2547)           do M=1,3
( 2548)              WSPEC(M,N)=WSPEC(M,N)+ &
( 2549)                   & 2.*PI*WPFACT*BETAFACT*cmplx(THETARE(M,N),THETAIM(M,N))
( 2550)           end do
( 2551)        end do
( 2552)     end do
( 2553) 
( 2554)     call WROTATE_AORSA(BETA1,BETA2,WSPEC(1,1))
( 2555) 
( 2556)   end subroutine GETNONMAXSWMAT_AORSA
( 2557) 
( 2558) !
( 2559) !*************************************************************************
( 2560) !
( 2561) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 48

( 2562)     subroutine GETNONMAX_SIGMA_AORSA(W, &
( 2563)        & ZSPEC, ASPEC, DENS, BMAG, &
( 2564)        & K1, XI1, JNXI1, & 
( 2565)        & K2, XI2, JNXI2, NBESSJ, & 
( 2566)        & ENORM, UPARMIN, UPARMAX, &
( 2567)        & NUPAR, NUPER, UPER, UPAR, & 
( 2568)        & DFDUPER, DFDUPAR, & 
( 2569)        & WSPEC, IFAIL)
( 2570)        
( 2571)     implicit none
( 2572)     
( 2573)     real, intent(IN):: W,ZSPEC,ASPEC,DENS,BMAG
( 2574)     real, dimension(3):: K1,K2
( 2575)     integer, intent(IN):: NUPAR,NUPER,NBESSJ
( 2576)     real, dimension(NUPER), intent(IN):: XI1,XI2
( 2577)     real, dimension(NUPER, NBESSJ), intent(IN):: JNXI1,JNXI2
( 2578)     real, intent(IN):: ENORM,UPARMIN,UPARMAX
( 2579)     real, dimension(NUPER), intent(IN):: UPER
( 2580)     real, dimension(NUPAR), intent(IN):: UPAR
( 2581)     real, dimension(NUPER,NUPAR), intent(IN):: DFDUPER,DFDUPAR
( 2582)     complex, dimension(3,3), intent(inout):: WSPEC
( 2583)     integer, intent(inout):: IFAIL
( 2584) 
( 2585)     complex:: BETAFACT
( 2586)     real, parameter::  EOVERAMU = 9.58084e7
( 2587)     real, parameter:: WP2FACT=1.745915
( 2588)     real, parameter:: MPC2=938271998.38
( 2589)     real, parameter:: C=2.99792458e8
( 2590)     real, parameter:: PI=3.141592653597932384
( 2591)     real:: W2,WP2,WPFACT,WCW,BETA1,BETA2
( 2592)     real:: MUT0,SQMUT0,ISQ2,NWCW
( 2593)     real:: SFACT0,SFACTP1,SFACTM1,RRP,RRM,KPARA1
( 2594)     real:: KPARABS,NPARA1,CUPAR,CUPER,DFACTPAR,DFACTPER
( 2595)     real:: RR,IRR,LF0,LNF0UPER,UPAR0,DUPARF,UPARMMAX
( 2596)     real:: CLUPARF,CUPARP,CUPARM,DFACTPARP,DFACTPARM
( 2597)     real:: IDFDUPARM,IDFDUPERM,IDFDUPARP,IDFDUPERP
( 2598)     real:: LF0P,LF0M,LNF0PUPER,LNF0MUPER
( 2599)     real:: DLF0,DLNF0UPER,UDLF0,UDLNF0UPER
( 2600)     real:: DFDUPER0,DFDUPAR0
( 2601)     real, dimension(3,3):: THETARE,THETAIM,G
( 2602)     real, dimension(NUPER,3,3):: SWW
( 2603)     real, dimension(NUPAR,3,3):: IRRG,GG,UDDGG
( 2604)     real, dimension(NUPER):: JN0XI1,JNP1XI1,JNM1XI1
( 2605)     real, dimension(NUPER):: JN0XI2,JNP1XI2,JNM1XI2
( 2606)     real, dimension(NUPAR):: LUPARF,LLOGF
( 2607)     integer:: IHARM,NHARM,NJ,NJP1,NJM1,I,J,J1,K,N,M
( 2608) 
( 2609)     GG = 0.0
( 2610) 
( 2611)     IFAIL=0
( 2612)     WSPEC(1:3,1:3) = cmplx(0.,0.)
( 2613)     W2=W*W
( 2614)     WP2=DENS*ZSPEC**2*WP2FACT/ASPEC
( 2615)     WPFACT=WP2/W2
( 2616)     WCW=BMAG*ZSPEC*EOVERAMU/ASPEC/W
( 2617)     BETA1=ATAN2(K1(2),K1(1))
( 2618)     BETA2=ATAN2(K2(2),K2(1))
( 2619)     KPARA1=K1(3)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 49

( 2620)     NPARA1=KPARA1*C/W
( 2621)     MUT0=0.5*MPC2*ASPEC/ENORM
( 2622)     SQMUT0=SQRT(MUT0)
( 2623)     ISQ2=SQRT(0.5)
( 2624)     NHARM=NBESSJ-2
( 2625) 
( 2626)     ! -- Loop over harmonics -- !
( 2627)     do IHARM=-NHARM,NHARM
( 2628)        NWCW=real(IHARM)*WCW
( 2629) 
( 2630)        BETAFACT=exp(cmplx(0.,IHARM*(BETA1-BETA2)))
( 2631)        NJ=ABS(IHARM)+1
( 2632)        NJP1=ABS(IHARM+1)+1
( 2633)        NJM1=ABS(IHARM-1)+1
( 2634)        SFACT0=real(sign(1,IHARM))**ABS(IHARM)
( 2635)        SFACTP1=real(sign(1,IHARM+1))**ABS(IHARM+1)
( 2636)        SFACTM1=real(sign(1,IHARM-1))**ABS(IHARM-1)
( 2637)        JN0XI1(1:NUPER)=SFACT0*JNXI1(1:NUPER,NJ)
( 2638)        JNP1XI1(1:NUPER)=SFACTP1*JNXI1(1:NUPER,NJP1)
( 2639)        JNM1XI1(1:NUPER)=SFACTM1*JNXI1(1:NUPER,NJM1)
( 2640)        JN0XI2(1:NUPER)=SFACT0*JNXI2(1:NUPER,NJ)
( 2641)        JNP1XI2(1:NUPER)=SFACTP1*JNXI2(1:NUPER,NJP1)
( 2642)        JNM1XI2(1:NUPER)=SFACTM1*JNXI2(1:NUPER,NJM1)
( 2643) 
( 2644)        ! -- Resonance relation -- !
( 2645)        RRP=1.-NWCW-NPARA1*UPARMAX/SQMUT0
( 2646)        RRM=1.-NWCW-NPARA1*UPARMIN/SQMUT0
( 2647) 
( 2648)        if (RRP*RRM.GT.0) then
( 2649) 
( 2650)           !--------------------------------------!
( 2651)           !-- First case: vector, no resonant  --!
( 2652)           !-- parallel velocity in the  domain --!
( 2653)           !--------------------------------------!
( 2654) 
( 2655)           do J=1,NUPAR
( 2656)              CUPAR=UPAR(J)
( 2657)              DFACTPAR=NPARA1*CUPAR/SQMUT0
( 2658)              RR=1.-NWCW-DFACTPAR
( 2659)              IRR=1./RR
( 2660) 
( 2661)              ! --- Computation of $sww=u_\perp*w$ ---
( 2662)              do K=1,NUPER
( 2663)                 CUPER=UPER(K)
( 2664)                 DFACTPER=NPARA1*CUPER/SQMUT0
( 2665)                 LF0=(1.-DFACTPAR)*DFDUPER(K,J)+DFACTPER*DFDUPAR(K,J)
( 2666)                 LNF0UPER=NWCW*DFDUPER(K,J)*CUPAR+(1.-NWCW)*DFDUPAR(K,J)*CUPER
( 2667)                 SWW(K,1,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNP1XI2(K)*CUPER
( 2668)                 SWW(K,2,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNM1XI2(K)*CUPER
( 2669)                 SWW(K,3,1)=ISQ2*CUPAR*LF0*JNP1XI1(K)*JN0XI2(K)*CUPER
( 2670)                 SWW(K,1,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNP1XI2(K)*CUPER
( 2671)                 SWW(K,2,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNM1XI2(K)*CUPER
( 2672)                 SWW(K,3,2)=ISQ2*CUPAR*LF0*JNM1XI1(K)*JN0XI2(K)*CUPER
( 2673)                 SWW(K,1,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNP1XI2(K)
( 2674)                 SWW(K,2,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNM1XI2(K)
( 2675)                 SWW(K,3,3)=CUPAR*LNF0UPER*JN0XI1(K)*JN0XI2(K)
( 2676)              end do
( 2677) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 50

( 2678)              !-- Integration over $u_\perp$ --!
( 2679)              call EQTRAPZ1D(NUPER,UPER,SWW(1,1,1),G(1,1))
( 2680)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,1),G(2,1))
( 2681)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,1),G(3,1))
( 2682)            ! call EQTRAPZ1D(NUPER,UPER,SWW(1,1,2),G(1,2)) !
( 2683)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,2),G(2,2))
( 2684)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,2),G(3,2))
( 2685)            ! call EQTRAPZ1D(NUPER,UPER,SWW(1,1,3),G(1,3)) !
( 2686)            ! call EQTRAPZ1D(NUPER,UPER,SWW(1,2,3),G(2,3)) !
( 2687)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,3),G(3,3))
( 2688) 	
( 2689) 	     G(1,2) = - G(2,1)
( 2690) 	     G(1,3) =   G(3,1)
( 2691) 	     G(2,3) = - G(3,2)
( 2692) 
( 2693)              do N=1,3
( 2694)                 do M=1,3
( 2695)                    IRRG(J,M,N)=G(M,N)*IRR
( 2696)                 end do
( 2697)              end do
( 2698) 
( 2699)           end do
( 2700) 
( 2701)           !-- Hermitian part of $\Theta/(2\pi)$ --!
( 2702)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,1,1),THETARE(1,1))
( 2703)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,2,1),THETARE(2,1))
( 2704)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,3,1),THETARE(3,1))
( 2705)        !  call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,1,2),THETARE(1,2)) !
( 2706)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,2,2),THETARE(2,2))
( 2707)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,3,2),THETARE(3,2))
( 2708)        !  call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,1,3),THETARE(1,3)) !
( 2709)        !  call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,2,3),THETARE(2,3)) !
( 2710)           call EQTRAPZ1D(NUPAR,UPAR,IRRG(1,3,3),THETARE(3,3))
( 2711) 	
( 2712) 	  THETARE(1,2) = - THETARE(2,1)
( 2713) 	  THETARE(1,3) =   THETARE(3,1)
( 2714) 	  THETARE(2,3) = - THETARE(3,2)
( 2715) 
( 2716)           !-- Anti-hermitian part of $\Theta/(2\pi)$ --!
( 2717)           THETAIM(1:3,1:3)=0.
( 2718) 
( 2719)        else
( 2720) 
( 2721)           !---------------------------------------------------!
( 2722)           !-- Second case: there is a resonant              --!
( 2723)           !-- parallel velocity in the $u_\parallel$ domain --!
( 2724)           !---------------------------------------------------!
( 2725) 
( 2726)           !-- Resonant parallel velocity --!
( 2727)           UPAR0=SQMUT0/NPARA1*(1.-NWCW)
( 2728) 
( 2729)           ! --- 1. Hermitian part --- !
( 2730) 
( 2731)           !-- New $u_\parallel$ grid --!
( 2732)           LUPARF(1)=0.
( 2733)           LLOGF(1)=0.
( 2734)           UPARMMAX=max(abs(UPARMIN),abs(UPARMAX))
( 2735)           DUPARF=(UPARMMAX+ABS(UPAR0))/(NUPAR-1)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 51

( 2736)           do J1=2,NUPAR
( 2737)              CLUPARF=DUPARF*(J1-1)
( 2738)              LUPARF(J1)=CLUPARF
( 2739)              LLOGF(J1)=CLUPARF*(LOG(ABS(CLUPARF))-1.)
( 2740)           end do
( 2741) 
( 2742)           do J=1,NUPAR
( 2743)              CUPARP=UPAR0+LUPARF(J)
( 2744)              CUPARM=UPAR0-LUPARF(J)
( 2745)              DFACTPARP=NPARA1*CUPARP/SQMUT0
( 2746)              DFACTPARM=NPARA1*CUPARM/SQMUT0
( 2747) 
( 2748)              ! --- Computation of $sww=u_\perp*w$ ---
( 2749)              do K=1,NUPER
( 2750)                 CUPER=UPER(K)
( 2751)                 DFACTPER=NPARA1*CUPER/SQMUT0
( 2752)                 call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPAR, &
( 2753)                      & CUPER,CUPARP,IDFDUPARP)
( 2754)                 call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPER, &
( 2755)                      & CUPER,CUPARP,IDFDUPERP)
( 2756)                 call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPAR, &
( 2757)                      & CUPER,CUPARM,IDFDUPARM)
( 2758)                 call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPER, &
( 2759)                      & CUPER,CUPARM,IDFDUPERM)
( 2760)                 LF0P=(1.-DFACTPARP)*IDFDUPERP+DFACTPER*IDFDUPARP
( 2761)                 LF0M=(1.-DFACTPARM)*IDFDUPERM+DFACTPER*IDFDUPARM
( 2762)                 LNF0PUPER=NWCW*IDFDUPERP*CUPARP+(1.-NWCW)*IDFDUPARP*CUPER
( 2763)                 LNF0MUPER=NWCW*IDFDUPERM*CUPARM+(1.-NWCW)*IDFDUPARM*CUPER
( 2764)                 DLF0=LF0P-LF0M
( 2765)                 DLNF0UPER=LNF0PUPER-LNF0MUPER
( 2766)                 UDLF0=CUPARP*LF0P-CUPARM*LF0M
( 2767)                 UDLNF0UPER=CUPARP*LNF0PUPER-CUPARM*LNF0MUPER
( 2768)                 SWW(K,1,1)=0.5*CUPER*DLF0*JNP1XI1(K)*JNP1XI2(K)*CUPER
( 2769)                 SWW(K,2,1)=0.5*CUPER*DLF0*JNP1XI1(K)*JNM1XI2(K)*CUPER
( 2770)                 SWW(K,3,1)=ISQ2*UDLF0*JNP1XI1(K)*JN0XI2(K)*CUPER
( 2771)                 SWW(K,1,2)=0.5*CUPER*DLF0*JNM1XI1(K)*JNP1XI2(K)*CUPER
( 2772)                 SWW(K,2,2)=0.5*CUPER*DLF0*JNM1XI1(K)*JNM1XI2(K)*CUPER
( 2773)                 SWW(K,3,2)=ISQ2*UDLF0*JNM1XI1(K)*JN0XI2(K)*CUPER
( 2774)                 SWW(K,1,3)=ISQ2*CUPER*DLNF0UPER*JN0XI1(K)*JNP1XI2(K)
( 2775)                 SWW(K,2,3)=ISQ2*CUPER*DLNF0UPER*JN0XI1(K)*JNM1XI2(K)
( 2776)                 SWW(K,3,3)=UDLNF0UPER*JN0XI1(K)*JN0XI2(K)
( 2777)              end do
( 2778) 
( 2779)              !-- Integration over $u_\perp$ --!
( 2780)              call EQTRAPZ1D(NUPER,UPER,SWW(1,1,1),GG(J,1,1))
( 2781)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,1),GG(J,2,1))
( 2782)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,1),GG(J,3,1))
( 2783)           !  call EQTRAPZ1D(NUPER,UPER,SWW(1,1,2),GG(J,1,2)) !
( 2784)              call EQTRAPZ1D(NUPER,UPER,SWW(1,2,2),GG(J,2,2))
( 2785)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,2),GG(J,3,2))
( 2786)           !  call EQTRAPZ1D(NUPER,UPER,SWW(1,1,3),GG(J,1,3)) !
( 2787)           !  call EQTRAPZ1D(NUPER,UPER,SWW(1,2,3),GG(J,2,3)) !
( 2788)              call EQTRAPZ1D(NUPER,UPER,SWW(1,3,3),GG(J,3,3))
( 2789) 	
( 2790) 	     GG(J,1,2) = - GG(J,2,1)
( 2791) 	     GG(J,1,3) =   GG(J,3,1)
( 2792) 	     GG(J,2,3) = - GG(J,3,2)
( 2793) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 52

( 2794)           end do
( 2795) 
( 2796)           !-- $gg''*llogf$ --!
( 2797)           UDDGG(1,1:3,1:3)=0.
( 2798)           UDDGG(NUPAR,1:3,1:3)=0.
( 2799)           do J=2,NUPAR-1
( 2800)              UDDGG(J,1,1)=LLOGF(J)* &
( 2801)                   & (GG(J+1,1,1)-2.*GG(J,1,1)+GG(J-1,1,1))/DUPARF**2
( 2802)              UDDGG(J,2,1)=LLOGF(J)* &
( 2803)                   & (GG(J+1,2,1)-2.*GG(J,2,1)+GG(J-1,2,1))/DUPARF**2
( 2804)              UDDGG(J,3,1)=LLOGF(J)* &
( 2805)                   & (GG(J+1,3,1)-2.*GG(J,3,1)+GG(J-1,3,1))/DUPARF**2
( 2806)              UDDGG(J,1,2)=LLOGF(J)* &
( 2807)                   & (GG(J+1,1,2)-2.*GG(J,1,2)+GG(J-1,1,2))/DUPARF**2
( 2808)              UDDGG(J,2,2)=LLOGF(J)* &
( 2809)                   & (GG(J+1,2,2)-2.*GG(J,2,2)+GG(J-1,2,2))/DUPARF**2
( 2810)              UDDGG(J,3,2)=LLOGF(J)* &
( 2811)                   & (GG(J+1,3,2)-2.*GG(J,3,2)+GG(J-1,3,2))/DUPARF**2
( 2812)              UDDGG(J,1,3)=LLOGF(J)* &
( 2813)                   &(GG(J+1,1,3)-2.*GG(J,1,3)+GG(J-1,1,3))/DUPARF**2
( 2814)              UDDGG(J,2,3)=LLOGF(J)* &
( 2815)                   & (GG(J+1,2,3)-2.*GG(J,2,3)+GG(J-1,2,3))/DUPARF**2
( 2816)              UDDGG(J,3,3)=LLOGF(J)* &
( 2817)                   & (GG(J+1,3,3)-2.*GG(J,3,3)+GG(J-1,3,3))/DUPARF**2
( 2818)           end do
( 2819) 
( 2820)           !-- Real part of $\Theta/(2\pi)$ --!
( 2821)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,1,1),THETARE(1,1))
( 2822)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,2,1),THETARE(2,1))
( 2823)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,3,1),THETARE(3,1))
( 2824)        !  call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,1,2),THETARE(1,2)) !
( 2825)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,2,2),THETARE(2,2))
( 2826)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,3,2),THETARE(3,2))
( 2827)        !  call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,1,3),THETARE(1,3)) !
( 2828)        !  call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,2,3),THETARE(2,3)) !
( 2829)           call EQTRAPZ1D(NUPAR,LUPARF,UDDGG(1,3,3),THETARE(3,3))
( 2830) 	
( 2831) 	  THETARE(1,2) = - THETARE(2,1)
( 2832) 	  THETARE(1,3) =   THETARE(3,1)
( 2833) 	  THETARE(2,3) = - THETARE(3,2)
( 2834) 
( 2835)           do N=1,3
( 2836)              do M=1,3
( 2837)                 THETARE(M,N)=-THETARE(M,N)*SQMUT0/NPARA1
( 2838)              end do
( 2839)           end do
( 2840) 
( 2841)           ! --- 2. Anti-hermitian part --- !
( 2842)           do K=1,NUPER
( 2843)              CUPER=UPER(K)
( 2844)              DFACTPER=NPARA1*CUPER/SQMUT0
( 2845)              call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPAR,CUPER,UPAR0,DFDUPAR0)
( 2846)              call WINTERP2D(UPER,NUPER,UPAR,NUPAR,DFDUPER,CUPER,UPAR0,DFDUPER0)
( 2847) 
( 2848)              LF0=NWCW*DFDUPER0+DFACTPER*DFDUPAR0
( 2849)              LNF0UPER=NWCW*DFDUPER0*UPAR0+(1.-NWCW)*DFDUPAR0*CUPER
( 2850) 
( 2851)              SWW(K,1,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNP1XI2(K)*CUPER






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 53

( 2852)              SWW(K,2,1)=0.5*CUPER*LF0*JNP1XI1(K)*JNM1XI2(K)*CUPER
( 2853)              SWW(K,3,1)=ISQ2*UPAR0*LF0*JNP1XI1(K)*JN0XI2(K)*CUPER
( 2854)              SWW(K,1,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNP1XI2(K)*CUPER
( 2855)              SWW(K,2,2)=0.5*CUPER*LF0*JNM1XI1(K)*JNM1XI2(K)*CUPER
( 2856)              SWW(K,3,2)=ISQ2*UPAR0*LF0*JNM1XI1(K)*JN0XI2(K)*CUPER
( 2857)              SWW(K,1,3)=ISQ2*CUPAR*LNF0UPER*JN0XI1(K)*JNP1XI2(K)
( 2858)              SWW(K,2,3)=ISQ2*CUPER*LNF0UPER*JN0XI1(K)*JNM1XI2(K)
( 2859)              SWW(K,3,3)=UPAR0*LNF0UPER*JN0XI1(K)*JN0XI2(K)
( 2860)           end do
( 2861) 
( 2862)           !--- Integration over $u_perp$ ---!
( 2863)           call EQTRAPZ1D(NUPER,UPER,SWW(1,1,1),G(1,1))
( 2864)           call EQTRAPZ1D(NUPER,UPER,SWW(1,2,1),G(2,1))
( 2865)           call EQTRAPZ1D(NUPER,UPER,SWW(1,3,1),G(3,1))
( 2866)        !  call EQTRAPZ1D(NUPER,UPER,SWW(1,1,2),G(1,2)) !
( 2867)           call EQTRAPZ1D(NUPER,UPER,SWW(1,2,2),G(2,2))
( 2868)           call EQTRAPZ1D(NUPER,UPER,SWW(1,3,2),G(3,2))
( 2869)        !  call EQTRAPZ1D(NUPER,UPER,SWW(1,1,3),G(1,3)) !
( 2870)        !  call EQTRAPZ1D(NUPER,UPER,SWW(1,2,3),G(2,3)) !
( 2871)           call EQTRAPZ1D(NUPER,UPER,SWW(1,3,3),G(3,3))
( 2872) 	
( 2873) 	  G(1,2) = - G(2,1)
( 2874) 	  G(1,3) =   G(3,1)
( 2875) 	  G(2,3) = - G(3,2)
( 2876) 
( 2877)           !-- Imaginary part of $\Theta/(2\pi)$ --!
( 2878)           do N=1,3
( 2879)              do M=1,3
( 2880)                 THETAIM(M,N)=-PI*G(M,N)*SQMUT0/abs(NPARA1)
( 2881)              end do
( 2882)           end do
( 2883) 
( 2884)        end if
( 2885) 
( 2886)        do N=1,3
( 2887)           do M=1,3
( 2888)              WSPEC(M,N)=WSPEC(M,N)+ &
( 2889)                   & 2.*PI*WPFACT*BETAFACT*cmplx(THETARE(M,N),THETAIM(M,N))
( 2890)           end do
( 2891)        end do
( 2892)     end do
( 2893) 
( 2894)     call WROTATE_AORSA(BETA1,BETA2,WSPEC(1,1))
( 2895) 
( 2896)   end subroutine GETNONMAX_SIGMA_AORSA
( 2897) 
( 2898) !
( 2899) !*************************************************************************
( 2900) !
( 2901) 
( 2902) 
( 2903) 
( 2904) 
( 2905)   subroutine BESSJ(XI,JNXI,LXI,LNBESSJ,LNSBESSJ)
( 2906)     implicit none
( 2907)     integer, intent(IN):: LXI,LNBESSJ,LNSBESSJ
( 2908)     real, dimension(LXI), intent(IN):: XI
( 2909)     real, dimension(LXI,LNBESSJ), intent(inout):: JNXI






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 54

( 2910)     real, parameter:: BIGNO=1.e10,BIGNI=1.e-10
( 2911)     real, dimension(LXI):: TOX,AXI,J0XI,J1XI
( 2912)     real, dimension(LXI):: BJP,BJ,BJM,JSUM
( 2913)     integer:: MSUM,IX,N,NP
( 2914)     integer, dimension(LXI):: MCOR
( 2915) 
( 2916)     ! --- Returns the J bessel functions from 0 to LNBESSJ --- !
( 2917)     ! --- LNSBESSJ is the starting point for the downard recurence --- !
( 2918)     ! --- XI(LXI) is the argument array and JNXI(LXI,LNBESSJ) is the output ---!
( 2919) 
( 2920) !dir$ preferstream,prefervector
( 2921)     do IX=1,LXI
( 2922)     JNXI(IX,1:LNBESSJ)=0.
( 2923) 
( 2924)     TOX(IX)=0.
( 2925)     AXI(IX)=ABS(XI(IX))
( 2926)     if (AXI(IX).GT.0.)then
( 2927)        TOX(IX)=2./AXI(IX)
( 2928)     endif
( 2929) 
( 2930)     BJP(IX)=0.
( 2931)     BJ(IX)=1.
( 2932)     JSUM(IX)=0.
( 2933)     enddo
( 2934) !    MSUM=0
( 2935)     do N=LNSBESSJ,1,-1
( 2936) !dir$ concurrent,preferstream,prefervector
( 2937)       do IX=1,LXI
( 2938)       MSUM=mod((LNSBESSJ-N),2)
( 2939)        MCOR(IX)=0
( 2940)        BJM(IX)=REAL(N)*TOX(IX)*BJ(IX)-BJP(IX)
( 2941)        BJP(IX)=BJ(IX)
( 2942)        BJ(IX)=BJM(IX)
( 2943)        if (ABS(BJ(IX)).GT.BIGNO)then
( 2944)           BJ(IX)=BJ(IX)*BIGNI
( 2945)           BJP(IX)=BJP(IX)*BIGNI
( 2946)           JSUM(IX)=JSUM(IX)*BIGNI
( 2947)           MCOR(IX)=1
( 2948)        endif
( 2949)        JSUM(IX)=JSUM(IX)+REAL(MSUM)*BJ(IX)
( 2950) !       MSUM=1-MSUM
( 2951)        if (N.LT.LNBESSJ) JNXI(IX,N+1)=BJP(IX)
( 2952)        do NP=N+2,LNBESSJ
( 2953)           if (MCOR(IX).EQ.1)then
( 2954)              JNXI(IX,NP)=JNXI(IX,NP)*BIGNI
( 2955)           endif
( 2956)        end do
( 2957)       enddo
( 2958)     end do
( 2959)     do IX=1,LXI
( 2960) 
( 2961)     JSUM(IX)=2.*JSUM(IX)-BJ(IX)
( 2962)     do N=1,LNBESSJ
( 2963)        JNXI(IX,N)=JNXI(IX,N)/JSUM(IX)
( 2964)     end do
( 2965)     end do
( 2966) 
( 2967)     ! --- Upward Recurrence for x>=n --- !






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 55

( 2968)     call BESSJ0(AXI,J0XI,LXI)
( 2969)     call BESSJ1(AXI,J1XI,LXI)
( 2970)     do IX=1,LXI
( 2971)     BJM(IX)=J0XI(IX)
( 2972)     BJ(IX)=J1XI(IX)
( 2973)     do N=1,LNBESSJ
( 2974)        if (AXI(IX)>=real(N-1))then
( 2975)           JNXI(IX,N)=BJM(IX)
( 2976)           BJP(IX)=REAL(N)*TOX(IX)*BJ(IX)-BJM(IX)
( 2977)           BJM(IX)=BJ(IX)
( 2978)           BJ(IX)=BJP(IX)
( 2979)        endif
( 2980)     end do
( 2981) 
( 2982)     ! --- Zero --- !
( 2983)        if (XI(IX)==0.) then
( 2984)           JNXI(IX,1)=1.
( 2985)           do N=2,LNBESSJ
( 2986)              JNXI(IX,N)=0.
( 2987)           end do
( 2988)        end if
( 2989) !    end do
( 2990) 
( 2991)     ! --- Revert when needed --- !
( 2992)     ! --- N.B. J1 does not need to be reverted --- !
( 2993) !    do IX=1,LXI
( 2994)        do N=4,LNBESSJ,2
( 2995)           if (XI(IX).LT.0.) JNXI(IX,N)=-JNXI(IX,N)
( 2996)        end do
( 2997)     end do
( 2998) 
( 2999)   end subroutine BESSJ
( 3000) 
( 3001) !
( 3002) !*************************************************************************
( 3003) !
( 3004) 
( 3005) 
  2937, Invariant assignments hoisted out of loop

























PGF90 (Version      7.0)          05/01/2008  16:42:33      page 56

( 3006)   subroutine BESSJ0(XI,J0XI,LXI)
( 3007)     implicit none
( 3008)     integer, intent(IN):: LXI
( 3009)     real, dimension(LXI), intent(IN) :: XI
( 3010)     real, dimension(LXI), intent(inout) :: J0XI
( 3011)     real, dimension(LXI) :: YI,AXI,XXI,ZI
( 3012)     real, dimension(5):: P,Q
( 3013)     real, dimension(6):: R,S
( 3014)     P=(/1.0,-0.1098628627e-2,0.2734510407e-4, &
( 3015)          -0.2073370639e-5,0.2093887211e-6/)
( 3016)     Q=(/-0.1562499995e-1,0.1430488765e-3, &
( 3017)          -0.6911147651e-5,0.7621095161e-6,-0.934945152e-7/)
( 3018)     R=(/57568490574.0,-13362590354.0,651619640.7, &
( 3019)          -11214424.18,77392.33017,-184.9052456/)
( 3020)     S=(/57568490411.0,1029532985.0,&
( 3021)          9494680.718,59272.64853,267.8532712,1.0/)
( 3022) 
( 3023)     where (abs(XI).LT.8.0)
( 3024)        YI=XI*XI
( 3025)        J0XI=(R(1)+YI*(R(2)+YI*(R(3)+YI*(R(4)+YI*(R(5)+YI*R(6))))))/ &
( 3026)             (S(1)+YI*(S(2)+YI*(S(3)+YI*(S(4)+YI*(S(5)+YI*S(6))))))
( 3027)     elsewhere
( 3028)        AXI=abs(XI)
( 3029)        ZI=8./AXI
( 3030)        YI=ZI*ZI
( 3031)        XXI=AXI-0.785398164
( 3032)        J0XI=sqrt(0.636619772/AXI)* &
( 3033)             (cos(XXI)*(P(1)+YI*(P(2)+YI*(P(3)+YI*(P(4)+YI*P(5))))) &
( 3034)             - ZI*sin(XXI)*(Q(1)+YI*(Q(2)+YI*(Q(3)+YI*(Q(4)+YI*Q(5))))))
( 3035)     end where
( 3036)   end subroutine BESSJ0
( 3037) 
( 3038) !
( 3039) !*************************************************************************
( 3040) !
( 3041) 
( 3042) 
( 3043) 
( 3044)   subroutine BESSJ1(XI,J1XI,LXI)
( 3045)     implicit none
( 3046)     integer, intent(IN):: LXI
( 3047)     real, dimension(LXI), intent(IN):: XI
( 3048)     real, dimension(LXI), intent(inout):: J1XI
( 3049)     real, dimension(LXI) :: YI,AXI,XXI,ZI
( 3050)     real, dimension(5):: P,Q
( 3051)     real, dimension(6):: R,S
( 3052)     integer:: IX
( 3053) 
( 3054)     P=(/1.0,0.183105e-2,-0.3516396496e-4, &
( 3055)          0.2457520174e-5,-0.240337019e-6/)
( 3056)     Q=(/0.04687499995,-0.2002690873e-3, &
( 3057)          0.8449199096e-5,-0.88228987e-6,0.105787412e-6/)
( 3058)     R=(/72362614232.0,-7895059235.0,242396853.1, &
( 3059)          -2972611.439,15704.48260,-30.16036606/)
( 3060)     S=(/144725228442.0,2300535178.0,18583304.74, &
( 3061)          99447.43394,376.9991397,1.0/)
( 3062) 
( 3063)     where (abs(XI).LT.8.0)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 57

( 3064)        YI=XI*XI
( 3065)        J1XI=XI*(R(1)+YI*(R(2)+YI*(R(3)+YI*(R(4)+YI*(R(5)+YI*R(6))))))/ &
( 3066)             (S(1)+YI*(S(2)+YI*(S(3)+YI*(S(4)+YI*(S(5)+YI*S(6))))))
( 3067)     elsewhere
( 3068)        AXI=abs(XI)
( 3069)        ZI=8./AXI
( 3070)        YI=ZI*ZI
( 3071)        XXI=AXI-2.356194491
( 3072)        J1XI=sqrt(0.636619772/AXI)* &
( 3073)             (cos(XXI)*(P(1)+YI*(P(2)+YI*(P(3)+YI*(P(4)+YI*P(5))))) &
( 3074)             - ZI*sin(XXI)*(Q(1)+YI*(Q(2)+YI*(Q(3)+YI*(Q(4)+YI*Q(5)))))) &
( 3075)             *sign(1.0,XI)
( 3076)     end where
( 3077) 
( 3078)     ! --- Revert if needed --- !
( 3079)     do IX=1,LXI
( 3080)        if (XI(IX).LT.0.) J1XI(IX)=-J1XI(IX)
( 3081)     end do
( 3082) 
( 3083)   end subroutine BESSJ1
( 3084) 
( 3085) !
( 3086) !*************************************************************************
( 3087) !
( 3088) 
( 3089) 
( 3090)   subroutine EQTRAPZ1D(LNU,LU,ARRAY,INTEGRAL)
( 3091)     ! -- 1D trapezoidal integration for equally spaced coordinates -- !
( 3092)     implicit none
( 3093)     integer, intent(IN):: LNU
( 3094)     real, dimension(LNU), intent(IN):: LU,ARRAY
( 3095)     real, intent(inout):: INTEGRAL
( 3096)     real:: DU
( 3097) 
( 3098)     DU=(LU(LNU)-LU(1))/(LNU-1.)
( 3099)     INTEGRAL=(sum(ARRAY(2:LNU-1))+0.5*(ARRAY(1)+ARRAY(LNU)))*DU
( 3100) 
( 3101)   end subroutine EQTRAPZ1D
( 3102) 
( 3103) !
( 3104) !*************************************************************************
( 3105) !
( 3106) 
  3099, sum reduction inlined




















PGF90 (Version      7.0)          05/01/2008  16:42:33      page 58

( 3107)       subroutine sgrate2(nxmax, x, f, ans)
( 3108) 
( 3109)       implicit none
( 3110) 
( 3111)       integer n, nxmax
( 3112)       real f(nxmax), x(nxmax), ans
( 3113) 
( 3114)       ans = 0.0
( 3115)       do n = 1, nxmax-1
( 3116)          ans = ans + (x(n+1) - x(n)) * (f(n) + f(n+1)) / 2.0
( 3117)       end do
( 3118) 
( 3119)       return
( 3120)       end
( 3121) !
( 3122) !*************************************************************************
( 3123) !
( 3124) 
( 3125) 
( 3126)   subroutine EQSIMPSON1D(LNU,LU,ARRAY,INTEGRAL)
( 3127)     ! -- 1D Simpson integration for equally spaced coordinates and odd N -- !
( 3128)     implicit none
( 3129)     integer, intent(IN):: LNU
( 3130)     real, dimension(LNU), intent(IN):: LU,ARRAY
( 3131)     real, intent(inout):: INTEGRAL
( 3132) 
( 3133)     real:: DU
( 3134)     integer:: I
( 3135) 
( 3136)     DU=(LU(LNU)-LU(1))/(LNU-1.)
( 3137)     INTEGRAL=2.*sum(ARRAY(2:LNU-1))+ARRAY(1)+ARRAY(LNU)
( 3138)     do I=1,(LNU-1)/2
( 3139)        INTEGRAL=INTEGRAL+2.*ARRAY(2*I)
( 3140)     end do
( 3141)     INTEGRAL=INTEGRAL*DU / 3.
( 3142) 
( 3143)   end subroutine EQSIMPSON1D
( 3144) 
( 3145) !
( 3146) !*************************************************************************
( 3147) !
  3137, sum reduction inlined






















PGF90 (Version      7.0)          05/01/2008  16:42:33      page 59

( 3148)   subroutine EQSIMPSON1D_2(LNU,LU,ARRAY,INTEGRAL)
( 3149)     ! -- 1D Simpson integration for equally spaced coordinates and odd N -- !
( 3150)     implicit none
( 3151)     integer, intent(IN):: LNU
( 3152)     real, dimension(LNU), intent(IN):: LU,ARRAY
( 3153)     real, intent(inout):: INTEGRAL
( 3154) 
( 3155)     real:: DU
( 3156) 
( 3157)     DU=(LU(LNU)-LU(1))/(LNU-1.)
( 3158)     INTEGRAL=ARRAY(1)+ARRAY(LNU)+ 2.*sum(array(2:lnu-1))
( 3159)     integral = integral + 2.*sum(array(2:lnu-1:2))
( 3160) 
( 3161)     INTEGRAL=INTEGRAL*DU / 3.
( 3162) 
( 3163)   end subroutine EQSIMPSON1D_2
( 3164) 
( 3165) !
( 3166) !*************************************************************************
( 3167) !
( 3168) 
( 3169) 
  3158, sum reduction inlined
  3159, sum reduction inlined








































PGF90 (Version      7.0)          05/01/2008  16:42:33      page 60

( 3170)   subroutine WINTERP2D(X,LX,Y,LY,FXY,X0,Y0,FXY0)
( 3171)     implicit none
( 3172)     integer, intent(IN):: LX,LY
( 3173)     real, dimension(LX), intent(IN):: X
( 3174)     real, dimension(LY), intent(IN):: Y
( 3175)     real, dimension(LX,LY), intent(IN):: FXY
( 3176)     real, intent(IN):: X0,Y0
( 3177)     real, intent(inout):: FXY0
( 3178)     real:: A0,A1,A2,A3,A4,A5,P,Q
( 3179)     real:: XMIN,XMAX,YMIN,YMAX,DX,DY
( 3180)     integer:: I,J
( 3181) 
( 3182)     FXY0=0.
( 3183)     XMIN=X(1)
( 3184)     YMIN=Y(1)
( 3185)     XMAX=X(LX)
( 3186)     YMAX=Y(LY)
( 3187)     DX=(XMAX-XMIN)/(LX-1)
( 3188)     DY=(YMAX-YMIN)/(LY-1)
( 3189)     if ((X0>=XMIN).and.(X0<=XMAX).and.(Y0>=YMIN).and.(Y0<=YMAX)) then
( 3190) 
( 3191)        I=int(1.+(X0-XMIN)/DX)
( 3192)        J=int(1.+(Y0-YMIN)/DY)
( 3193)        P=(X0-X(I))/DX
( 3194)        Q=(Y0-Y(J))/DY
( 3195) 
( 3196)        if (I.eq.LX) I=LX-1
( 3197)        if (J.eq.LY) J=LY-1
( 3198)        if ((I.ne.1).and.(J.ne.1)) then
( 3199)           A0=0.5*Q*(Q-1.)
( 3200)           A1=0.5*P*(P-1.)
( 3201)           A2=1.+P*Q-P*P-Q*Q
( 3202)           A3=0.5*P*(P-2.*Q+1.)
( 3203)           A4=0.5*Q*(Q-2.*P+1.)
( 3204)           A5=P*Q
( 3205)           FXY0=A0*FXY(I,J-1)+A1*FXY(I-1,J)+A2*FXY(I,J)+A3*FXY(I+1,J) &
( 3206)                +A4*FXY(I,J+1)+A5*FXY(I+1,J+1)
( 3207)        else
( 3208)           A0=(1.-P)*(1.-Q)
( 3209)           A1=P*(1.-Q)
( 3210)           A2=Q*(1.-P)
( 3211)           A3=P*Q
( 3212)           FXY0=A0*FXY(I,J)+A1*FXY(I+1,J)+A2*FXY(I,J+1)+A3*FXY(I+1,J+1)
( 3213)        end if
( 3214)    end if
( 3215)   end subroutine WINTERP2D
( 3216) 
( 3217) !
( 3218) !*************************************************************************
( 3219) !
( 3220) 
( 3221)   SUBROUTINE WROTATE_AORSA(BETA1,BETA2,W)
( 3222)     !     Apply unitary polarization matrices, eg., Wout = C2*Win*C1
( 3223)     !     Transforms the perpendicular part of the tensor from right
( 3224)     !     and left polarized components into fixed real components.
( 3225)     IMPLICIT NONE
( 3226)     real:: BETA1,BETA2
( 3227)     complex :: W(3,3),WW(3,3),C1(3,3),C2(3,3)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 61

( 3228)     complex :: C1P,C1M,C2P,C2M
( 3229)     INTEGER I,J,K
( 3230)     real, parameter :: ZERO = 0.0, ONE = 1.0
( 3231)     real, parameter :: ROOTHALF = 0.707106781
( 3232)     C1P = ROOTHALF*EXP(CMPLX(ZERO,BETA1))
( 3233)     C1M = ROOTHALF*EXP(CMPLX(ZERO,-BETA1))
( 3234)     C2P = ROOTHALF*EXP(CMPLX(ZERO,BETA2))
( 3235)     C2M = ROOTHALF*EXP(CMPLX(ZERO,-BETA2))
( 3236)     C1(1,1) = C1P
( 3237)     C1(2,1) = C1M
( 3238)     C1(3,1) = CMPLX(ZERO,ZERO)
( 3239)     C1(1,2) = C1P*CMPLX(ZERO,-ONE)
( 3240)     C1(2,2) = C1M*CMPLX(ZERO,ONE)
( 3241)     C1(3,2) = CMPLX(ZERO,ZERO)
( 3242)     C1(1,3) = CMPLX(ZERO,ZERO)
( 3243)     C1(2,3) = CMPLX(ZERO,ZERO)
( 3244)     C1(3,3) = CMPLX(ONE,ZERO)
( 3245)     C2(1,1) = C2M
( 3246)     C2(2,1) = C2M*CMPLX(ZERO,ONE)
( 3247)     C2(3,1) = CMPLX(ZERO,ZERO)
( 3248)     C2(1,2) = C2P
( 3249)     C2(2,2) = C2P*CMPLX(ZERO,-ONE)
( 3250)     C2(3,2) = CMPLX(ZERO,ZERO)
( 3251)     C2(1,3) = CMPLX(ZERO,ZERO)
( 3252)     C2(2,3) = CMPLX(ZERO,ZERO)
( 3253)     C2(3,3) = CMPLX(ONE,ZERO)
( 3254)     DO I=1,3
( 3255)        DO J=1,3
( 3256)           WW(I,J) = CMPLX(ZERO,ZERO)
( 3257)           DO K=1,3
( 3258)              WW(I,J) = WW(I,J) + W(I,K)*C1(K,J)
( 3259)           enddo
( 3260)        enddo
( 3261)     enddo
( 3262)     DO I=1,3
( 3263)        DO J=1,3
( 3264)           W(I,J) = CMPLX(ZERO,ZERO)
( 3265)           DO K=1,3
( 3266)              W(I,J) = W(I,J) + C2(I,K)*WW(K,J)
( 3267)           enddo
( 3268)        enddo
( 3269)     enddo
( 3270)     RETURN
( 3271)   END subroutine WROTATE_AORSA
( 3272) 
( 3273) !
( 3274) !*************************************************************************
( 3275) !
( 3276) 
( 3277) 
( 3278)   subroutine CAUCHY_PPART(X,NX,XRES,FX,PINT)
( 3279)     ! -- Returns principal part of int(x,fx/(x-xres)) -- !
( 3280)     implicit none
( 3281)     integer, intent(IN):: NX
( 3282)     real, dimension(NX), intent(IN):: X,FX
( 3283)     real, intent(IN):: XRES
( 3284)     real, intent(inout):: PINT
( 3285) 






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 62

( 3286)     real:: CXP,CXM,FXP,FXM,LLOGF,XMAX,XMIN
( 3287)     real:: CXF,DXF,DX
( 3288)     real, dimension(NX):: LXF,INTGD,FXPP
( 3289)     integer:: IX,IXM1,IXP1
( 3290) 
( 3291)     IXM1(IX)=MAX(IX-1,1)
( 3292)     IXP1(IX)=MIN(IX+1,NX)
( 3293) 
( 3294)     XMAX=X(NX)
( 3295)     XMIN=X(1)
( 3296)     DXF=(XMAX+ABS(XRES))/(NX-1)
( 3297)     DX=(XMAX-XMIN)/(NX-1)
( 3298) 
( 3299)     do IX=1,NX
( 3300)        CXF=DXF*(IX-1)
( 3301)        FXPP(IX)=(FX(IXP1(IX))-2.*FX(IX)+FX(IXM1(IX)))/DX**2
( 3302)        LXF(IX)=CXF
( 3303)     end do
( 3304) 
( 3305)     INTGD(1)=0.
( 3306)     do IX=2,NX
( 3307)        CXF=LXF(IX)
( 3308)        LLOGF=CXF*(LOG(ABS(CXF))-1.)
( 3309)        CXP=XRES+CXF
( 3310)        CXM=XRES-CXF
( 3311)        call WINTERP1D(X,NX,FXPP,CXP,FXP)
( 3312)        call WINTERP1D(X,NX,FXPP,CXM,FXM)
( 3313)        INTGD(IX)=LLOGF*(FXP-FXM)
( 3314)     end do
( 3315) 
( 3316)     call EQSIMPSON1D(NX,LXF,INTGD,PINT)
( 3317) 
( 3318)   end subroutine CAUCHY_PPART
( 3319) 
( 3320) !
( 3321) !*************************************************************************
( 3322) !
( 3323)   subroutine WINTERP1D(X,LX,FX,X0,FX0)
( 3324)     implicit none
( 3325)     integer, intent(IN):: LX
( 3326)     real, dimension(LX), intent(IN):: X,FX
( 3327)     real, intent(IN):: X0
( 3328)     real, intent(inout):: FX0
( 3329) 
( 3330)     real:: FXY0,XMIN,XMAX,DX
( 3331)     real:: P,A1,A2,A3
( 3332)     integer:: I
( 3333) 
( 3334)     FX0=0.
( 3335)     XMIN=X(1)
( 3336)     XMAX=X(LX)
( 3337)     DX=(XMAX-XMIN)/(LX-1)
( 3338)     if ((X0>=XMIN).and.(X0<=XMAX)) then
( 3339)        I=int(1.+(X0-XMIN)/DX)
( 3340)        P=(X0-X(I))/DX
( 3341)        if (I.eq.LX) I=LX-1
( 3342)        if (I.eq.1) I=2
( 3343)        A1=0.5*P*(P-1.)






PGF90 (Version      7.0)          05/01/2008  16:42:33      page 63

( 3344)        A2=1.-P*P
( 3345)        A3=0.5*P*(P+1.)
( 3346)        FX0=A1*FX(I-1)+A2*FX(I)+A3*FX(I+1)
( 3347)     end if
( 3348)   end subroutine WINTERP1D
( 3349) !
( 3350) !*************************************************************************
( 3351) !
( 3352)   subroutine WINTERP1D_2(X,LX,FX,X0,FX0)
( 3353)     implicit none
( 3354)     integer, intent(IN):: LX
( 3355)     real, dimension(LX), intent(IN):: X,FX
( 3356)     real, intent(IN):: X0
( 3357)     real, intent(inout):: FX0
( 3358) 
( 3359)     real:: FXY0,XMIN,XMAX,DX
( 3360)     real:: P,A1,A2,A3
( 3361)     integer:: I
( 3362) 
( 3363)     FX0=0.
( 3364)     XMIN=X(1)
( 3365)     XMAX=X(LX)
( 3366)     DX=(XMAX-XMIN)/(LX-1)
( 3367)     if ((X0>=XMIN).and.(X0<=XMAX)) then
( 3368)        I=int(1.+(X0-XMIN)/DX)
( 3369)        P=(X0-X(I))/DX
( 3370) !       if (I.eq.LX) I=LX-1
( 3371) !       if (I.eq.1) I=2
( 3372) 
( 3373)        if(i .ne. 1 .and. i .ne. lx)then
( 3374)           A1=0.5*P*(P-1.)
( 3375)           A2=1.-P*P
( 3376)           A3=0.5*P*(P+1.)
( 3377)           FX0=A1*FX(I-1)+A2*FX(I)+A3*FX(I+1)
( 3378)        else
( 3379)           if(i .eq. lx) fx0 = fx(i)
( 3380)           if(i .eq. 1)  fx0 = fx(i) + (fx(i+1) - fx(i)) * p
( 3381)        end if
( 3382) 
( 3383)     end if
( 3384)   end subroutine WINTERP1D_2
( 3385) 
( 3386) !
( 3387) !*************************************************************************
( 3388) !
( 3389) 
( 3390) 
( 3391) 
( 3392) !end module METS2AORSA
( 3393) 
